(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{}],2:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "jquery"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, require("jquery"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, global.jquery);
    global.bootstrapSelectMin = mod.exports;
  }
})(undefined, function (module) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /*!
   * Bootstrap-select v1.13.1 (https://developer.snapappointments.com/bootstrap-select)
   *
   * Copyright 2012-2018 SnapAppointments, LLC
   * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
   */
  !function (a, b) {
    "function" == typeof define && define.amd ? define(["jquery"], function (a) {
      return b(a);
    }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = b() : b(a.jQuery);
  }(undefined, function (a) {
    !function (a) {
      "use strict";

      function b(a, b) {
        return a.length === b.length && a.every(function (a, c) {
          return a === b[c];
        });
      }function c(a) {
        var b,
            c = [],
            d = a && a.options;if (a.multiple) for (var e = 0, f = d.length; e < f; e++) {
          b = d[e], b.selected && c.push(b.value || b.text);
        } else c = a.value;return c;
      }function d(a, b, c, d) {
        for (var e = ["content", "subtext", "tokens"], g = !1, h = 0; h < e.length; h++) {
          var i = e[h],
              j = a[i];if (j && (j = j.toString(), "content" === i && (j = j.replace(/<[^>]+>/g, "")), d && (j = f(j)), j = j.toUpperCase(), g = "contains" === c ? j.indexOf(b) >= 0 : j.startsWith(b))) break;
        }return g;
      }function e(a) {
        return parseInt(a, 10) || 0;
      }function f(b) {
        var c = [{ re: /[\xC0-\xC6]/g, ch: "A" }, { re: /[\xE0-\xE6]/g, ch: "a" }, { re: /[\xC8-\xCB]/g, ch: "E" }, { re: /[\xE8-\xEB]/g, ch: "e" }, { re: /[\xCC-\xCF]/g, ch: "I" }, { re: /[\xEC-\xEF]/g, ch: "i" }, { re: /[\xD2-\xD6]/g, ch: "O" }, { re: /[\xF2-\xF6]/g, ch: "o" }, { re: /[\xD9-\xDC]/g, ch: "U" }, { re: /[\xF9-\xFC]/g, ch: "u" }, { re: /[\xC7-\xE7]/g, ch: "c" }, { re: /[\xD1]/g, ch: "N" }, { re: /[\xF1]/g, ch: "n" }];return a.each(c, function () {
          b = b ? b.replace(this.re, this.ch) : "";
        }), b;
      }function g(b) {
        var c = arguments,
            d = b;[].shift.apply(c);var e,
            f = this.each(function () {
          var b = a(this);if (b.is("select")) {
            var f = b.data("selectpicker"),
                g = "object" == (typeof d === "undefined" ? "undefined" : _typeof(d)) && d;if (f) {
              if (g) for (var h in g) {
                g.hasOwnProperty(h) && (f.options[h] = g[h]);
              }
            } else {
              var i = a.extend({}, x.DEFAULTS, a.fn.selectpicker.defaults || {}, b.data(), g);i.template = a.extend({}, x.DEFAULTS.template, a.fn.selectpicker.defaults ? a.fn.selectpicker.defaults.template : {}, b.data().template, g.template), b.data("selectpicker", f = new x(this, i));
            }"string" == typeof d && (e = f[d] instanceof Function ? f[d].apply(f, c) : f.options[d]);
          }
        });return void 0 !== e ? e : f;
      }var h = document.createElement("_");if (h.classList.toggle("c3", !1), h.classList.contains("c3")) {
        var i = DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle = function (a, b) {
          return 1 in arguments && !this.contains(a) == !b ? b : i.call(this, a);
        };
      }String.prototype.startsWith || function () {
        var a = function () {
          try {
            var a = {},
                b = Object.defineProperty,
                c = b(a, a, a) && b;
          } catch (a) {}return c;
        }(),
            b = {}.toString,
            c = function c(a) {
          if (null == this) throw new TypeError();var c = String(this);if (a && "[object RegExp]" == b.call(a)) throw new TypeError();var d = c.length,
              e = String(a),
              f = e.length,
              g = arguments.length > 1 ? arguments[1] : void 0,
              h = g ? Number(g) : 0;h != h && (h = 0);var i = Math.min(Math.max(h, 0), d);if (f + i > d) return !1;for (var j = -1; ++j < f;) {
            if (c.charCodeAt(i + j) != e.charCodeAt(j)) return !1;
          }return !0;
        };a ? a(String.prototype, "startsWith", { value: c, configurable: !0, writable: !0 }) : String.prototype.startsWith = c;
      }(), Object.keys || (Object.keys = function (a, b, c) {
        c = [];for (b in a) {
          c.hasOwnProperty.call(a, b) && c.push(b);
        }return c;
      });var j = { useDefault: !1, _set: a.valHooks.select.set };a.valHooks.select.set = function (b, c) {
        return c && !j.useDefault && a(b).data("selected", !0), j._set.apply(this, arguments);
      };var k = null,
          l = function () {
        try {
          return new Event("change"), !0;
        } catch (a) {
          return !1;
        }
      }();a.fn.triggerNative = function (a) {
        var b,
            c = this[0];c.dispatchEvent ? (l ? b = new Event(a, { bubbles: !0 }) : (b = document.createEvent("Event"), b.initEvent(a, !0, !1)), c.dispatchEvent(b)) : c.fireEvent ? (b = document.createEventObject(), b.eventType = a, c.fireEvent("on" + a, b)) : this.trigger(a);
      };var m = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" },
          n = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#x27;": "'", "&#x60;": "`" },
          o = function o(a) {
        var b = function b(_b) {
          return a[_b];
        },
            c = "(?:" + Object.keys(a).join("|") + ")",
            d = RegExp(c),
            e = RegExp(c, "g");return function (a) {
          return a = null == a ? "" : "" + a, d.test(a) ? a.replace(e, b) : a;
        };
      },
          p = o(m),
          q = o(n),
          r = { 32: " ", 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 59: ";", 65: "A", 66: "B", 67: "C", 68: "D", 69: "E", 70: "F", 71: "G", 72: "H", 73: "I", 74: "J", 75: "K", 76: "L", 77: "M", 78: "N", 79: "O", 80: "P", 81: "Q", 82: "R", 83: "S", 84: "T", 85: "U", 86: "V", 87: "W", 88: "X", 89: "Y", 90: "Z", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9" },
          s = { ESCAPE: 27, ENTER: 13, SPACE: 32, TAB: 9, ARROW_UP: 38, ARROW_DOWN: 40 },
          t = {};try {
        t.full = (a.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split("."), t.major = t.full[0];
      } catch (a) {
        console.error("There was an issue retrieving Bootstrap's version. Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision.", a), t.major = "3";
      }var u = { DISABLED: "disabled", DIVIDER: "4" === t.major ? "dropdown-divider" : "divider", SHOW: "4" === t.major ? "show" : "open", DROPUP: "dropup", MENURIGHT: "dropdown-menu-right", MENULEFT: "dropdown-menu-left", BUTTONCLASS: "4" === t.major ? "btn-light" : "btn-default", POPOVERHEADER: "4" === t.major ? "popover-header" : "popover-title" },
          v = new RegExp(s.ARROW_UP + "|" + s.ARROW_DOWN),
          w = new RegExp("^" + s.TAB + "$|" + s.ESCAPE),
          x = (new RegExp(s.ENTER + "|" + s.SPACE), function (b, c) {
        var d = this;j.useDefault || (a.valHooks.select.set = j._set, j.useDefault = !0), this.$element = a(b), this.$newElement = null, this.$button = null, this.$menu = null, this.options = c, this.selectpicker = { main: { map: { newIndex: {}, originalIndex: {} } }, current: { map: {} }, search: { map: {} }, view: {}, keydown: { keyHistory: "", resetKeyHistory: { start: function start() {
                return setTimeout(function () {
                  d.selectpicker.keydown.keyHistory = "";
                }, 800);
              } } } }, null === this.options.title && (this.options.title = this.$element.attr("title"));var e = this.options.windowPadding;"number" == typeof e && (this.options.windowPadding = [e, e, e, e]), this.val = x.prototype.val, this.render = x.prototype.render, this.refresh = x.prototype.refresh, this.setStyle = x.prototype.setStyle, this.selectAll = x.prototype.selectAll, this.deselectAll = x.prototype.deselectAll, this.destroy = x.prototype.destroy, this.remove = x.prototype.remove, this.show = x.prototype.show, this.hide = x.prototype.hide, this.init();
      });x.VERSION = "1.13.1", x.DEFAULTS = { noneSelectedText: "Nothing selected", noneResultsText: "No results matched {0}", countSelectedText: function countSelectedText(a, b) {
          return 1 == a ? "{0} item selected" : "{0} items selected";
        }, maxOptionsText: function maxOptionsText(a, b) {
          return [1 == a ? "Limit reached ({n} item max)" : "Limit reached ({n} items max)", 1 == b ? "Group limit reached ({n} item max)" : "Group limit reached ({n} items max)"];
        }, selectAllText: "Select All", deselectAllText: "Deselect All", doneButton: !1, doneButtonText: "Close", multipleSeparator: ", ", styleBase: "btn", style: "btn-default", size: "auto", title: null, selectedTextFormat: "values", width: !1, container: !1, hideDisabled: !1, showSubtext: !1, showIcon: !0, showContent: !0, dropupAuto: !0, header: !1, liveSearch: !1, liveSearchPlaceholder: null, liveSearchNormalize: !1, liveSearchStyle: "contains", actionsBox: !1, iconBase: "glyphicon", tickIcon: "glyphicon-ok", showTick: !1, template: { caret: '<span class="caret"></span>' }, maxOptions: !1, mobile: !1, selectOnTab: !1, dropdownAlignRight: !1, windowPadding: 0, virtualScroll: 600 }, "4" === t.major && (x.DEFAULTS.style = "btn-light", x.DEFAULTS.iconBase = "", x.DEFAULTS.tickIcon = "bs-ok-default"), x.prototype = { constructor: x, init: function init() {
          var a = this,
              b = this.$element.attr("id");this.$element.addClass("bs-select-hidden"), this.multiple = this.$element.prop("multiple"), this.autofocus = this.$element.prop("autofocus"), this.$newElement = this.createDropdown(), this.createLi(), this.$element.after(this.$newElement).prependTo(this.$newElement), this.$button = this.$newElement.children("button"), this.$menu = this.$newElement.children(".dropdown-menu"), this.$menuInner = this.$menu.children(".inner"), this.$searchbox = this.$menu.find("input"), this.$element.removeClass("bs-select-hidden"), !0 === this.options.dropdownAlignRight && this.$menu.addClass(u.MENURIGHT), void 0 !== b && this.$button.attr("data-id", b), this.checkDisabled(), this.clickListener(), this.options.liveSearch && this.liveSearchListener(), this.render(), this.setStyle(), this.setWidth(), this.options.container ? this.selectPosition() : this.$element.on("hide.bs.select", function () {
            if (a.isVirtual()) {
              var b = a.$menuInner[0],
                  c = b.firstChild.cloneNode(!1);b.replaceChild(c, b.firstChild), b.scrollTop = 0;
            }
          }), this.$menu.data("this", this), this.$newElement.data("this", this), this.options.mobile && this.mobile(), this.$newElement.on({ "hide.bs.dropdown": function hideBsDropdown(b) {
              a.$menuInner.attr("aria-expanded", !1), a.$element.trigger("hide.bs.select", b);
            }, "hidden.bs.dropdown": function hiddenBsDropdown(b) {
              a.$element.trigger("hidden.bs.select", b);
            }, "show.bs.dropdown": function showBsDropdown(b) {
              a.$menuInner.attr("aria-expanded", !0), a.$element.trigger("show.bs.select", b);
            }, "shown.bs.dropdown": function shownBsDropdown(b) {
              a.$element.trigger("shown.bs.select", b);
            } }), a.$element[0].hasAttribute("required") && this.$element.on("invalid", function () {
            a.$button.addClass("bs-invalid"), a.$element.on({ "shown.bs.select": function shownBsSelect() {
                a.$element.val(a.$element.val()).off("shown.bs.select");
              }, "rendered.bs.select": function renderedBsSelect() {
                this.validity.valid && a.$button.removeClass("bs-invalid"), a.$element.off("rendered.bs.select");
              } }), a.$button.on("blur.bs.select", function () {
              a.$element.focus().blur(), a.$button.off("blur.bs.select");
            });
          }), setTimeout(function () {
            a.$element.trigger("loaded.bs.select");
          });
        }, createDropdown: function createDropdown() {
          var b = this.multiple || this.options.showTick ? " show-tick" : "",
              c = this.autofocus ? " autofocus" : "",
              d = this.options.header ? '<div class="' + u.POPOVERHEADER + '"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>" : "",
              e = this.options.liveSearch ? '<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"' + (null === this.options.liveSearchPlaceholder ? "" : ' placeholder="' + p(this.options.liveSearchPlaceholder) + '"') + ' role="textbox" aria-label="Search"></div>' : "",
              f = this.multiple && this.options.actionsBox ? '<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn ' + u.BUTTONCLASS + '">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn ' + u.BUTTONCLASS + '">' + this.options.deselectAllText + "</button></div></div>" : "",
              g = this.multiple && this.options.doneButton ? '<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm ' + u.BUTTONCLASS + '">' + this.options.doneButtonText + "</button></div></div>" : "",
              h = '<div class="dropdown bootstrap-select' + b + '"><button type="button" class="' + this.options.styleBase + ' dropdown-toggle" data-toggle="dropdown"' + c + ' role="button"><div class="filter-option"><div class="filter-option-inner"><div class="filter-option-inner-inner"></div></div> </div>' + ("4" === t.major ? "" : '<span class="bs-caret">' + this.options.template.caret + "</span>") + '</button><div class="dropdown-menu ' + ("4" === t.major ? "" : u.SHOW) + '" role="combobox">' + d + e + f + '<div class="inner ' + u.SHOW + '" role="listbox" aria-expanded="false" tabindex="-1"><ul class="dropdown-menu inner ' + ("4" === t.major ? u.SHOW : "") + '"></ul></div>' + g + "</div></div>";return a(h);
        }, setPositionData: function setPositionData() {
          this.selectpicker.view.canHighlight = [];for (var a = 0; a < this.selectpicker.current.data.length; a++) {
            var b = this.selectpicker.current.data[a],
                c = !0;"divider" === b.type ? (c = !1, b.height = this.sizeInfo.dividerHeight) : "optgroup-label" === b.type ? (c = !1, b.height = this.sizeInfo.dropdownHeaderHeight) : b.height = this.sizeInfo.liHeight, b.disabled && (c = !1), this.selectpicker.view.canHighlight.push(c), b.position = (0 === a ? 0 : this.selectpicker.current.data[a - 1].position) + b.height;
          }
        }, isVirtual: function isVirtual() {
          return !1 !== this.options.virtualScroll && this.selectpicker.main.elements.length >= this.options.virtualScroll || !0 === this.options.virtualScroll;
        }, createView: function createView(c, d) {
          function e(a, d) {
            var e,
                j,
                k,
                l,
                m,
                n,
                o,
                p = f.selectpicker.current.elements.length,
                q = [],
                r = void 0,
                s = !0,
                t = f.isVirtual();f.selectpicker.view.scrollTop = a, !0 === t && f.sizeInfo.hasScrollBar && f.$menu[0].offsetWidth > f.sizeInfo.totalMenuWidth && (f.sizeInfo.menuWidth = f.$menu[0].offsetWidth, f.sizeInfo.totalMenuWidth = f.sizeInfo.menuWidth + f.sizeInfo.scrollBarWidth, f.$menu.css("min-width", f.sizeInfo.menuWidth)), e = Math.ceil(f.sizeInfo.menuInnerHeight / f.sizeInfo.liHeight * 1.5), j = Math.round(p / e) || 1;for (var u = 0; u < j; u++) {
              var v = (u + 1) * e;if (u === j - 1 && (v = p), q[u] = [u * e + (u ? 1 : 0), v], !p) break;void 0 === r && a <= f.selectpicker.current.data[v - 1].position - f.sizeInfo.menuInnerHeight && (r = u);
            }if (void 0 === r && (r = 0), m = [f.selectpicker.view.position0, f.selectpicker.view.position1], k = Math.max(0, r - 1), l = Math.min(j - 1, r + 1), f.selectpicker.view.position0 = Math.max(0, q[k][0]) || 0, f.selectpicker.view.position1 = Math.min(p, q[l][1]) || 0, n = m[0] !== f.selectpicker.view.position0 || m[1] !== f.selectpicker.view.position1, void 0 !== f.activeIndex && (h = f.selectpicker.current.elements[f.selectpicker.current.map.newIndex[f.prevActiveIndex]], i = f.selectpicker.current.elements[f.selectpicker.current.map.newIndex[f.activeIndex]], g = f.selectpicker.current.elements[f.selectpicker.current.map.newIndex[f.selectedIndex]], d && (f.activeIndex !== f.selectedIndex && (i.classList.remove("active"), i.firstChild && i.firstChild.classList.remove("active")), f.activeIndex = void 0), f.activeIndex && f.activeIndex !== f.selectedIndex && g && g.length && (g.classList.remove("active"), g.firstChild && g.firstChild.classList.remove("active"))), void 0 !== f.prevActiveIndex && f.prevActiveIndex !== f.activeIndex && f.prevActiveIndex !== f.selectedIndex && h && h.length && (h.classList.remove("active"), h.firstChild && h.firstChild.classList.remove("active")), (d || n) && (o = f.selectpicker.view.visibleElements ? f.selectpicker.view.visibleElements.slice() : [], f.selectpicker.view.visibleElements = f.selectpicker.current.elements.slice(f.selectpicker.view.position0, f.selectpicker.view.position1), f.setOptionStatus(), (c || !1 === t && d) && (s = !b(o, f.selectpicker.view.visibleElements)), (d || !0 === t) && s)) {
              var w,
                  x,
                  y = f.$menuInner[0],
                  z = document.createDocumentFragment(),
                  A = y.firstChild.cloneNode(!1),
                  B = !0 === t ? f.selectpicker.view.visibleElements : f.selectpicker.current.elements;y.replaceChild(A, y.firstChild);for (var u = 0, C = B.length; u < C; u++) {
                z.appendChild(B[u]);
              }!0 === t && (w = 0 === f.selectpicker.view.position0 ? 0 : f.selectpicker.current.data[f.selectpicker.view.position0 - 1].position, x = f.selectpicker.view.position1 > p - 1 ? 0 : f.selectpicker.current.data[p - 1].position - f.selectpicker.current.data[f.selectpicker.view.position1 - 1].position, y.firstChild.style.marginTop = w + "px", y.firstChild.style.marginBottom = x + "px"), y.firstChild.appendChild(z);
            }if (f.prevActiveIndex = f.activeIndex, f.options.liveSearch) {
              if (c && d) {
                var D,
                    E = 0;f.selectpicker.view.canHighlight[E] || (E = 1 + f.selectpicker.view.canHighlight.slice(1).indexOf(!0)), D = f.selectpicker.view.visibleElements[E], f.selectpicker.view.currentActive && (f.selectpicker.view.currentActive.classList.remove("active"), f.selectpicker.view.currentActive.firstChild && f.selectpicker.view.currentActive.firstChild.classList.remove("active")), D && (D.classList.add("active"), D.firstChild && D.firstChild.classList.add("active")), f.activeIndex = f.selectpicker.current.map.originalIndex[E];
              }
            } else f.$menuInner.focus();
          }d = d || 0;var f = this;this.selectpicker.current = c ? this.selectpicker.search : this.selectpicker.main;var g,
              h,
              i = [];this.setPositionData(), e(d, !0), this.$menuInner.off("scroll.createView").on("scroll.createView", function (a, b) {
            f.noScroll || e(this.scrollTop, b), f.noScroll = !1;
          }), a(window).off("resize.createView").on("resize.createView", function () {
            e(f.$menuInner[0].scrollTop);
          });
        }, createLi: function createLi() {
          var b,
              c = this,
              d = [],
              e = 0,
              f = 0,
              g = [],
              h = 0,
              i = 0,
              j = -1;this.selectpicker.view.titleOption || (this.selectpicker.view.titleOption = document.createElement("option"));var k = { span: document.createElement("span"), subtext: document.createElement("small"), a: document.createElement("a"), li: document.createElement("li"), whitespace: document.createTextNode(" ") },
              l = k.span.cloneNode(!1),
              m = document.createDocumentFragment();l.className = c.options.iconBase + " " + c.options.tickIcon + " check-mark", k.a.appendChild(l), k.a.setAttribute("role", "option"), k.subtext.className = "text-muted", k.text = k.span.cloneNode(!1), k.text.className = "text";var n = function n(a, b, c, d) {
            var e = k.li.cloneNode(!1);return a && (1 === a.nodeType || 11 === a.nodeType ? e.appendChild(a) : e.innerHTML = a), void 0 !== c && "" !== c && (e.className = c), void 0 !== d && null !== d && e.classList.add("optgroup-" + d), e;
          },
              o = function o(a, b, c) {
            var d = k.a.cloneNode(!0);return a && (11 === a.nodeType ? d.appendChild(a) : d.insertAdjacentHTML("beforeend", a)), void 0 !== b & "" !== b && (d.className = b), "4" === t.major && d.classList.add("dropdown-item"), c && d.setAttribute("style", c), d;
          },
              q = function q(a) {
            var b,
                d,
                e = k.text.cloneNode(!1);if (a.optionContent) e.innerHTML = a.optionContent;else {
              if (e.textContent = a.text, a.optionIcon) {
                var f = k.whitespace.cloneNode(!1);d = k.span.cloneNode(!1), d.className = c.options.iconBase + " " + a.optionIcon, m.appendChild(d), m.appendChild(f);
              }a.optionSubtext && (b = k.subtext.cloneNode(!1), b.innerHTML = a.optionSubtext, e.appendChild(b));
            }return m.appendChild(e), m;
          },
              r = function r(a) {
            var b,
                d,
                e = k.text.cloneNode(!1);if (e.textContent = a.labelEscaped, a.labelIcon) {
              var f = k.whitespace.cloneNode(!1);d = k.span.cloneNode(!1), d.className = c.options.iconBase + " " + a.labelIcon, m.appendChild(d), m.appendChild(f);
            }return a.labelSubtext && (b = k.subtext.cloneNode(!1), b.textContent = a.labelSubtext, e.appendChild(b)), m.appendChild(e), m;
          };if (this.options.title && !this.multiple) {
            j--;var s = this.$element[0],
                v = !1,
                w = !this.selectpicker.view.titleOption.parentNode;if (w) {
              this.selectpicker.view.titleOption.className = "bs-title-option", this.selectpicker.view.titleOption.value = "";v = void 0 === a(s.options[s.selectedIndex]).attr("selected") && void 0 === this.$element.data("selected");
            }(w || 0 !== this.selectpicker.view.titleOption.index) && s.insertBefore(this.selectpicker.view.titleOption, s.firstChild), v && (s.selectedIndex = 0);
          }var x = this.$element.find("option");x.each(function (k) {
            var l = a(this);if (j++, !l.hasClass("bs-title-option")) {
              var m,
                  s,
                  t = l.data(),
                  v = this.className || "",
                  w = p(this.style.cssText),
                  y = t.content,
                  z = this.textContent,
                  A = t.tokens,
                  B = t.subtext,
                  C = t.icon,
                  D = l.parent(),
                  E = D[0],
                  F = "OPTGROUP" === E.tagName,
                  G = F && E.disabled,
                  H = this.disabled || G,
                  I = this.previousElementSibling && "OPTGROUP" === this.previousElementSibling.tagName,
                  J = D.data();if (!0 === t.hidden || c.options.hideDisabled && (H && !F || G)) {
                if (m = t.prevHiddenIndex, l.next().data("prevHiddenIndex", void 0 !== m ? m : k), j--, !I && void 0 !== m) {
                  var K = x[m].previousElementSibling;K && "OPTGROUP" === K.tagName && !K.disabled && (I = !0);
                }return void (I && "divider" !== g[g.length - 1].type && (j++, d.push(n(!1, 0, u.DIVIDER, h + "div")), g.push({ type: "divider", optID: h, originalIndex: k })));
              }if (F && !0 !== t.divider) {
                if (c.options.hideDisabled && H) {
                  if (void 0 === J.allOptionsDisabled) {
                    var L = D.children();D.data("allOptionsDisabled", L.filter(":disabled").length === L.length);
                  }if (D.data("allOptionsDisabled")) return void j--;
                }var M = " " + E.className || "";if (!this.previousElementSibling) {
                  h += 1;var N = E.label,
                      O = p(N),
                      P = J.subtext,
                      Q = J.icon;0 !== k && d.length > 0 && (j++, d.push(n(!1, 0, u.DIVIDER, h + "div")), g.push({ type: "divider", optID: h, originalIndex: k })), j++;var R = r({ labelEscaped: O, labelSubtext: P, labelIcon: Q });d.push(n(R, 0, "dropdown-header" + M, h)), g.push({ content: O, subtext: P, type: "optgroup-label", optID: h, originalIndex: k }), i = j - 1;
                }if (c.options.hideDisabled && H || !0 === t.hidden) return void j--;s = q({ text: z, optionContent: y, optionSubtext: B, optionIcon: C }), d.push(n(o(s, "opt " + v + M, w), 0, "", h)), g.push({ content: y || z, subtext: B, tokens: A, type: "option", optID: h, headerIndex: i, lastIndex: i + E.childElementCount, originalIndex: k, data: t }), e++;
              } else if (!0 === t.divider) d.push(n(!1, 0, "divider")), g.push({ type: "divider", originalIndex: k });else {
                if (!I && c.options.hideDisabled && void 0 !== (m = t.prevHiddenIndex)) {
                  var K = x[m].previousElementSibling;K && "OPTGROUP" === K.tagName && !K.disabled && (I = !0);
                }I && "divider" !== g[g.length - 1].type && (j++, d.push(n(!1, 0, u.DIVIDER, h + "div")), g.push({ type: "divider", optID: h, originalIndex: k })), s = q({ text: z, optionContent: y, optionSubtext: B, optionIcon: C }), d.push(n(o(s, v, w))), g.push({ content: y || z, subtext: B, tokens: A, type: "option", originalIndex: k, data: t }), e++;
              }c.selectpicker.main.map.newIndex[k] = j, c.selectpicker.main.map.originalIndex[j] = k;var S = g[g.length - 1];S.disabled = H;var T = 0;S.content && (T += S.content.length), S.subtext && (T += S.subtext.length), C && (T += 1), T > f && (f = T, b = d[d.length - 1]);
            }
          }), this.selectpicker.main.elements = d, this.selectpicker.main.data = g, this.selectpicker.current = this.selectpicker.main, this.selectpicker.view.widestOption = b, this.selectpicker.view.availableOptionsCount = e;
        }, findLis: function findLis() {
          return this.$menuInner.find(".inner > li");
        }, render: function render() {
          var a = this,
              b = this.$element.find("option"),
              c = [],
              d = [];this.togglePlaceholder(), this.tabIndex();for (var e = 0, f = this.selectpicker.main.elements.length; e < f; e++) {
            var g = this.selectpicker.main.map.originalIndex[e],
                h = b[g];if (h && h.selected && (c.push(h), d.length < 100 && "count" !== a.options.selectedTextFormat || 1 === c.length)) {
              if (a.options.hideDisabled && (h.disabled || "OPTGROUP" === h.parentNode.tagName && h.parentNode.disabled)) return;var i,
                  j,
                  k = this.selectpicker.main.data[e].data,
                  l = k.icon && a.options.showIcon ? '<i class="' + a.options.iconBase + " " + k.icon + '"></i> ' : "";i = a.options.showSubtext && k.subtext && !a.multiple ? ' <small class="text-muted">' + k.subtext + "</small>" : "", j = h.title ? h.title : k.content && a.options.showContent ? k.content.toString() : l + h.innerHTML.trim() + i, d.push(j);
            }
          }var m = this.multiple ? d.join(this.options.multipleSeparator) : d[0];if (c.length > 50 && (m += "..."), this.multiple && -1 !== this.options.selectedTextFormat.indexOf("count")) {
            var n = this.options.selectedTextFormat.split(">");if (n.length > 1 && c.length > n[1] || 1 === n.length && c.length >= 2) {
              var o = this.selectpicker.view.availableOptionsCount;m = ("function" == typeof this.options.countSelectedText ? this.options.countSelectedText(c.length, o) : this.options.countSelectedText).replace("{0}", c.length.toString()).replace("{1}", o.toString());
            }
          }void 0 == this.options.title && (this.options.title = this.$element.attr("title")), "static" == this.options.selectedTextFormat && (m = this.options.title), m || (m = void 0 !== this.options.title ? this.options.title : this.options.noneSelectedText), this.$button[0].title = q(m.replace(/<[^>]*>?/g, "").trim()), this.$button.find(".filter-option-inner-inner")[0].innerHTML = m, this.$element.trigger("rendered.bs.select");
        }, setStyle: function setStyle(a, b) {
          this.$element.attr("class") && this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ""));var c = a || this.options.style;"add" == b ? this.$button.addClass(c) : "remove" == b ? this.$button.removeClass(c) : (this.$button.removeClass(this.options.style), this.$button.addClass(c));
        }, liHeight: function liHeight(b) {
          if (b || !1 !== this.options.size && !this.sizeInfo) {
            this.sizeInfo || (this.sizeInfo = {});var c = document.createElement("div"),
                d = document.createElement("div"),
                f = document.createElement("div"),
                g = document.createElement("ul"),
                h = document.createElement("li"),
                i = document.createElement("li"),
                j = document.createElement("li"),
                k = document.createElement("a"),
                l = document.createElement("span"),
                m = this.options.header && this.$menu.find("." + u.POPOVERHEADER).length > 0 ? this.$menu.find("." + u.POPOVERHEADER)[0].cloneNode(!0) : null,
                n = this.options.liveSearch ? document.createElement("div") : null,
                o = this.options.actionsBox && this.multiple && this.$menu.find(".bs-actionsbox").length > 0 ? this.$menu.find(".bs-actionsbox")[0].cloneNode(!0) : null,
                p = this.options.doneButton && this.multiple && this.$menu.find(".bs-donebutton").length > 0 ? this.$menu.find(".bs-donebutton")[0].cloneNode(!0) : null;if (this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth, l.className = "text", k.className = "dropdown-item", c.className = this.$menu[0].parentNode.className + " " + u.SHOW, c.style.width = this.sizeInfo.selectWidth + "px", d.className = "dropdown-menu " + u.SHOW, f.className = "inner " + u.SHOW, g.className = "dropdown-menu inner " + ("4" === t.major ? u.SHOW : ""), h.className = u.DIVIDER, i.className = "dropdown-header", l.appendChild(document.createTextNode("Inner text")), k.appendChild(l), j.appendChild(k), i.appendChild(l.cloneNode(!0)), this.selectpicker.view.widestOption && g.appendChild(this.selectpicker.view.widestOption.cloneNode(!0)), g.appendChild(j), g.appendChild(h), g.appendChild(i), m && d.appendChild(m), n) {
              var q = document.createElement("input");n.className = "bs-searchbox", q.className = "form-control", n.appendChild(q), d.appendChild(n);
            }o && d.appendChild(o), f.appendChild(g), d.appendChild(f), p && d.appendChild(p), c.appendChild(d), document.body.appendChild(c);var r,
                s = k.offsetHeight,
                v = i ? i.offsetHeight : 0,
                w = m ? m.offsetHeight : 0,
                x = n ? n.offsetHeight : 0,
                y = o ? o.offsetHeight : 0,
                z = p ? p.offsetHeight : 0,
                A = a(h).outerHeight(!0),
                B = !!window.getComputedStyle && window.getComputedStyle(d),
                C = d.offsetWidth,
                D = B ? null : a(d),
                E = { vert: e(B ? B.paddingTop : D.css("paddingTop")) + e(B ? B.paddingBottom : D.css("paddingBottom")) + e(B ? B.borderTopWidth : D.css("borderTopWidth")) + e(B ? B.borderBottomWidth : D.css("borderBottomWidth")), horiz: e(B ? B.paddingLeft : D.css("paddingLeft")) + e(B ? B.paddingRight : D.css("paddingRight")) + e(B ? B.borderLeftWidth : D.css("borderLeftWidth")) + e(B ? B.borderRightWidth : D.css("borderRightWidth")) },
                F = { vert: E.vert + e(B ? B.marginTop : D.css("marginTop")) + e(B ? B.marginBottom : D.css("marginBottom")) + 2, horiz: E.horiz + e(B ? B.marginLeft : D.css("marginLeft")) + e(B ? B.marginRight : D.css("marginRight")) + 2 };f.style.overflowY = "scroll", r = d.offsetWidth - C, document.body.removeChild(c), this.sizeInfo.liHeight = s, this.sizeInfo.dropdownHeaderHeight = v, this.sizeInfo.headerHeight = w, this.sizeInfo.searchHeight = x, this.sizeInfo.actionsHeight = y, this.sizeInfo.doneButtonHeight = z, this.sizeInfo.dividerHeight = A, this.sizeInfo.menuPadding = E, this.sizeInfo.menuExtras = F, this.sizeInfo.menuWidth = C, this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth, this.sizeInfo.scrollBarWidth = r, this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight, this.setPositionData();
          }
        }, getSelectPosition: function getSelectPosition() {
          var b,
              c = this,
              d = a(window),
              e = c.$newElement.offset(),
              f = a(c.options.container);c.options.container && !f.is("body") ? (b = f.offset(), b.top += parseInt(f.css("borderTopWidth")), b.left += parseInt(f.css("borderLeftWidth"))) : b = { top: 0, left: 0 };var g = c.options.windowPadding;this.sizeInfo.selectOffsetTop = e.top - b.top - d.scrollTop(), this.sizeInfo.selectOffsetBot = d.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - b.top - g[2], this.sizeInfo.selectOffsetLeft = e.left - b.left - d.scrollLeft(), this.sizeInfo.selectOffsetRight = d.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - b.left - g[1], this.sizeInfo.selectOffsetTop -= g[0], this.sizeInfo.selectOffsetLeft -= g[3];
        }, setMenuSize: function setMenuSize(a) {
          this.getSelectPosition();var b,
              c,
              d,
              e,
              f,
              g,
              h,
              i = this.sizeInfo.selectWidth,
              j = this.sizeInfo.liHeight,
              k = this.sizeInfo.headerHeight,
              l = this.sizeInfo.searchHeight,
              m = this.sizeInfo.actionsHeight,
              n = this.sizeInfo.doneButtonHeight,
              o = this.sizeInfo.dividerHeight,
              p = this.sizeInfo.menuPadding,
              q = 0;if (this.options.dropupAuto && (h = j * this.selectpicker.current.elements.length + p.vert, this.$newElement.toggleClass(u.DROPUP, this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && h + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot)), "auto" === this.options.size) e = this.selectpicker.current.elements.length > 3 ? 3 * this.sizeInfo.liHeight + this.sizeInfo.menuExtras.vert - 2 : 0, c = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert, d = e + k + l + m + n, g = Math.max(e - p.vert, 0), this.$newElement.hasClass(u.DROPUP) && (c = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert), f = c, b = c - k - l - m - n - p.vert;else if (this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size) {
            for (var r = 0; r < this.options.size; r++) {
              "divider" === this.selectpicker.current.data[r].type && q++;
            }c = j * this.options.size + q * o + p.vert, b = c - p.vert, f = c + k + l + m + n, d = g = "";
          }"auto" === this.options.dropdownAlignRight && this.$menu.toggleClass(u.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < this.$menu[0].offsetWidth - i), this.$menu.css({ "max-height": f + "px", overflow: "hidden", "min-height": d + "px" }), this.$menuInner.css({ "max-height": b + "px", "overflow-y": "auto", "min-height": g + "px" }), this.sizeInfo.menuInnerHeight = b, this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight && (this.sizeInfo.hasScrollBar = !0, this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth, this.$menu.css("min-width", this.sizeInfo.totalMenuWidth)), this.dropdown && this.dropdown._popper && this.dropdown._popper.update();
        }, setSize: function setSize(b) {
          if (this.liHeight(b), this.options.header && this.$menu.css("padding-top", 0), !1 !== this.options.size) {
            var c,
                d = this,
                e = a(window),
                f = 0;this.setMenuSize(), "auto" === this.options.size ? (this.$searchbox.off("input.setMenuSize propertychange.setMenuSize").on("input.setMenuSize propertychange.setMenuSize", function () {
              return d.setMenuSize();
            }), e.off("resize.setMenuSize scroll.setMenuSize").on("resize.setMenuSize scroll.setMenuSize", function () {
              return d.setMenuSize();
            })) : this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size && (this.$searchbox.off("input.setMenuSize propertychange.setMenuSize"), e.off("resize.setMenuSize scroll.setMenuSize")), b ? f = this.$menuInner[0].scrollTop : d.multiple || "number" == typeof (c = d.selectpicker.main.map.newIndex[d.$element[0].selectedIndex]) && !1 !== d.options.size && (f = d.sizeInfo.liHeight * c, f = f - d.sizeInfo.menuInnerHeight / 2 + d.sizeInfo.liHeight / 2), d.createView(!1, f);
          }
        }, setWidth: function setWidth() {
          var a = this;"auto" === this.options.width ? requestAnimationFrame(function () {
            a.$menu.css("min-width", "0"), a.liHeight(), a.setMenuSize();var b = a.$newElement.clone().appendTo("body"),
                c = b.css("width", "auto").children("button").outerWidth();b.remove(), a.sizeInfo.selectWidth = Math.max(a.sizeInfo.totalMenuWidth, c), a.$newElement.css("width", a.sizeInfo.selectWidth + "px");
          }) : "fit" === this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", "").addClass("fit-width")) : this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", this.options.width)) : (this.$menu.css("min-width", ""), this.$newElement.css("width", "")), this.$newElement.hasClass("fit-width") && "fit" !== this.options.width && this.$newElement.removeClass("fit-width");
        }, selectPosition: function selectPosition() {
          this.$bsContainer = a('<div class="bs-container" />');var b,
              c,
              d,
              e = this,
              f = a(this.options.container),
              g = function g(a) {
            var g = {};e.$bsContainer.addClass(a.attr("class").replace(/form-control|fit-width/gi, "")).toggleClass(u.DROPUP, a.hasClass(u.DROPUP)), b = a.offset(), f.is("body") ? c = { top: 0, left: 0 } : (c = f.offset(), c.top += parseInt(f.css("borderTopWidth")) - f.scrollTop(), c.left += parseInt(f.css("borderLeftWidth")) - f.scrollLeft()), d = a.hasClass(u.DROPUP) ? 0 : a[0].offsetHeight, t.major < 4 && (g.top = b.top - c.top + d, g.left = b.left - c.left), g.width = a[0].offsetWidth, e.$bsContainer.css(g);
          };this.$button.on("click.bs.dropdown.data-api", function () {
            e.isDisabled() || (g(e.$newElement), e.$bsContainer.appendTo(e.options.container).toggleClass(u.SHOW, !e.$button.hasClass(u.SHOW)).append(e.$menu));
          }), a(window).on("resize scroll", function () {
            g(e.$newElement);
          }), this.$element.on("hide.bs.select", function () {
            e.$menu.data("height", e.$menu.height()), e.$bsContainer.detach();
          });
        }, setOptionStatus: function setOptionStatus() {
          var a = this,
              b = this.$element.find("option");if (a.noScroll = !1, a.selectpicker.view.visibleElements && a.selectpicker.view.visibleElements.length) for (var c = 0; c < a.selectpicker.view.visibleElements.length; c++) {
            var d = a.selectpicker.current.map.originalIndex[c + a.selectpicker.view.position0],
                e = b[d];if (e) {
              var f = this.selectpicker.main.map.newIndex[d],
                  g = this.selectpicker.main.elements[f];a.setDisabled(d, e.disabled || "OPTGROUP" === e.parentNode.tagName && e.parentNode.disabled, f, g), a.setSelected(d, e.selected, f, g);
            }
          }
        }, setSelected: function setSelected(a, b, c, d) {
          var e,
              f,
              g,
              h = void 0 !== this.activeIndex,
              i = this.activeIndex === a,
              j = i || b && !this.multiple && !h;c || (c = this.selectpicker.main.map.newIndex[a]), d || (d = this.selectpicker.main.elements[c]), g = d.firstChild, b && (this.selectedIndex = a), d.classList.toggle("selected", b), d.classList.toggle("active", j), j && (this.selectpicker.view.currentActive = d, this.activeIndex = a), g && (g.classList.toggle("selected", b), g.classList.toggle("active", j), g.setAttribute("aria-selected", b)), j || !h && b && void 0 !== this.prevActiveIndex && (e = this.selectpicker.main.map.newIndex[this.prevActiveIndex], f = this.selectpicker.main.elements[e], f.classList.remove("selected"), f.classList.remove("active"), f.firstChild && (f.firstChild.classList.remove("selected"), f.firstChild.classList.remove("active")));
        }, setDisabled: function setDisabled(a, b, c, d) {
          var e;c || (c = this.selectpicker.main.map.newIndex[a]), d || (d = this.selectpicker.main.elements[c]), e = d.firstChild, d.classList.toggle(u.DISABLED, b), e && ("4" === t.major && e.classList.toggle(u.DISABLED, b), e.setAttribute("aria-disabled", b), b ? e.setAttribute("tabindex", -1) : e.setAttribute("tabindex", 0));
        }, isDisabled: function isDisabled() {
          return this.$element[0].disabled;
        }, checkDisabled: function checkDisabled() {
          var a = this;this.isDisabled() ? (this.$newElement.addClass(u.DISABLED), this.$button.addClass(u.DISABLED).attr("tabindex", -1).attr("aria-disabled", !0)) : (this.$button.hasClass(u.DISABLED) && (this.$newElement.removeClass(u.DISABLED), this.$button.removeClass(u.DISABLED).attr("aria-disabled", !1)), -1 != this.$button.attr("tabindex") || this.$element.data("tabindex") || this.$button.removeAttr("tabindex")), this.$button.click(function () {
            return !a.isDisabled();
          });
        }, togglePlaceholder: function togglePlaceholder() {
          var a = this.$element[0],
              b = a.selectedIndex,
              c = -1 === b;c || a.options[b].value || (c = !0), this.$button.toggleClass("bs-placeholder", c);
        }, tabIndex: function tabIndex() {
          this.$element.data("tabindex") !== this.$element.attr("tabindex") && -98 !== this.$element.attr("tabindex") && "-98" !== this.$element.attr("tabindex") && (this.$element.data("tabindex", this.$element.attr("tabindex")), this.$button.attr("tabindex", this.$element.data("tabindex"))), this.$element.attr("tabindex", -98);
        }, clickListener: function clickListener() {
          var b = this,
              d = a(document);d.data("spaceSelect", !1), this.$button.on("keyup", function (a) {
            /(32)/.test(a.keyCode.toString(10)) && d.data("spaceSelect") && (a.preventDefault(), d.data("spaceSelect", !1));
          }), this.$newElement.on("show.bs.dropdown", function () {
            t.major > 3 && !b.dropdown && (b.dropdown = b.$button.data("bs.dropdown"), b.dropdown._menu = b.$menu[0]);
          }), this.$button.on("click.bs.dropdown.data-api", function () {
            b.$newElement.hasClass(u.SHOW) || b.setSize();
          }), this.$element.on("shown.bs.select", function () {
            b.$menuInner[0].scrollTop !== b.selectpicker.view.scrollTop && (b.$menuInner[0].scrollTop = b.selectpicker.view.scrollTop), b.options.liveSearch ? b.$searchbox.focus() : b.$menuInner.focus();
          }), this.$menuInner.on("click", "li a", function (d, e) {
            var f = a(this),
                g = b.isVirtual() ? b.selectpicker.view.position0 : 0,
                h = b.selectpicker.current.map.originalIndex[f.parent().index() + g],
                i = c(b.$element[0]),
                j = b.$element.prop("selectedIndex"),
                l = !0;if (b.multiple && 1 !== b.options.maxOptions && d.stopPropagation(), d.preventDefault(), !b.isDisabled() && !f.parent().hasClass(u.DISABLED)) {
              var m = b.$element.find("option"),
                  n = m.eq(h),
                  o = n.prop("selected"),
                  p = n.parent("optgroup"),
                  q = b.options.maxOptions,
                  r = p.data("maxOptions") || !1;if (h === b.activeIndex && (e = !0), e || (b.prevActiveIndex = b.activeIndex, b.activeIndex = void 0), b.multiple) {
                if (n.prop("selected", !o), b.setSelected(h, !o), f.blur(), !1 !== q || !1 !== r) {
                  var s = q < m.filter(":selected").length,
                      t = r < p.find("option:selected").length;if (q && s || r && t) if (q && 1 == q) m.prop("selected", !1), n.prop("selected", !0), b.$menuInner.find(".selected").removeClass("selected"), b.setSelected(h, !0);else if (r && 1 == r) {
                    p.find("option:selected").prop("selected", !1), n.prop("selected", !0);var v = b.selectpicker.current.data[f.parent().index() + b.selectpicker.view.position0].optID;b.$menuInner.find(".optgroup-" + v).removeClass("selected"), b.setSelected(h, !0);
                  } else {
                    var w = "string" == typeof b.options.maxOptionsText ? [b.options.maxOptionsText, b.options.maxOptionsText] : b.options.maxOptionsText,
                        x = "function" == typeof w ? w(q, r) : w,
                        y = x[0].replace("{n}", q),
                        z = x[1].replace("{n}", r),
                        A = a('<div class="notify"></div>');x[2] && (y = y.replace("{var}", x[2][q > 1 ? 0 : 1]), z = z.replace("{var}", x[2][r > 1 ? 0 : 1])), n.prop("selected", !1), b.$menu.append(A), q && s && (A.append(a("<div>" + y + "</div>")), l = !1, b.$element.trigger("maxReached.bs.select")), r && t && (A.append(a("<div>" + z + "</div>")), l = !1, b.$element.trigger("maxReachedGrp.bs.select")), setTimeout(function () {
                      b.setSelected(h, !1);
                    }, 10), A.delay(750).fadeOut(300, function () {
                      a(this).remove();
                    });
                  }
                }
              } else m.prop("selected", !1), n.prop("selected", !0), b.setSelected(h, !0);!b.multiple || b.multiple && 1 === b.options.maxOptions ? b.$button.focus() : b.options.liveSearch && b.$searchbox.focus(), l && (i != c(b.$element[0]) && b.multiple || j != b.$element.prop("selectedIndex") && !b.multiple) && (k = [h, n.prop("selected"), i], b.$element.triggerNative("change"));
            }
          }), this.$menu.on("click", "li." + u.DISABLED + " a, ." + u.POPOVERHEADER + ", ." + u.POPOVERHEADER + " :not(.close)", function (c) {
            c.currentTarget == this && (c.preventDefault(), c.stopPropagation(), b.options.liveSearch && !a(c.target).hasClass("close") ? b.$searchbox.focus() : b.$button.focus());
          }), this.$menuInner.on("click", ".divider, .dropdown-header", function (a) {
            a.preventDefault(), a.stopPropagation(), b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus();
          }), this.$menu.on("click", "." + u.POPOVERHEADER + " .close", function () {
            b.$button.click();
          }), this.$searchbox.on("click", function (a) {
            a.stopPropagation();
          }), this.$menu.on("click", ".actions-btn", function (c) {
            b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus(), c.preventDefault(), c.stopPropagation(), a(this).hasClass("bs-select-all") ? b.selectAll() : b.deselectAll();
          }), this.$element.on({ change: function change() {
              b.render(), b.$element.trigger("changed.bs.select", k), k = null;
            }, focus: function focus() {
              b.$button.focus();
            } });
        }, liveSearchListener: function liveSearchListener() {
          var a = this,
              b = document.createElement("li");this.$button.on("click.bs.dropdown.data-api", function () {
            a.$searchbox.val() && a.$searchbox.val("");
          }), this.$searchbox.on("click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api", function (a) {
            a.stopPropagation();
          }), this.$searchbox.on("input propertychange", function () {
            var c = a.$searchbox.val();if (a.selectpicker.search.map.newIndex = {}, a.selectpicker.search.map.originalIndex = {}, a.selectpicker.search.elements = [], a.selectpicker.search.data = [], c) {
              var e,
                  f = [],
                  g = c.toUpperCase(),
                  h = {},
                  i = [],
                  j = a._searchStyle(),
                  k = a.options.liveSearchNormalize;a._$lisSelected = a.$menuInner.find(".selected");for (var e = 0; e < a.selectpicker.main.data.length; e++) {
                var l = a.selectpicker.main.data[e];h[e] || (h[e] = d(l, g, j, k)), h[e] && void 0 !== l.headerIndex && -1 === i.indexOf(l.headerIndex) && (l.headerIndex > 0 && (h[l.headerIndex - 1] = !0, i.push(l.headerIndex - 1)), h[l.headerIndex] = !0, i.push(l.headerIndex), h[l.lastIndex + 1] = !0), h[e] && "optgroup-label" !== l.type && i.push(e);
              }for (var e = 0, m = i.length; e < m; e++) {
                var n = i[e],
                    o = i[e - 1],
                    l = a.selectpicker.main.data[n],
                    q = a.selectpicker.main.data[o];("divider" !== l.type || "divider" === l.type && q && "divider" !== q.type && m - 1 !== e) && (a.selectpicker.search.data.push(l), f.push(a.selectpicker.main.elements[n]), a.selectpicker.search.map.newIndex[l.originalIndex] = f.length - 1, a.selectpicker.search.map.originalIndex[f.length - 1] = l.originalIndex);
              }a.activeIndex = void 0, a.noScroll = !0, a.$menuInner.scrollTop(0), a.selectpicker.search.elements = f, a.createView(!0), f.length || (b.className = "no-results", b.innerHTML = a.options.noneResultsText.replace("{0}", '"' + p(c) + '"'), a.$menuInner[0].firstChild.appendChild(b));
            } else a.$menuInner.scrollTop(0), a.createView(!1);
          });
        }, _searchStyle: function _searchStyle() {
          return this.options.liveSearchStyle || "contains";
        }, val: function val(a) {
          return void 0 !== a ? (this.$element.val(a).triggerNative("change"), this.$element) : this.$element.val();
        }, changeAll: function changeAll(a) {
          if (this.multiple) {
            void 0 === a && (a = !0);var b = this.$element.find("option"),
                d = 0,
                e = 0,
                f = c(this.$element[0]);this.$element.addClass("bs-select-hidden");for (var g = 0; g < this.selectpicker.current.elements.length; g++) {
              var h = this.selectpicker.current.map.originalIndex[g],
                  i = b[h];i && (i.selected && d++, i.selected = a, i.selected && e++);
            }this.$element.removeClass("bs-select-hidden"), d !== e && (this.setOptionStatus(), this.togglePlaceholder(), k = [null, null, f], this.$element.triggerNative("change"));
          }
        }, selectAll: function selectAll() {
          return this.changeAll(!0);
        }, deselectAll: function deselectAll() {
          return this.changeAll(!1);
        }, toggle: function toggle(a) {
          a = a || window.event, a && a.stopPropagation(), this.$button.trigger("click.bs.dropdown.data-api");
        }, keydown: function keydown(b) {
          var c,
              e,
              f,
              g,
              h,
              i = a(this),
              j = i.is("input") ? i.parent().parent() : i.parent(),
              k = j.data("this"),
              l = k.findLis(),
              m = !1,
              n = b.which === s.TAB && !i.hasClass("dropdown-toggle") && !k.options.selectOnTab,
              o = v.test(b.which) || n,
              p = k.$menuInner[0].scrollTop,
              q = k.isVirtual(),
              t = !0 === q ? k.selectpicker.view.position0 : 0;if (e = k.$newElement.hasClass(u.SHOW), !e && (o || b.which >= 48 && b.which <= 57 || b.which >= 96 && b.which <= 105 || b.which >= 65 && b.which <= 90) && k.$button.trigger("click.bs.dropdown.data-api"), b.which === s.ESCAPE && e && (b.preventDefault(), k.$button.trigger("click.bs.dropdown.data-api").focus()), o) {
            if (!l.length) return;c = !0 === q ? l.index(l.filter(".active")) : k.selectpicker.current.map.newIndex[k.activeIndex], void 0 === c && (c = -1), -1 !== c && (f = k.selectpicker.current.elements[c + t], f.classList.remove("active"), f.firstChild && f.firstChild.classList.remove("active")), b.which === s.ARROW_UP ? (-1 !== c && c--, c + t < 0 && (c += l.length), k.selectpicker.view.canHighlight[c + t] || -1 === (c = k.selectpicker.view.canHighlight.slice(0, c + t).lastIndexOf(!0) - t) && (c = l.length - 1)) : (b.which === s.ARROW_DOWN || n) && (c++, c + t >= k.selectpicker.view.canHighlight.length && (c = 0), k.selectpicker.view.canHighlight[c + t] || (c = c + 1 + k.selectpicker.view.canHighlight.slice(c + t + 1).indexOf(!0))), b.preventDefault();var x = t + c;b.which === s.ARROW_UP ? 0 === t && c === l.length - 1 ? (k.$menuInner[0].scrollTop = k.$menuInner[0].scrollHeight, x = k.selectpicker.current.elements.length - 1) : (g = k.selectpicker.current.data[x], h = g.position - g.height, m = h < p) : (b.which === s.ARROW_DOWN || n) && (0 !== t && 0 === c ? (k.$menuInner[0].scrollTop = 0, x = 0) : (g = k.selectpicker.current.data[x], h = g.position - k.sizeInfo.menuInnerHeight, m = h > p)), f = k.selectpicker.current.elements[x], f.classList.add("active"), f.firstChild && f.firstChild.classList.add("active"), k.activeIndex = k.selectpicker.current.map.originalIndex[x], k.selectpicker.view.currentActive = f, m && (k.$menuInner[0].scrollTop = h), k.options.liveSearch ? k.$searchbox.focus() : i.focus();
          } else if (!i.is("input") && !w.test(b.which) || b.which === s.SPACE && k.selectpicker.keydown.keyHistory) {
            var y,
                z,
                A = [];b.preventDefault(), k.selectpicker.keydown.keyHistory += r[b.which], k.selectpicker.keydown.resetKeyHistory.cancel && clearTimeout(k.selectpicker.keydown.resetKeyHistory.cancel), k.selectpicker.keydown.resetKeyHistory.cancel = k.selectpicker.keydown.resetKeyHistory.start(), z = k.selectpicker.keydown.keyHistory, /^(.)\1+$/.test(z) && (z = z.charAt(0));for (var B = 0; B < k.selectpicker.current.data.length; B++) {
              var C,
                  D = k.selectpicker.current.data[B];C = d(D, z, "startsWith", !0), C && k.selectpicker.view.canHighlight[B] && (D.index = B, A.push(D.originalIndex));
            }if (A.length) {
              var E = 0;l.removeClass("active").find("a").removeClass("active"), 1 === z.length && (E = A.indexOf(k.activeIndex), -1 === E || E === A.length - 1 ? E = 0 : E++), y = k.selectpicker.current.map.newIndex[A[E]], g = k.selectpicker.current.data[y], p - g.position > 0 ? (h = g.position - g.height, m = !0) : (h = g.position - k.sizeInfo.menuInnerHeight, m = g.position > p + k.sizeInfo.menuInnerHeight), f = k.selectpicker.current.elements[y], f.classList.add("active"), f.firstChild && f.firstChild.classList.add("active"), k.activeIndex = A[E], f.firstChild.focus(), m && (k.$menuInner[0].scrollTop = h), i.focus();
            }
          }e && (b.which === s.SPACE && !k.selectpicker.keydown.keyHistory || b.which === s.ENTER || b.which === s.TAB && k.options.selectOnTab) && (b.which !== s.SPACE && b.preventDefault(), k.options.liveSearch && b.which === s.SPACE || (k.$menuInner.find(".active a").trigger("click", !0), i.focus(), k.options.liveSearch || (b.preventDefault(), a(document).data("spaceSelect", !0))));
        }, mobile: function mobile() {
          this.$element.addClass("mobile-device");
        }, refresh: function refresh() {
          var b = a.extend({}, this.options, this.$element.data());this.options = b, this.selectpicker.main.map.newIndex = {}, this.selectpicker.main.map.originalIndex = {}, this.createLi(), this.checkDisabled(), this.render(), this.setStyle(), this.setWidth(), this.setSize(!0), this.$element.trigger("refreshed.bs.select");
        }, hide: function hide() {
          this.$newElement.hide();
        }, show: function show() {
          this.$newElement.show();
        }, remove: function remove() {
          this.$newElement.remove(), this.$element.remove();
        }, destroy: function destroy() {
          this.$newElement.before(this.$element).remove(), this.$bsContainer ? this.$bsContainer.remove() : this.$menu.remove(), this.$element.off(".bs.select").removeData("selectpicker").removeClass("bs-select-hidden selectpicker");
        } };var y = a.fn.selectpicker;a.fn.selectpicker = g, a.fn.selectpicker.Constructor = x, a.fn.selectpicker.noConflict = function () {
        return a.fn.selectpicker = y, this;
      }, a(document).off("keydown.bs.dropdown.data-api").on("keydown.bs.select", '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bs-searchbox input', x.prototype.keydown).on("focusin.modal", '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bs-searchbox input', function (a) {
        a.stopPropagation();
      }), a(window).on("load.bs.select.data-api", function () {
        a(".selectpicker").each(function () {
          var b = a(this);g.call(b, b.data());
        });
      });
    }(a);
  });
  
});

},{"jquery":1}],3:[function(require,module,exports){
(function (global){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "jquery"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("jquery"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.jquery);
    global.bootstrapBundleMin = mod.exports;
  }
})(undefined, function (module, exports) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /*!
    * Bootstrap v4.2.1 (https://getbootstrap.com/)
    * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
    */
  !function (t, e) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports", "jquery"], e) : e(t.bootstrap = {}, t.jQuery);
  }(undefined, function (t, p) {
    "use strict";

    function i(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }function s(t, e, n) {
      return e && i(t.prototype, e), n && i(t, n), t;
    }function l(o) {
      for (var t = 1; t < arguments.length; t++) {
        var r = null != arguments[t] ? arguments[t] : {},
            e = Object.keys(r);"function" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(r).filter(function (t) {
          return Object.getOwnPropertyDescriptor(r, t).enumerable;
        }))), e.forEach(function (t) {
          var e, n, i;e = o, i = r[n = t], n in e ? Object.defineProperty(e, n, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : e[n] = i;
        });
      }return o;
    }p = p && p.hasOwnProperty("default") ? p.default : p;var e = "transitionend";function n(t) {
      var e = this,
          n = !1;return p(this).one(m.TRANSITION_END, function () {
        n = !0;
      }), setTimeout(function () {
        n || m.triggerTransitionEnd(e);
      }, t), this;
    }var m = { TRANSITION_END: "bsTransitionEnd", getUID: function getUID(t) {
        for (; t += ~~(1e6 * Math.random()), document.getElementById(t);) {}return t;
      }, getSelectorFromElement: function getSelectorFromElement(t) {
        var e = t.getAttribute("data-target");if (!e || "#" === e) {
          var n = t.getAttribute("href");e = n && "#" !== n ? n.trim() : "";
        }return e && document.querySelector(e) ? e : null;
      }, getTransitionDurationFromElement: function getTransitionDurationFromElement(t) {
        if (!t) return 0;var e = p(t).css("transition-duration"),
            n = p(t).css("transition-delay"),
            i = parseFloat(e),
            o = parseFloat(n);return i || o ? (e = e.split(",")[0], n = n.split(",")[0], 1e3 * (parseFloat(e) + parseFloat(n))) : 0;
      }, reflow: function reflow(t) {
        return t.offsetHeight;
      }, triggerTransitionEnd: function triggerTransitionEnd(t) {
        p(t).trigger(e);
      }, supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(e);
      }, isElement: function isElement(t) {
        return (t[0] || t).nodeType;
      }, typeCheckConfig: function typeCheckConfig(t, e, n) {
        for (var i in n) {
          if (Object.prototype.hasOwnProperty.call(n, i)) {
            var o = n[i],
                r = e[i],
                s = r && m.isElement(r) ? "element" : (a = r, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if (!new RegExp(o).test(s)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + o + '".');
          }
        }var a;
      }, findShadowRoot: function findShadowRoot(t) {
        if (!document.documentElement.attachShadow) return null;if ("function" != typeof t.getRootNode) return t instanceof ShadowRoot ? t : t.parentNode ? m.findShadowRoot(t.parentNode) : null;var e = t.getRootNode();return e instanceof ShadowRoot ? e : null;
      } };p.fn.emulateTransitionEnd = n, p.event.special[m.TRANSITION_END] = { bindType: e, delegateType: e, handle: function handle(t) {
        if (p(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
      } };var o = "alert",
        r = "bs.alert",
        a = "." + r,
        c = p.fn[o],
        h = { CLOSE: "close" + a, CLOSED: "closed" + a, CLICK_DATA_API: "click" + a + ".data-api" },
        u = "alert",
        f = "fade",
        d = "show",
        g = function () {
      function i(t) {
        this._element = t;
      }var t = i.prototype;return t.close = function (t) {
        var e = this._element;t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
      }, t.dispose = function () {
        p.removeData(this._element, r), this._element = null;
      }, t._getRootElement = function (t) {
        var e = m.getSelectorFromElement(t),
            n = !1;return e && (n = document.querySelector(e)), n || (n = p(t).closest("." + u)[0]), n;
      }, t._triggerCloseEvent = function (t) {
        var e = p.Event(h.CLOSE);return p(t).trigger(e), e;
      }, t._removeElement = function (e) {
        var n = this;if (p(e).removeClass(d), p(e).hasClass(f)) {
          var t = m.getTransitionDurationFromElement(e);p(e).one(m.TRANSITION_END, function (t) {
            return n._destroyElement(e, t);
          }).emulateTransitionEnd(t);
        } else this._destroyElement(e);
      }, t._destroyElement = function (t) {
        p(t).detach().trigger(h.CLOSED).remove();
      }, i._jQueryInterface = function (n) {
        return this.each(function () {
          var t = p(this),
              e = t.data(r);e || (e = new i(this), t.data(r, e)), "close" === n && e[n](this);
        });
      }, i._handleDismiss = function (e) {
        return function (t) {
          t && t.preventDefault(), e.close(this);
        };
      }, s(i, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }]), i;
    }();p(document).on(h.CLICK_DATA_API, '[data-dismiss="alert"]', g._handleDismiss(new g())), p.fn[o] = g._jQueryInterface, p.fn[o].Constructor = g, p.fn[o].noConflict = function () {
      return p.fn[o] = c, g._jQueryInterface;
    };var _ = "button",
        v = "bs.button",
        y = "." + v,
        E = ".data-api",
        b = p.fn[_],
        w = "active",
        T = "btn",
        C = "focus",
        S = '[data-toggle^="button"]',
        D = '[data-toggle="buttons"]',
        I = 'input:not([type="hidden"])',
        A = ".active",
        O = ".btn",
        N = { CLICK_DATA_API: "click" + y + E, FOCUS_BLUR_DATA_API: "focus" + y + E + " blur" + y + E },
        k = function () {
      function n(t) {
        this._element = t;
      }var t = n.prototype;return t.toggle = function () {
        var t = !0,
            e = !0,
            n = p(this._element).closest(D)[0];if (n) {
          var i = this._element.querySelector(I);if (i) {
            if ("radio" === i.type) if (i.checked && this._element.classList.contains(w)) t = !1;else {
              var o = n.querySelector(A);o && p(o).removeClass(w);
            }if (t) {
              if (i.hasAttribute("disabled") || n.hasAttribute("disabled") || i.classList.contains("disabled") || n.classList.contains("disabled")) return;i.checked = !this._element.classList.contains(w), p(i).trigger("change");
            }i.focus(), e = !1;
          }
        }e && this._element.setAttribute("aria-pressed", !this._element.classList.contains(w)), t && p(this._element).toggleClass(w);
      }, t.dispose = function () {
        p.removeData(this._element, v), this._element = null;
      }, n._jQueryInterface = function (e) {
        return this.each(function () {
          var t = p(this).data(v);t || (t = new n(this), p(this).data(v, t)), "toggle" === e && t[e]();
        });
      }, s(n, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }]), n;
    }();p(document).on(N.CLICK_DATA_API, S, function (t) {
      t.preventDefault();var e = t.target;p(e).hasClass(T) || (e = p(e).closest(O)), k._jQueryInterface.call(p(e), "toggle");
    }).on(N.FOCUS_BLUR_DATA_API, S, function (t) {
      var e = p(t.target).closest(O)[0];p(e).toggleClass(C, /^focus(in)?$/.test(t.type));
    }), p.fn[_] = k._jQueryInterface, p.fn[_].Constructor = k, p.fn[_].noConflict = function () {
      return p.fn[_] = b, k._jQueryInterface;
    };var L = "carousel",
        P = "bs.carousel",
        x = "." + P,
        H = ".data-api",
        j = p.fn[L],
        R = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0, touch: !0 },
        F = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean", touch: "boolean" },
        M = "next",
        W = "prev",
        U = "left",
        B = "right",
        q = { SLIDE: "slide" + x, SLID: "slid" + x, KEYDOWN: "keydown" + x, MOUSEENTER: "mouseenter" + x, MOUSELEAVE: "mouseleave" + x, TOUCHSTART: "touchstart" + x, TOUCHMOVE: "touchmove" + x, TOUCHEND: "touchend" + x, POINTERDOWN: "pointerdown" + x, POINTERUP: "pointerup" + x, DRAG_START: "dragstart" + x, LOAD_DATA_API: "load" + x + H, CLICK_DATA_API: "click" + x + H },
        K = "carousel",
        Q = "active",
        Y = "slide",
        V = "carousel-item-right",
        X = "carousel-item-left",
        z = "carousel-item-next",
        G = "carousel-item-prev",
        J = "pointer-event",
        Z = ".active",
        $ = ".active.carousel-item",
        tt = ".carousel-item",
        et = ".carousel-item img",
        nt = ".carousel-item-next, .carousel-item-prev",
        it = ".carousel-indicators",
        ot = "[data-slide], [data-slide-to]",
        rt = '[data-ride="carousel"]',
        st = { TOUCH: "touch", PEN: "pen" },
        at = function () {
      function r(t, e) {
        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._element = t, this._indicatorsElement = this._element.querySelector(it), this._touchSupported = "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners();
      }var t = r.prototype;return t.next = function () {
        this._isSliding || this._slide(M);
      }, t.nextWhenVisible = function () {
        !document.hidden && p(this._element).is(":visible") && "hidden" !== p(this._element).css("visibility") && this.next();
      }, t.prev = function () {
        this._isSliding || this._slide(W);
      }, t.pause = function (t) {
        t || (this._isPaused = !0), this._element.querySelector(nt) && (m.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, t.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, t.to = function (t) {
        var e = this;this._activeElement = this._element.querySelector($);var n = this._getItemIndex(this._activeElement);if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) p(this._element).one(q.SLID, function () {
          return e.to(t);
        });else {
          if (n === t) return this.pause(), void this.cycle();var i = n < t ? M : W;this._slide(i, this._items[t]);
        }
      }, t.dispose = function () {
        p(this._element).off(x), p.removeData(this._element, P), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, t._getConfig = function (t) {
        return t = l({}, R, t), m.typeCheckConfig(L, t, F), t;
      }, t._handleSwipe = function () {
        var t = Math.abs(this.touchDeltaX);if (!(t <= 40)) {
          var e = t / this.touchDeltaX;0 < e && this.prev(), e < 0 && this.next();
        }
      }, t._addEventListeners = function () {
        var e = this;this._config.keyboard && p(this._element).on(q.KEYDOWN, function (t) {
          return e._keydown(t);
        }), "hover" === this._config.pause && p(this._element).on(q.MOUSEENTER, function (t) {
          return e.pause(t);
        }).on(q.MOUSELEAVE, function (t) {
          return e.cycle(t);
        }), this._addTouchEventListeners();
      }, t._addTouchEventListeners = function () {
        var n = this;if (this._touchSupported) {
          var e = function e(t) {
            n._pointerEvent && st[t.originalEvent.pointerType.toUpperCase()] ? n.touchStartX = t.originalEvent.clientX : n._pointerEvent || (n.touchStartX = t.originalEvent.touches[0].clientX);
          },
              i = function i(t) {
            n._pointerEvent && st[t.originalEvent.pointerType.toUpperCase()] && (n.touchDeltaX = t.originalEvent.clientX - n.touchStartX), n._handleSwipe(), "hover" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function (t) {
              return n.cycle(t);
            }, 500 + n._config.interval));
          };p(this._element.querySelectorAll(et)).on(q.DRAG_START, function (t) {
            return t.preventDefault();
          }), this._pointerEvent ? (p(this._element).on(q.POINTERDOWN, function (t) {
            return e(t);
          }), p(this._element).on(q.POINTERUP, function (t) {
            return i(t);
          }), this._element.classList.add(J)) : (p(this._element).on(q.TOUCHSTART, function (t) {
            return e(t);
          }), p(this._element).on(q.TOUCHMOVE, function (t) {
            var e;(e = t).originalEvent.touches && 1 < e.originalEvent.touches.length ? n.touchDeltaX = 0 : n.touchDeltaX = e.originalEvent.touches[0].clientX - n.touchStartX;
          }), p(this._element).on(q.TOUCHEND, function (t) {
            return i(t);
          }));
        }
      }, t._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {case 37:
            t.preventDefault(), this.prev();break;case 39:
            t.preventDefault(), this.next();}
      }, t._getItemIndex = function (t) {
        return this._items = t && t.parentNode ? [].slice.call(t.parentNode.querySelectorAll(tt)) : [], this._items.indexOf(t);
      }, t._getItemByDirection = function (t, e) {
        var n = t === M,
            i = t === W,
            o = this._getItemIndex(e),
            r = this._items.length - 1;if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;var s = (o + (t === W ? -1 : 1)) % this._items.length;return -1 === s ? this._items[this._items.length - 1] : this._items[s];
      }, t._triggerSlideEvent = function (t, e) {
        var n = this._getItemIndex(t),
            i = this._getItemIndex(this._element.querySelector($)),
            o = p.Event(q.SLIDE, { relatedTarget: t, direction: e, from: i, to: n });return p(this._element).trigger(o), o;
      }, t._setActiveIndicatorElement = function (t) {
        if (this._indicatorsElement) {
          var e = [].slice.call(this._indicatorsElement.querySelectorAll(Z));p(e).removeClass(Q);var n = this._indicatorsElement.children[this._getItemIndex(t)];n && p(n).addClass(Q);
        }
      }, t._slide = function (t, e) {
        var n,
            i,
            o,
            r = this,
            s = this._element.querySelector($),
            a = this._getItemIndex(s),
            l = e || s && this._getItemByDirection(t, s),
            c = this._getItemIndex(l),
            h = Boolean(this._interval);if (o = t === M ? (n = X, i = z, U) : (n = V, i = G, B), l && p(l).hasClass(Q)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, o).isDefaultPrevented() && s && l) {
          this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(l);var u = p.Event(q.SLID, { relatedTarget: l, direction: o, from: a, to: c });if (p(this._element).hasClass(Y)) {
            p(l).addClass(i), m.reflow(l), p(s).addClass(n), p(l).addClass(n);var f = parseInt(l.getAttribute("data-interval"), 10);this._config.interval = f ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, f) : this._config.defaultInterval || this._config.interval;var d = m.getTransitionDurationFromElement(s);p(s).one(m.TRANSITION_END, function () {
              p(l).removeClass(n + " " + i).addClass(Q), p(s).removeClass(Q + " " + i + " " + n), r._isSliding = !1, setTimeout(function () {
                return p(r._element).trigger(u);
              }, 0);
            }).emulateTransitionEnd(d);
          } else p(s).removeClass(Q), p(l).addClass(Q), this._isSliding = !1, p(this._element).trigger(u);h && this.cycle();
        }
      }, r._jQueryInterface = function (i) {
        return this.each(function () {
          var t = p(this).data(P),
              e = l({}, R, p(this).data());"object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) && (e = l({}, e, i));var n = "string" == typeof i ? i : e.slide;if (t || (t = new r(this, e), p(this).data(P, t)), "number" == typeof i) t.to(i);else if ("string" == typeof n) {
            if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');t[n]();
          } else e.interval && (t.pause(), t.cycle());
        });
      }, r._dataApiClickHandler = function (t) {
        var e = m.getSelectorFromElement(this);if (e) {
          var n = p(e)[0];if (n && p(n).hasClass(K)) {
            var i = l({}, p(n).data(), p(this).data()),
                o = this.getAttribute("data-slide-to");o && (i.interval = !1), r._jQueryInterface.call(p(n), i), o && p(n).data(P).to(o), t.preventDefault();
          }
        }
      }, s(r, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return R;
        } }]), r;
    }();p(document).on(q.CLICK_DATA_API, ot, at._dataApiClickHandler), p(window).on(q.LOAD_DATA_API, function () {
      for (var t = [].slice.call(document.querySelectorAll(rt)), e = 0, n = t.length; e < n; e++) {
        var i = p(t[e]);at._jQueryInterface.call(i, i.data());
      }
    }), p.fn[L] = at._jQueryInterface, p.fn[L].Constructor = at, p.fn[L].noConflict = function () {
      return p.fn[L] = j, at._jQueryInterface;
    };var lt = "collapse",
        ct = "bs.collapse",
        ht = "." + ct,
        ut = p.fn[lt],
        ft = { toggle: !0, parent: "" },
        dt = { toggle: "boolean", parent: "(string|element)" },
        pt = { SHOW: "show" + ht, SHOWN: "shown" + ht, HIDE: "hide" + ht, HIDDEN: "hidden" + ht, CLICK_DATA_API: "click" + ht + ".data-api" },
        mt = "show",
        gt = "collapse",
        _t = "collapsing",
        vt = "collapsed",
        yt = "width",
        Et = "height",
        bt = ".show, .collapsing",
        wt = '[data-toggle="collapse"]',
        Tt = function () {
      function a(e, t) {
        this._isTransitioning = !1, this._element = e, this._config = this._getConfig(t), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + e.id + '"],[data-toggle="collapse"][data-target="#' + e.id + '"]'));for (var n = [].slice.call(document.querySelectorAll(wt)), i = 0, o = n.length; i < o; i++) {
          var r = n[i],
              s = m.getSelectorFromElement(r),
              a = [].slice.call(document.querySelectorAll(s)).filter(function (t) {
            return t === e;
          });null !== s && 0 < a.length && (this._selector = s, this._triggerArray.push(r));
        }this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
      }var t = a.prototype;return t.toggle = function () {
        p(this._element).hasClass(mt) ? this.hide() : this.show();
      }, t.show = function () {
        var t,
            e,
            n = this;if (!this._isTransitioning && !p(this._element).hasClass(mt) && (this._parent && 0 === (t = [].slice.call(this._parent.querySelectorAll(bt)).filter(function (t) {
          return "string" == typeof n._config.parent ? t.getAttribute("data-parent") === n._config.parent : t.classList.contains(gt);
        })).length && (t = null), !(t && (e = p(t).not(this._selector).data(ct)) && e._isTransitioning))) {
          var i = p.Event(pt.SHOW);if (p(this._element).trigger(i), !i.isDefaultPrevented()) {
            t && (a._jQueryInterface.call(p(t).not(this._selector), "hide"), e || p(t).data(ct, null));var o = this._getDimension();p(this._element).removeClass(gt).addClass(_t), this._element.style[o] = 0, this._triggerArray.length && p(this._triggerArray).removeClass(vt).attr("aria-expanded", !0), this.setTransitioning(!0);var r = "scroll" + (o[0].toUpperCase() + o.slice(1)),
                s = m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END, function () {
              p(n._element).removeClass(_t).addClass(gt).addClass(mt), n._element.style[o] = "", n.setTransitioning(!1), p(n._element).trigger(pt.SHOWN);
            }).emulateTransitionEnd(s), this._element.style[o] = this._element[r] + "px";
          }
        }
      }, t.hide = function () {
        var t = this;if (!this._isTransitioning && p(this._element).hasClass(mt)) {
          var e = p.Event(pt.HIDE);if (p(this._element).trigger(e), !e.isDefaultPrevented()) {
            var n = this._getDimension();this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", m.reflow(this._element), p(this._element).addClass(_t).removeClass(gt).removeClass(mt);var i = this._triggerArray.length;if (0 < i) for (var o = 0; o < i; o++) {
              var r = this._triggerArray[o],
                  s = m.getSelectorFromElement(r);if (null !== s) p([].slice.call(document.querySelectorAll(s))).hasClass(mt) || p(r).addClass(vt).attr("aria-expanded", !1);
            }this.setTransitioning(!0);this._element.style[n] = "";var a = m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END, function () {
              t.setTransitioning(!1), p(t._element).removeClass(_t).addClass(gt).trigger(pt.HIDDEN);
            }).emulateTransitionEnd(a);
          }
        }
      }, t.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, t.dispose = function () {
        p.removeData(this._element, ct), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, t._getConfig = function (t) {
        return (t = l({}, ft, t)).toggle = Boolean(t.toggle), m.typeCheckConfig(lt, t, dt), t;
      }, t._getDimension = function () {
        return p(this._element).hasClass(yt) ? yt : Et;
      }, t._getParent = function () {
        var t,
            n = this;m.isElement(this._config.parent) ? (t = this._config.parent, "undefined" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = document.querySelector(this._config.parent);var e = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
            i = [].slice.call(t.querySelectorAll(e));return p(i).each(function (t, e) {
          n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);
        }), t;
      }, t._addAriaAndCollapsedClass = function (t, e) {
        var n = p(t).hasClass(mt);e.length && p(e).toggleClass(vt, !n).attr("aria-expanded", n);
      }, a._getTargetFromElement = function (t) {
        var e = m.getSelectorFromElement(t);return e ? document.querySelector(e) : null;
      }, a._jQueryInterface = function (i) {
        return this.each(function () {
          var t = p(this),
              e = t.data(ct),
              n = l({}, ft, t.data(), "object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) && i ? i : {});if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(ct, e)), "string" == typeof i) {
            if ("undefined" == typeof e[i]) throw new TypeError('No method named "' + i + '"');e[i]();
          }
        });
      }, s(a, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return ft;
        } }]), a;
    }();p(document).on(pt.CLICK_DATA_API, wt, function (t) {
      "A" === t.currentTarget.tagName && t.preventDefault();var n = p(this),
          e = m.getSelectorFromElement(this),
          i = [].slice.call(document.querySelectorAll(e));p(i).each(function () {
        var t = p(this),
            e = t.data(ct) ? "toggle" : n.data();Tt._jQueryInterface.call(t, e);
      });
    }), p.fn[lt] = Tt._jQueryInterface, p.fn[lt].Constructor = Tt, p.fn[lt].noConflict = function () {
      return p.fn[lt] = ut, Tt._jQueryInterface;
    };for (var Ct = "undefined" != typeof window && "undefined" != typeof document, St = ["Edge", "Trident", "Firefox"], Dt = 0, It = 0; It < St.length; It += 1) {
      if (Ct && 0 <= navigator.userAgent.indexOf(St[It])) {
        Dt = 1;break;
      }
    }var At = Ct && window.Promise ? function (t) {
      var e = !1;return function () {
        e || (e = !0, window.Promise.resolve().then(function () {
          e = !1, t();
        }));
      };
    } : function (t) {
      var e = !1;return function () {
        e || (e = !0, setTimeout(function () {
          e = !1, t();
        }, Dt));
      };
    };function Ot(t) {
      return t && "[object Function]" === {}.toString.call(t);
    }function Nt(t, e) {
      if (1 !== t.nodeType) return [];var n = t.ownerDocument.defaultView.getComputedStyle(t, null);return e ? n[e] : n;
    }function kt(t) {
      return "HTML" === t.nodeName ? t : t.parentNode || t.host;
    }function Lt(t) {
      if (!t) return document.body;switch (t.nodeName) {case "HTML":case "BODY":
          return t.ownerDocument.body;case "#document":
          return t.body;}var e = Nt(t),
          n = e.overflow,
          i = e.overflowX,
          o = e.overflowY;return (/(auto|scroll|overlay)/.test(n + o + i) ? t : Lt(kt(t))
      );
    }var Pt = Ct && !(!window.MSInputMethodContext || !document.documentMode),
        xt = Ct && /MSIE 10/.test(navigator.userAgent);function Ht(t) {
      return 11 === t ? Pt : 10 === t ? xt : Pt || xt;
    }function jt(t) {
      if (!t) return document.documentElement;for (var e = Ht(10) ? document.body : null, n = t.offsetParent || null; n === e && t.nextElementSibling;) {
        n = (t = t.nextElementSibling).offsetParent;
      }var i = n && n.nodeName;return i && "BODY" !== i && "HTML" !== i ? -1 !== ["TH", "TD", "TABLE"].indexOf(n.nodeName) && "static" === Nt(n, "position") ? jt(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;
    }function Rt(t) {
      return null !== t.parentNode ? Rt(t.parentNode) : t;
    }function Ft(t, e) {
      if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
          i = n ? t : e,
          o = n ? e : t,
          r = document.createRange();r.setStart(i, 0), r.setEnd(o, 0);var s,
          a,
          l = r.commonAncestorContainer;if (t !== l && e !== l || i.contains(o)) return "BODY" === (a = (s = l).nodeName) || "HTML" !== a && jt(s.firstElementChild) !== s ? jt(l) : l;var c = Rt(t);return c.host ? Ft(c.host, e) : Ft(t, Rt(e).host);
    }function Mt(t) {
      var e = "top" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "top") ? "scrollTop" : "scrollLeft",
          n = t.nodeName;if ("BODY" !== n && "HTML" !== n) return t[e];var i = t.ownerDocument.documentElement;return (t.ownerDocument.scrollingElement || i)[e];
    }function Wt(t, e) {
      var n = "x" === e ? "Left" : "Top",
          i = "Left" === n ? "Right" : "Bottom";return parseFloat(t["border" + n + "Width"], 10) + parseFloat(t["border" + i + "Width"], 10);
    }function Ut(t, e, n, i) {
      return Math.max(e["offset" + t], e["scroll" + t], n["client" + t], n["offset" + t], n["scroll" + t], Ht(10) ? parseInt(n["offset" + t]) + parseInt(i["margin" + ("Height" === t ? "Top" : "Left")]) + parseInt(i["margin" + ("Height" === t ? "Bottom" : "Right")]) : 0);
    }function Bt(t) {
      var e = t.body,
          n = t.documentElement,
          i = Ht(10) && getComputedStyle(n);return { height: Ut("Height", e, n, i), width: Ut("Width", e, n, i) };
    }var qt = function () {
      function i(t, e) {
        for (var n = 0; n < e.length; n++) {
          var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
        }
      }return function (t, e, n) {
        return e && i(t.prototype, e), n && i(t, n), t;
      };
    }(),
        Kt = function Kt(t, e, n) {
      return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
    },
        Qt = Object.assign || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];for (var i in n) {
          Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
        }
      }return t;
    };function Yt(t) {
      return Qt({}, t, { right: t.left + t.width, bottom: t.top + t.height });
    }function Vt(t) {
      var e = {};try {
        if (Ht(10)) {
          e = t.getBoundingClientRect();var n = Mt(t, "top"),
              i = Mt(t, "left");e.top += n, e.left += i, e.bottom += n, e.right += i;
        } else e = t.getBoundingClientRect();
      } catch (t) {}var o = { left: e.left, top: e.top, width: e.right - e.left, height: e.bottom - e.top },
          r = "HTML" === t.nodeName ? Bt(t.ownerDocument) : {},
          s = r.width || t.clientWidth || o.right - o.left,
          a = r.height || t.clientHeight || o.bottom - o.top,
          l = t.offsetWidth - s,
          c = t.offsetHeight - a;if (l || c) {
        var h = Nt(t);l -= Wt(h, "x"), c -= Wt(h, "y"), o.width -= l, o.height -= c;
      }return Yt(o);
    }function Xt(t, e) {
      var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
          i = Ht(10),
          o = "HTML" === e.nodeName,
          r = Vt(t),
          s = Vt(e),
          a = Lt(t),
          l = Nt(e),
          c = parseFloat(l.borderTopWidth, 10),
          h = parseFloat(l.borderLeftWidth, 10);n && o && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));var u = Yt({ top: r.top - s.top - c, left: r.left - s.left - h, width: r.width, height: r.height });if (u.marginTop = 0, u.marginLeft = 0, !i && o) {
        var f = parseFloat(l.marginTop, 10),
            d = parseFloat(l.marginLeft, 10);u.top -= c - f, u.bottom -= c - f, u.left -= h - d, u.right -= h - d, u.marginTop = f, u.marginLeft = d;
      }return (i && !n ? e.contains(a) : e === a && "BODY" !== a.nodeName) && (u = function (t, e) {
        var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
            i = Mt(e, "top"),
            o = Mt(e, "left"),
            r = n ? -1 : 1;return t.top += i * r, t.bottom += i * r, t.left += o * r, t.right += o * r, t;
      }(u, e)), u;
    }function zt(t) {
      if (!t || !t.parentElement || Ht()) return document.documentElement;for (var e = t.parentElement; e && "none" === Nt(e, "transform");) {
        e = e.parentElement;
      }return e || document.documentElement;
    }function Gt(t, e, n, i) {
      var o = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],
          r = { top: 0, left: 0 },
          s = o ? zt(t) : Ft(t, e);if ("viewport" === i) r = function (t) {
        var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
            n = t.ownerDocument.documentElement,
            i = Xt(t, n),
            o = Math.max(n.clientWidth, window.innerWidth || 0),
            r = Math.max(n.clientHeight, window.innerHeight || 0),
            s = e ? 0 : Mt(n),
            a = e ? 0 : Mt(n, "left");return Yt({ top: s - i.top + i.marginTop, left: a - i.left + i.marginLeft, width: o, height: r });
      }(s, o);else {
        var a = void 0;"scrollParent" === i ? "BODY" === (a = Lt(kt(e))).nodeName && (a = t.ownerDocument.documentElement) : a = "window" === i ? t.ownerDocument.documentElement : i;var l = Xt(a, s, o);if ("HTML" !== a.nodeName || function t(e) {
          var n = e.nodeName;return "BODY" !== n && "HTML" !== n && ("fixed" === Nt(e, "position") || t(kt(e)));
        }(s)) r = l;else {
          var c = Bt(t.ownerDocument),
              h = c.height,
              u = c.width;r.top += l.top - l.marginTop, r.bottom = h + l.top, r.left += l.left - l.marginLeft, r.right = u + l.left;
        }
      }var f = "number" == typeof (n = n || 0);return r.left += f ? n : n.left || 0, r.top += f ? n : n.top || 0, r.right -= f ? n : n.right || 0, r.bottom -= f ? n : n.bottom || 0, r;
    }function Jt(t, e, i, n, o) {
      var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;if (-1 === t.indexOf("auto")) return t;var s = Gt(i, n, r, o),
          a = { top: { width: s.width, height: e.top - s.top }, right: { width: s.right - e.right, height: s.height }, bottom: { width: s.width, height: s.bottom - e.bottom }, left: { width: e.left - s.left, height: s.height } },
          l = Object.keys(a).map(function (t) {
        return Qt({ key: t }, a[t], { area: (e = a[t], e.width * e.height) });var e;
      }).sort(function (t, e) {
        return e.area - t.area;
      }),
          c = l.filter(function (t) {
        var e = t.width,
            n = t.height;return e >= i.clientWidth && n >= i.clientHeight;
      }),
          h = 0 < c.length ? c[0].key : l[0].key,
          u = t.split("-")[1];return h + (u ? "-" + u : "");
    }function Zt(t, e, n) {
      var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;return Xt(n, i ? zt(e) : Ft(e, n), i);
    }function $t(t) {
      var e = t.ownerDocument.defaultView.getComputedStyle(t),
          n = parseFloat(e.marginTop || 0) + parseFloat(e.marginBottom || 0),
          i = parseFloat(e.marginLeft || 0) + parseFloat(e.marginRight || 0);return { width: t.offsetWidth + i, height: t.offsetHeight + n };
    }function te(t) {
      var e = { left: "right", right: "left", bottom: "top", top: "bottom" };return t.replace(/left|right|bottom|top/g, function (t) {
        return e[t];
      });
    }function ee(t, e, n) {
      n = n.split("-")[0];var i = $t(t),
          o = { width: i.width, height: i.height },
          r = -1 !== ["right", "left"].indexOf(n),
          s = r ? "top" : "left",
          a = r ? "left" : "top",
          l = r ? "height" : "width",
          c = r ? "width" : "height";return o[s] = e[s] + e[l] / 2 - i[l] / 2, o[a] = n === a ? e[a] - i[c] : e[te(a)], o;
    }function ne(t, e) {
      return Array.prototype.find ? t.find(e) : t.filter(e)[0];
    }function ie(t, n, e) {
      return (void 0 === e ? t : t.slice(0, function (t, e, n) {
        if (Array.prototype.findIndex) return t.findIndex(function (t) {
          return t[e] === n;
        });var i = ne(t, function (t) {
          return t[e] === n;
        });return t.indexOf(i);
      }(t, "name", e))).forEach(function (t) {
        t.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e = t.function || t.fn;t.enabled && Ot(e) && (n.offsets.popper = Yt(n.offsets.popper), n.offsets.reference = Yt(n.offsets.reference), n = e(n, t));
      }), n;
    }function oe(t, n) {
      return t.some(function (t) {
        var e = t.name;return t.enabled && e === n;
      });
    }function re(t) {
      for (var e = [!1, "ms", "Webkit", "Moz", "O"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {
        var o = e[i],
            r = o ? "" + o + n : t;if ("undefined" != typeof document.body.style[r]) return r;
      }return null;
    }function se(t) {
      var e = t.ownerDocument;return e ? e.defaultView : window;
    }function ae(t, e, n, i) {
      n.updateBound = i, se(t).addEventListener("resize", n.updateBound, { passive: !0 });var o = Lt(t);return function t(e, n, i, o) {
        var r = "BODY" === e.nodeName,
            s = r ? e.ownerDocument.defaultView : e;s.addEventListener(n, i, { passive: !0 }), r || t(Lt(s.parentNode), n, i, o), o.push(s);
      }(o, "scroll", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n;
    }function le() {
      var t, e;this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, se(t).removeEventListener("resize", e.updateBound), e.scrollParents.forEach(function (t) {
        t.removeEventListener("scroll", e.updateBound);
      }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));
    }function ce(t) {
      return "" !== t && !isNaN(parseFloat(t)) && isFinite(t);
    }function he(n, i) {
      Object.keys(i).forEach(function (t) {
        var e = "";-1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(t) && ce(i[t]) && (e = "px"), n.style[t] = i[t] + e;
      });
    }var ue = Ct && /Firefox/i.test(navigator.userAgent);function fe(t, e, n) {
      var i = ne(t, function (t) {
        return t.name === e;
      }),
          o = !!i && t.some(function (t) {
        return t.name === n && t.enabled && t.order < i.order;
      });if (!o) {
        var r = "`" + e + "`",
            s = "`" + n + "`";console.warn(s + " modifier is required by " + r + " modifier in order to work, be sure to include it before " + r + "!");
      }return o;
    }var de = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
        pe = de.slice(3);function me(t) {
      var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          n = pe.indexOf(t),
          i = pe.slice(n + 1).concat(pe.slice(0, n));return e ? i.reverse() : i;
    }var ge = "flip",
        _e = "clockwise",
        ve = "counterclockwise";function ye(t, o, r, e) {
      var s = [0, 0],
          a = -1 !== ["right", "left"].indexOf(e),
          n = t.split(/(\+|\-)/).map(function (t) {
        return t.trim();
      }),
          i = n.indexOf(ne(n, function (t) {
        return -1 !== t.search(/,|\s/);
      }));n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l = /\s*,\s*|\s+/,
          c = -1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n];return (c = c.map(function (t, e) {
        var n = (1 === e ? !a : a) ? "height" : "width",
            i = !1;return t.reduce(function (t, e) {
          return "" === t[t.length - 1] && -1 !== ["+", "-"].indexOf(e) ? (t[t.length - 1] = e, i = !0, t) : i ? (t[t.length - 1] += e, i = !1, t) : t.concat(e);
        }, []).map(function (t) {
          return function (t, e, n, i) {
            var o = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
                r = +o[1],
                s = o[2];if (!r) return t;if (0 !== s.indexOf("%")) return "vh" !== s && "vw" !== s ? r : ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * r;var a = void 0;switch (s) {case "%p":
                a = n;break;case "%":case "%r":default:
                a = i;}return Yt(a)[e] / 100 * r;
          }(t, n, o, r);
        });
      })).forEach(function (n, i) {
        n.forEach(function (t, e) {
          ce(t) && (s[i] += t * ("-" === n[e - 1] ? -1 : 1));
        });
      }), s;
    }var Ee = { placement: "bottom", positionFixed: !1, eventsEnabled: !0, removeOnDestroy: !1, onCreate: function onCreate() {}, onUpdate: function onUpdate() {}, modifiers: { shift: { order: 100, enabled: !0, fn: function fn(t) {
            var e = t.placement,
                n = e.split("-")[0],
                i = e.split("-")[1];if (i) {
              var o = t.offsets,
                  r = o.reference,
                  s = o.popper,
                  a = -1 !== ["bottom", "top"].indexOf(n),
                  l = a ? "left" : "top",
                  c = a ? "width" : "height",
                  h = { start: Kt({}, l, r[l]), end: Kt({}, l, r[l] + r[c] - s[c]) };t.offsets.popper = Qt({}, s, h[i]);
            }return t;
          } }, offset: { order: 200, enabled: !0, fn: function fn(t, e) {
            var n = e.offset,
                i = t.placement,
                o = t.offsets,
                r = o.popper,
                s = o.reference,
                a = i.split("-")[0],
                l = void 0;return l = ce(+n) ? [+n, 0] : ye(n, r, s, a), "left" === a ? (r.top += l[0], r.left -= l[1]) : "right" === a ? (r.top += l[0], r.left += l[1]) : "top" === a ? (r.left += l[0], r.top -= l[1]) : "bottom" === a && (r.left += l[0], r.top += l[1]), t.popper = r, t;
          }, offset: 0 }, preventOverflow: { order: 300, enabled: !0, fn: function fn(t, i) {
            var e = i.boundariesElement || jt(t.instance.popper);t.instance.reference === e && (e = jt(e));var n = re("transform"),
                o = t.instance.popper.style,
                r = o.top,
                s = o.left,
                a = o[n];o.top = "", o.left = "", o[n] = "";var l = Gt(t.instance.popper, t.instance.reference, i.padding, e, t.positionFixed);o.top = r, o.left = s, o[n] = a, i.boundaries = l;var c = i.priority,
                h = t.offsets.popper,
                u = { primary: function primary(t) {
                var e = h[t];return h[t] < l[t] && !i.escapeWithReference && (e = Math.max(h[t], l[t])), Kt({}, t, e);
              }, secondary: function secondary(t) {
                var e = "right" === t ? "left" : "top",
                    n = h[e];return h[t] > l[t] && !i.escapeWithReference && (n = Math.min(h[e], l[t] - ("right" === t ? h.width : h.height))), Kt({}, e, n);
              } };return c.forEach(function (t) {
              var e = -1 !== ["left", "top"].indexOf(t) ? "primary" : "secondary";h = Qt({}, h, u[e](t));
            }), t.offsets.popper = h, t;
          }, priority: ["left", "right", "top", "bottom"], padding: 5, boundariesElement: "scrollParent" }, keepTogether: { order: 400, enabled: !0, fn: function fn(t) {
            var e = t.offsets,
                n = e.popper,
                i = e.reference,
                o = t.placement.split("-")[0],
                r = Math.floor,
                s = -1 !== ["top", "bottom"].indexOf(o),
                a = s ? "right" : "bottom",
                l = s ? "left" : "top",
                c = s ? "width" : "height";return n[a] < r(i[l]) && (t.offsets.popper[l] = r(i[l]) - n[c]), n[l] > r(i[a]) && (t.offsets.popper[l] = r(i[a])), t;
          } }, arrow: { order: 500, enabled: !0, fn: function fn(t, e) {
            var n;if (!fe(t.instance.modifiers, "arrow", "keepTogether")) return t;var i = e.element;if ("string" == typeof i) {
              if (!(i = t.instance.popper.querySelector(i))) return t;
            } else if (!t.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), t;var o = t.placement.split("-")[0],
                r = t.offsets,
                s = r.popper,
                a = r.reference,
                l = -1 !== ["left", "right"].indexOf(o),
                c = l ? "height" : "width",
                h = l ? "Top" : "Left",
                u = h.toLowerCase(),
                f = l ? "left" : "top",
                d = l ? "bottom" : "right",
                p = $t(i)[c];a[d] - p < s[u] && (t.offsets.popper[u] -= s[u] - (a[d] - p)), a[u] + p > s[d] && (t.offsets.popper[u] += a[u] + p - s[d]), t.offsets.popper = Yt(t.offsets.popper);var m = a[u] + a[c] / 2 - p / 2,
                g = Nt(t.instance.popper),
                _ = parseFloat(g["margin" + h], 10),
                v = parseFloat(g["border" + h + "Width"], 10),
                y = m - t.offsets.popper[u] - _ - v;return y = Math.max(Math.min(s[c] - p, y), 0), t.arrowElement = i, t.offsets.arrow = (Kt(n = {}, u, Math.round(y)), Kt(n, f, ""), n), t;
          }, element: "[x-arrow]" }, flip: { order: 600, enabled: !0, fn: function fn(p, m) {
            if (oe(p.instance.modifiers, "inner")) return p;if (p.flipped && p.placement === p.originalPlacement) return p;var g = Gt(p.instance.popper, p.instance.reference, m.padding, m.boundariesElement, p.positionFixed),
                _ = p.placement.split("-")[0],
                v = te(_),
                y = p.placement.split("-")[1] || "",
                E = [];switch (m.behavior) {case ge:
                E = [_, v];break;case _e:
                E = me(_);break;case ve:
                E = me(_, !0);break;default:
                E = m.behavior;}return E.forEach(function (t, e) {
              if (_ !== t || E.length === e + 1) return p;_ = p.placement.split("-")[0], v = te(_);var n,
                  i = p.offsets.popper,
                  o = p.offsets.reference,
                  r = Math.floor,
                  s = "left" === _ && r(i.right) > r(o.left) || "right" === _ && r(i.left) < r(o.right) || "top" === _ && r(i.bottom) > r(o.top) || "bottom" === _ && r(i.top) < r(o.bottom),
                  a = r(i.left) < r(g.left),
                  l = r(i.right) > r(g.right),
                  c = r(i.top) < r(g.top),
                  h = r(i.bottom) > r(g.bottom),
                  u = "left" === _ && a || "right" === _ && l || "top" === _ && c || "bottom" === _ && h,
                  f = -1 !== ["top", "bottom"].indexOf(_),
                  d = !!m.flipVariations && (f && "start" === y && a || f && "end" === y && l || !f && "start" === y && c || !f && "end" === y && h);(s || u || d) && (p.flipped = !0, (s || u) && (_ = E[e + 1]), d && (y = "end" === (n = y) ? "start" : "start" === n ? "end" : n), p.placement = _ + (y ? "-" + y : ""), p.offsets.popper = Qt({}, p.offsets.popper, ee(p.instance.popper, p.offsets.reference, p.placement)), p = ie(p.instance.modifiers, p, "flip"));
            }), p;
          }, behavior: "flip", padding: 5, boundariesElement: "viewport" }, inner: { order: 700, enabled: !1, fn: function fn(t) {
            var e = t.placement,
                n = e.split("-")[0],
                i = t.offsets,
                o = i.popper,
                r = i.reference,
                s = -1 !== ["left", "right"].indexOf(n),
                a = -1 === ["top", "left"].indexOf(n);return o[s ? "left" : "top"] = r[n] - (a ? o[s ? "width" : "height"] : 0), t.placement = te(e), t.offsets.popper = Yt(o), t;
          } }, hide: { order: 800, enabled: !0, fn: function fn(t) {
            if (!fe(t.instance.modifiers, "hide", "preventOverflow")) return t;var e = t.offsets.reference,
                n = ne(t.instance.modifiers, function (t) {
              return "preventOverflow" === t.name;
            }).boundaries;if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {
              if (!0 === t.hide) return t;t.hide = !0, t.attributes["x-out-of-boundaries"] = "";
            } else {
              if (!1 === t.hide) return t;t.hide = !1, t.attributes["x-out-of-boundaries"] = !1;
            }return t;
          } }, computeStyle: { order: 850, enabled: !0, fn: function fn(t, e) {
            var n = e.x,
                i = e.y,
                o = t.offsets.popper,
                r = ne(t.instance.modifiers, function (t) {
              return "applyStyle" === t.name;
            }).gpuAcceleration;void 0 !== r && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,
                a,
                l,
                c,
                h,
                u,
                f,
                d,
                p,
                m,
                g,
                _,
                v = void 0 !== r ? r : e.gpuAcceleration,
                y = jt(t.instance.popper),
                E = Vt(y),
                b = { position: o.position },
                w = (s = t, a = window.devicePixelRatio < 2 || !ue, l = s.offsets, c = l.popper, h = l.reference, u = -1 !== ["left", "right"].indexOf(s.placement), f = -1 !== s.placement.indexOf("-"), d = h.width % 2 == c.width % 2, p = h.width % 2 == 1 && c.width % 2 == 1, m = function m(t) {
              return t;
            }, g = a ? u || f || d ? Math.round : Math.floor : m, _ = a ? Math.round : m, { left: g(p && !f && a ? c.left - 1 : c.left), top: _(c.top), bottom: _(c.bottom), right: g(c.right) }),
                T = "bottom" === n ? "top" : "bottom",
                C = "right" === i ? "left" : "right",
                S = re("transform"),
                D = void 0,
                I = void 0;if (I = "bottom" === T ? "HTML" === y.nodeName ? -y.clientHeight + w.bottom : -E.height + w.bottom : w.top, D = "right" === C ? "HTML" === y.nodeName ? -y.clientWidth + w.right : -E.width + w.right : w.left, v && S) b[S] = "translate3d(" + D + "px, " + I + "px, 0)", b[T] = 0, b[C] = 0, b.willChange = "transform";else {
              var A = "bottom" === T ? -1 : 1,
                  O = "right" === C ? -1 : 1;b[T] = I * A, b[C] = D * O, b.willChange = T + ", " + C;
            }var N = { "x-placement": t.placement };return t.attributes = Qt({}, N, t.attributes), t.styles = Qt({}, b, t.styles), t.arrowStyles = Qt({}, t.offsets.arrow, t.arrowStyles), t;
          }, gpuAcceleration: !0, x: "bottom", y: "right" }, applyStyle: { order: 900, enabled: !0, fn: function fn(t) {
            var e, n;return he(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach(function (t) {
              !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);
            }), t.arrowElement && Object.keys(t.arrowStyles).length && he(t.arrowElement, t.arrowStyles), t;
          }, onLoad: function onLoad(t, e, n, i, o) {
            var r = Zt(o, e, t, n.positionFixed),
                s = Jt(n.placement, r, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);return e.setAttribute("x-placement", s), he(e, { position: n.positionFixed ? "fixed" : "absolute" }), n;
          }, gpuAcceleration: void 0 } } },
        be = function () {
      function r(t, e) {
        var n = this,
            i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};!function (t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, r), this.scheduleUpdate = function () {
          return requestAnimationFrame(n.update);
        }, this.update = At(this.update.bind(this)), this.options = Qt({}, r.Defaults, i), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = t && t.jquery ? t[0] : t, this.popper = e && e.jquery ? e[0] : e, this.options.modifiers = {}, Object.keys(Qt({}, r.Defaults.modifiers, i.modifiers)).forEach(function (t) {
          n.options.modifiers[t] = Qt({}, r.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});
        }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {
          return Qt({ name: t }, n.options.modifiers[t]);
        }).sort(function (t, e) {
          return t.order - e.order;
        }), this.modifiers.forEach(function (t) {
          t.enabled && Ot(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);
        }), this.update();var o = this.options.eventsEnabled;o && this.enableEventListeners(), this.state.eventsEnabled = o;
      }return qt(r, [{ key: "update", value: function value() {
          return function () {
            if (!this.state.isDestroyed) {
              var t = { instance: this, styles: {}, arrowStyles: {}, attributes: {}, flipped: !1, offsets: {} };t.offsets.reference = Zt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = Jt(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = ee(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", t = ie(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));
            }
          }.call(this);
        } }, { key: "destroy", value: function value() {
          return function () {
            return this.state.isDestroyed = !0, oe(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[re("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
          }.call(this);
        } }, { key: "enableEventListeners", value: function value() {
          return function () {
            this.state.eventsEnabled || (this.state = ae(this.reference, this.options, this.state, this.scheduleUpdate));
          }.call(this);
        } }, { key: "disableEventListeners", value: function value() {
          return le.call(this);
        } }]), r;
    }();be.Utils = ("undefined" != typeof window ? window : global).PopperUtils, be.placements = de, be.Defaults = Ee;var we = "dropdown",
        Te = "bs.dropdown",
        Ce = "." + Te,
        Se = ".data-api",
        De = p.fn[we],
        Ie = new RegExp("38|40|27"),
        Ae = { HIDE: "hide" + Ce, HIDDEN: "hidden" + Ce, SHOW: "show" + Ce, SHOWN: "shown" + Ce, CLICK: "click" + Ce, CLICK_DATA_API: "click" + Ce + Se, KEYDOWN_DATA_API: "keydown" + Ce + Se, KEYUP_DATA_API: "keyup" + Ce + Se },
        Oe = "disabled",
        Ne = "show",
        ke = "dropup",
        Le = "dropright",
        Pe = "dropleft",
        xe = "dropdown-menu-right",
        He = "position-static",
        je = '[data-toggle="dropdown"]',
        Re = ".dropdown form",
        Fe = ".dropdown-menu",
        Me = ".navbar-nav",
        We = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
        Ue = "top-start",
        Be = "top-end",
        qe = "bottom-start",
        Ke = "bottom-end",
        Qe = "right-start",
        Ye = "left-start",
        Ve = { offset: 0, flip: !0, boundary: "scrollParent", reference: "toggle", display: "dynamic" },
        Xe = { offset: "(number|string|function)", flip: "boolean", boundary: "(string|element)", reference: "(string|element)", display: "string" },
        ze = function () {
      function c(t, e) {
        this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
      }var t = c.prototype;return t.toggle = function () {
        if (!this._element.disabled && !p(this._element).hasClass(Oe)) {
          var t = c._getParentFromElement(this._element),
              e = p(this._menu).hasClass(Ne);if (c._clearMenus(), !e) {
            var n = { relatedTarget: this._element },
                i = p.Event(Ae.SHOW, n);if (p(t).trigger(i), !i.isDefaultPrevented()) {
              if (!this._inNavbar) {
                if ("undefined" == typeof be) throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var o = this._element;"parent" === this._config.reference ? o = t : m.isElement(this._config.reference) && (o = this._config.reference, "undefined" != typeof this._config.reference.jquery && (o = this._config.reference[0])), "scrollParent" !== this._config.boundary && p(t).addClass(He), this._popper = new be(o, this._menu, this._getPopperConfig());
              }"ontouchstart" in document.documentElement && 0 === p(t).closest(Me).length && p(document.body).children().on("mouseover", null, p.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), p(this._menu).toggleClass(Ne), p(t).toggleClass(Ne).trigger(p.Event(Ae.SHOWN, n));
            }
          }
        }
      }, t.show = function () {
        if (!(this._element.disabled || p(this._element).hasClass(Oe) || p(this._menu).hasClass(Ne))) {
          var t = { relatedTarget: this._element },
              e = p.Event(Ae.SHOW, t),
              n = c._getParentFromElement(this._element);p(n).trigger(e), e.isDefaultPrevented() || (p(this._menu).toggleClass(Ne), p(n).toggleClass(Ne).trigger(p.Event(Ae.SHOWN, t)));
        }
      }, t.hide = function () {
        if (!this._element.disabled && !p(this._element).hasClass(Oe) && p(this._menu).hasClass(Ne)) {
          var t = { relatedTarget: this._element },
              e = p.Event(Ae.HIDE, t),
              n = c._getParentFromElement(this._element);p(n).trigger(e), e.isDefaultPrevented() || (p(this._menu).toggleClass(Ne), p(n).toggleClass(Ne).trigger(p.Event(Ae.HIDDEN, t)));
        }
      }, t.dispose = function () {
        p.removeData(this._element, Te), p(this._element).off(Ce), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
      }, t.update = function () {
        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
      }, t._addEventListeners = function () {
        var e = this;p(this._element).on(Ae.CLICK, function (t) {
          t.preventDefault(), t.stopPropagation(), e.toggle();
        });
      }, t._getConfig = function (t) {
        return t = l({}, this.constructor.Default, p(this._element).data(), t), m.typeCheckConfig(we, t, this.constructor.DefaultType), t;
      }, t._getMenuElement = function () {
        if (!this._menu) {
          var t = c._getParentFromElement(this._element);t && (this._menu = t.querySelector(Fe));
        }return this._menu;
      }, t._getPlacement = function () {
        var t = p(this._element.parentNode),
            e = qe;return t.hasClass(ke) ? (e = Ue, p(this._menu).hasClass(xe) && (e = Be)) : t.hasClass(Le) ? e = Qe : t.hasClass(Pe) ? e = Ye : p(this._menu).hasClass(xe) && (e = Ke), e;
      }, t._detectNavbar = function () {
        return 0 < p(this._element).closest(".navbar").length;
      }, t._getPopperConfig = function () {
        var e = this,
            t = {};"function" == typeof this._config.offset ? t.fn = function (t) {
          return t.offsets = l({}, t.offsets, e._config.offset(t.offsets) || {}), t;
        } : t.offset = this._config.offset;var n = { placement: this._getPlacement(), modifiers: { offset: t, flip: { enabled: this._config.flip }, preventOverflow: { boundariesElement: this._config.boundary } } };return "static" === this._config.display && (n.modifiers.applyStyle = { enabled: !1 }), n;
      }, c._jQueryInterface = function (e) {
        return this.each(function () {
          var t = p(this).data(Te);if (t || (t = new c(this, "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? e : null), p(this).data(Te, t)), "string" == typeof e) {
            if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');t[e]();
          }
        });
      }, c._clearMenus = function (t) {
        if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var e = [].slice.call(document.querySelectorAll(je)), n = 0, i = e.length; n < i; n++) {
          var o = c._getParentFromElement(e[n]),
              r = p(e[n]).data(Te),
              s = { relatedTarget: e[n] };if (t && "click" === t.type && (s.clickEvent = t), r) {
            var a = r._menu;if (p(o).hasClass(Ne) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && p.contains(o, t.target))) {
              var l = p.Event(Ae.HIDE, s);p(o).trigger(l), l.isDefaultPrevented() || ("ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), e[n].setAttribute("aria-expanded", "false"), p(a).removeClass(Ne), p(o).removeClass(Ne).trigger(p.Event(Ae.HIDDEN, s)));
            }
          }
        }
      }, c._getParentFromElement = function (t) {
        var e,
            n = m.getSelectorFromElement(t);return n && (e = document.querySelector(n)), e || t.parentNode;
      }, c._dataApiKeydownHandler = function (t) {
        if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || p(t.target).closest(Fe).length)) : Ie.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !p(this).hasClass(Oe))) {
          var e = c._getParentFromElement(this),
              n = p(e).hasClass(Ne);if (n && (!n || 27 !== t.which && 32 !== t.which)) {
            var i = [].slice.call(e.querySelectorAll(We));if (0 !== i.length) {
              var o = i.indexOf(t.target);38 === t.which && 0 < o && o--, 40 === t.which && o < i.length - 1 && o++, o < 0 && (o = 0), i[o].focus();
            }
          } else {
            if (27 === t.which) {
              var r = e.querySelector(je);p(r).trigger("focus");
            }p(this).trigger("click");
          }
        }
      }, s(c, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return Ve;
        } }, { key: "DefaultType", get: function get() {
          return Xe;
        } }]), c;
    }();p(document).on(Ae.KEYDOWN_DATA_API, je, ze._dataApiKeydownHandler).on(Ae.KEYDOWN_DATA_API, Fe, ze._dataApiKeydownHandler).on(Ae.CLICK_DATA_API + " " + Ae.KEYUP_DATA_API, ze._clearMenus).on(Ae.CLICK_DATA_API, je, function (t) {
      t.preventDefault(), t.stopPropagation(), ze._jQueryInterface.call(p(this), "toggle");
    }).on(Ae.CLICK_DATA_API, Re, function (t) {
      t.stopPropagation();
    }), p.fn[we] = ze._jQueryInterface, p.fn[we].Constructor = ze, p.fn[we].noConflict = function () {
      return p.fn[we] = De, ze._jQueryInterface;
    };var Ge = "modal",
        Je = "bs.modal",
        Ze = "." + Je,
        $e = p.fn[Ge],
        tn = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
        en = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
        nn = { HIDE: "hide" + Ze, HIDDEN: "hidden" + Ze, SHOW: "show" + Ze, SHOWN: "shown" + Ze, FOCUSIN: "focusin" + Ze, RESIZE: "resize" + Ze, CLICK_DISMISS: "click.dismiss" + Ze, KEYDOWN_DISMISS: "keydown.dismiss" + Ze, MOUSEUP_DISMISS: "mouseup.dismiss" + Ze, MOUSEDOWN_DISMISS: "mousedown.dismiss" + Ze, CLICK_DATA_API: "click" + Ze + ".data-api" },
        on = "modal-scrollbar-measure",
        rn = "modal-backdrop",
        sn = "modal-open",
        an = "fade",
        ln = "show",
        cn = ".modal-dialog",
        hn = '[data-toggle="modal"]',
        un = '[data-dismiss="modal"]',
        fn = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        dn = ".sticky-top",
        pn = function () {
      function o(t, e) {
        this._config = this._getConfig(e), this._element = t, this._dialog = t.querySelector(cn), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0;
      }var t = o.prototype;return t.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, t.show = function (t) {
        var e = this;if (!this._isShown && !this._isTransitioning) {
          p(this._element).hasClass(an) && (this._isTransitioning = !0);var n = p.Event(nn.SHOW, { relatedTarget: t });p(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), p(this._element).on(nn.CLICK_DISMISS, un, function (t) {
            return e.hide(t);
          }), p(this._dialog).on(nn.MOUSEDOWN_DISMISS, function () {
            p(e._element).one(nn.MOUSEUP_DISMISS, function (t) {
              p(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return e._showElement(t);
          }));
        }
      }, t.hide = function (t) {
        var e = this;if (t && t.preventDefault(), this._isShown && !this._isTransitioning) {
          var n = p.Event(nn.HIDE);if (p(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
            this._isShown = !1;var i = p(this._element).hasClass(an);if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), p(document).off(nn.FOCUSIN), p(this._element).removeClass(ln), p(this._element).off(nn.CLICK_DISMISS), p(this._dialog).off(nn.MOUSEDOWN_DISMISS), i) {
              var o = m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END, function (t) {
                return e._hideModal(t);
              }).emulateTransitionEnd(o);
            } else this._hideModal();
          }
        }
      }, t.dispose = function () {
        [window, this._element, this._dialog].forEach(function (t) {
          return p(t).off(Ze);
        }), p(document).off(nn.FOCUSIN), p.removeData(this._element, Je), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null;
      }, t.handleUpdate = function () {
        this._adjustDialog();
      }, t._getConfig = function (t) {
        return t = l({}, tn, t), m.typeCheckConfig(Ge, t, en), t;
      }, t._showElement = function (t) {
        var e = this,
            n = p(this._element).hasClass(an);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), this._element.scrollTop = 0, n && m.reflow(this._element), p(this._element).addClass(ln), this._config.focus && this._enforceFocus();var i = p.Event(nn.SHOWN, { relatedTarget: t }),
            o = function o() {
          e._config.focus && e._element.focus(), e._isTransitioning = !1, p(e._element).trigger(i);
        };if (n) {
          var r = m.getTransitionDurationFromElement(this._dialog);p(this._dialog).one(m.TRANSITION_END, o).emulateTransitionEnd(r);
        } else o();
      }, t._enforceFocus = function () {
        var e = this;p(document).off(nn.FOCUSIN).on(nn.FOCUSIN, function (t) {
          document !== t.target && e._element !== t.target && 0 === p(e._element).has(t.target).length && e._element.focus();
        });
      }, t._setEscapeEvent = function () {
        var e = this;this._isShown && this._config.keyboard ? p(this._element).on(nn.KEYDOWN_DISMISS, function (t) {
          27 === t.which && (t.preventDefault(), e.hide());
        }) : this._isShown || p(this._element).off(nn.KEYDOWN_DISMISS);
      }, t._setResizeEvent = function () {
        var e = this;this._isShown ? p(window).on(nn.RESIZE, function (t) {
          return e.handleUpdate(t);
        }) : p(window).off(nn.RESIZE);
      }, t._hideModal = function () {
        var t = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._isTransitioning = !1, this._showBackdrop(function () {
          p(document.body).removeClass(sn), t._resetAdjustments(), t._resetScrollbar(), p(t._element).trigger(nn.HIDDEN);
        });
      }, t._removeBackdrop = function () {
        this._backdrop && (p(this._backdrop).remove(), this._backdrop = null);
      }, t._showBackdrop = function (t) {
        var e = this,
            n = p(this._element).hasClass(an) ? an : "";if (this._isShown && this._config.backdrop) {
          if (this._backdrop = document.createElement("div"), this._backdrop.className = rn, n && this._backdrop.classList.add(n), p(this._backdrop).appendTo(document.body), p(this._element).on(nn.CLICK_DISMISS, function (t) {
            e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
          }), n && m.reflow(this._backdrop), p(this._backdrop).addClass(ln), !t) return;if (!n) return void t();var i = m.getTransitionDurationFromElement(this._backdrop);p(this._backdrop).one(m.TRANSITION_END, t).emulateTransitionEnd(i);
        } else if (!this._isShown && this._backdrop) {
          p(this._backdrop).removeClass(ln);var o = function o() {
            e._removeBackdrop(), t && t();
          };if (p(this._element).hasClass(an)) {
            var r = m.getTransitionDurationFromElement(this._backdrop);p(this._backdrop).one(m.TRANSITION_END, o).emulateTransitionEnd(r);
          } else o();
        } else t && t();
      }, t._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, t._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, t._checkScrollbar = function () {
        var t = document.body.getBoundingClientRect();this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, t._setScrollbar = function () {
        var o = this;if (this._isBodyOverflowing) {
          var t = [].slice.call(document.querySelectorAll(fn)),
              e = [].slice.call(document.querySelectorAll(dn));p(t).each(function (t, e) {
            var n = e.style.paddingRight,
                i = p(e).css("padding-right");p(e).data("padding-right", n).css("padding-right", parseFloat(i) + o._scrollbarWidth + "px");
          }), p(e).each(function (t, e) {
            var n = e.style.marginRight,
                i = p(e).css("margin-right");p(e).data("margin-right", n).css("margin-right", parseFloat(i) - o._scrollbarWidth + "px");
          });var n = document.body.style.paddingRight,
              i = p(document.body).css("padding-right");p(document.body).data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
        }p(document.body).addClass(sn);
      }, t._resetScrollbar = function () {
        var t = [].slice.call(document.querySelectorAll(fn));p(t).each(function (t, e) {
          var n = p(e).data("padding-right");p(e).removeData("padding-right"), e.style.paddingRight = n || "";
        });var e = [].slice.call(document.querySelectorAll("" + dn));p(e).each(function (t, e) {
          var n = p(e).data("margin-right");"undefined" != typeof n && p(e).css("margin-right", n).removeData("margin-right");
        });var n = p(document.body).data("padding-right");p(document.body).removeData("padding-right"), document.body.style.paddingRight = n || "";
      }, t._getScrollbarWidth = function () {
        var t = document.createElement("div");t.className = on, document.body.appendChild(t);var e = t.getBoundingClientRect().width - t.clientWidth;return document.body.removeChild(t), e;
      }, o._jQueryInterface = function (n, i) {
        return this.each(function () {
          var t = p(this).data(Je),
              e = l({}, tn, p(this).data(), "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n ? n : {});if (t || (t = new o(this, e), p(this).data(Je, t)), "string" == typeof n) {
            if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');t[n](i);
          } else e.show && t.show(i);
        });
      }, s(o, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return tn;
        } }]), o;
    }();p(document).on(nn.CLICK_DATA_API, hn, function (t) {
      var e,
          n = this,
          i = m.getSelectorFromElement(this);i && (e = document.querySelector(i));var o = p(e).data(Je) ? "toggle" : l({}, p(e).data(), p(this).data());"A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();var r = p(e).one(nn.SHOW, function (t) {
        t.isDefaultPrevented() || r.one(nn.HIDDEN, function () {
          p(n).is(":visible") && n.focus();
        });
      });pn._jQueryInterface.call(p(e), o, this);
    }), p.fn[Ge] = pn._jQueryInterface, p.fn[Ge].Constructor = pn, p.fn[Ge].noConflict = function () {
      return p.fn[Ge] = $e, pn._jQueryInterface;
    };var mn = "tooltip",
        gn = "bs.tooltip",
        _n = "." + gn,
        vn = p.fn[mn],
        yn = "bs-tooltip",
        En = new RegExp("(^|\\s)" + yn + "\\S+", "g"),
        bn = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(number|string)", container: "(string|element|boolean)", fallbackPlacement: "(string|array)", boundary: "(string|element)" },
        wn = { AUTO: "auto", TOP: "top", RIGHT: "right", BOTTOM: "bottom", LEFT: "left" },
        Tn = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: 0, container: !1, fallbackPlacement: "flip", boundary: "scrollParent" },
        Cn = "show",
        Sn = "out",
        Dn = { HIDE: "hide" + _n, HIDDEN: "hidden" + _n, SHOW: "show" + _n, SHOWN: "shown" + _n, INSERTED: "inserted" + _n, CLICK: "click" + _n, FOCUSIN: "focusin" + _n, FOCUSOUT: "focusout" + _n, MOUSEENTER: "mouseenter" + _n, MOUSELEAVE: "mouseleave" + _n },
        In = "fade",
        An = "show",
        On = ".tooltip-inner",
        Nn = ".arrow",
        kn = "hover",
        Ln = "focus",
        Pn = "click",
        xn = "manual",
        Hn = function () {
      function i(t, e) {
        if ("undefined" == typeof be) throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }var t = i.prototype;return t.enable = function () {
        this._isEnabled = !0;
      }, t.disable = function () {
        this._isEnabled = !1;
      }, t.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, t.toggle = function (t) {
        if (this._isEnabled) if (t) {
          var e = this.constructor.DATA_KEY,
              n = p(t.currentTarget).data(e);n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
        } else {
          if (p(this.getTipElement()).hasClass(An)) return void this._leave(null, this);this._enter(null, this);
        }
      }, t.dispose = function () {
        clearTimeout(this._timeout), p.removeData(this.element, this.constructor.DATA_KEY), p(this.element).off(this.constructor.EVENT_KEY), p(this.element).closest(".modal").off("hide.bs.modal"), this.tip && p(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, t.show = function () {
        var e = this;if ("none" === p(this.element).css("display")) throw new Error("Please use show on visible elements");var t = p.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
          p(this.element).trigger(t);var n = m.findShadowRoot(this.element),
              i = p.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);if (t.isDefaultPrevented() || !i) return;var o = this.getTipElement(),
              r = m.getUID(this.constructor.NAME);o.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && p(o).addClass(In);var s = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
              a = this._getAttachment(s);this.addAttachmentClass(a);var l = this._getContainer();p(o).data(this.constructor.DATA_KEY, this), p.contains(this.element.ownerDocument.documentElement, this.tip) || p(o).appendTo(l), p(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new be(this.element, o, { placement: a, modifiers: { offset: { offset: this.config.offset }, flip: { behavior: this.config.fallbackPlacement }, arrow: { element: Nn }, preventOverflow: { boundariesElement: this.config.boundary } }, onCreate: function onCreate(t) {
              t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
            }, onUpdate: function onUpdate(t) {
              return e._handlePopperPlacementChange(t);
            } }), p(o).addClass(An), "ontouchstart" in document.documentElement && p(document.body).children().on("mouseover", null, p.noop);var c = function c() {
            e.config.animation && e._fixTransition();var t = e._hoverState;e._hoverState = null, p(e.element).trigger(e.constructor.Event.SHOWN), t === Sn && e._leave(null, e);
          };if (p(this.tip).hasClass(In)) {
            var h = m.getTransitionDurationFromElement(this.tip);p(this.tip).one(m.TRANSITION_END, c).emulateTransitionEnd(h);
          } else c();
        }
      }, t.hide = function (t) {
        var e = this,
            n = this.getTipElement(),
            i = p.Event(this.constructor.Event.HIDE),
            o = function o() {
          e._hoverState !== Cn && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute("aria-describedby"), p(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();
        };if (p(this.element).trigger(i), !i.isDefaultPrevented()) {
          if (p(n).removeClass(An), "ontouchstart" in document.documentElement && p(document.body).children().off("mouseover", null, p.noop), this._activeTrigger[Pn] = !1, this._activeTrigger[Ln] = !1, this._activeTrigger[kn] = !1, p(this.tip).hasClass(In)) {
            var r = m.getTransitionDurationFromElement(n);p(n).one(m.TRANSITION_END, o).emulateTransitionEnd(r);
          } else o();this._hoverState = "";
        }
      }, t.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, t.isWithContent = function () {
        return Boolean(this.getTitle());
      }, t.addAttachmentClass = function (t) {
        p(this.getTipElement()).addClass(yn + "-" + t);
      }, t.getTipElement = function () {
        return this.tip = this.tip || p(this.config.template)[0], this.tip;
      }, t.setContent = function () {
        var t = this.getTipElement();this.setElementContent(p(t.querySelectorAll(On)), this.getTitle()), p(t).removeClass(In + " " + An);
      }, t.setElementContent = function (t, e) {
        var n = this.config.html;"object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && (e.nodeType || e.jquery) ? n ? p(e).parent().is(t) || t.empty().append(e) : t.text(p(e).text()) : t[n ? "html" : "text"](e);
      }, t.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, t._getContainer = function () {
        return !1 === this.config.container ? document.body : m.isElement(this.config.container) ? p(this.config.container) : p(document).find(this.config.container);
      }, t._getAttachment = function (t) {
        return wn[t.toUpperCase()];
      }, t._setListeners = function () {
        var i = this;this.config.trigger.split(" ").forEach(function (t) {
          if ("click" === t) p(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {
            return i.toggle(t);
          });else if (t !== xn) {
            var e = t === kn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,
                n = t === kn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;p(i.element).on(e, i.config.selector, function (t) {
              return i._enter(t);
            }).on(n, i.config.selector, function (t) {
              return i._leave(t);
            });
          }
        }), p(this.element).closest(".modal").on("hide.bs.modal", function () {
          i.element && i.hide();
        }), this.config.selector ? this.config = l({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
      }, t._fixTitle = function () {
        var t = _typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, t._enter = function (t, e) {
        var n = this.constructor.DATA_KEY;(e = e || p(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? Ln : kn] = !0), p(e.getTipElement()).hasClass(An) || e._hoverState === Cn ? e._hoverState = Cn : (clearTimeout(e._timeout), e._hoverState = Cn, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {
          e._hoverState === Cn && e.show();
        }, e.config.delay.show) : e.show());
      }, t._leave = function (t, e) {
        var n = this.constructor.DATA_KEY;(e = e || p(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), p(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? Ln : kn] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = Sn, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {
          e._hoverState === Sn && e.hide();
        }, e.config.delay.hide) : e.hide());
      }, t._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) {
          if (this._activeTrigger[t]) return !0;
        }return !1;
      }, t._getConfig = function (t) {
        return "number" == typeof (t = l({}, this.constructor.Default, p(this.element).data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t ? t : {})).delay && (t.delay = { show: t.delay, hide: t.delay }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), m.typeCheckConfig(mn, t, this.constructor.DefaultType), t;
      }, t._getDelegateConfig = function () {
        var t = {};if (this.config) for (var e in this.config) {
          this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        }return t;
      }, t._cleanTipClass = function () {
        var t = p(this.getTipElement()),
            e = t.attr("class").match(En);null !== e && e.length && t.removeClass(e.join(""));
      }, t._handlePopperPlacementChange = function (t) {
        var e = t.instance;this.tip = e.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
      }, t._fixTransition = function () {
        var t = this.getTipElement(),
            e = this.config.animation;null === t.getAttribute("x-placement") && (p(t).removeClass(In), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);
      }, i._jQueryInterface = function (n) {
        return this.each(function () {
          var t = p(this).data(gn),
              e = "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n;if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), p(this).data(gn, t)), "string" == typeof n)) {
            if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');t[n]();
          }
        });
      }, s(i, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return Tn;
        } }, { key: "NAME", get: function get() {
          return mn;
        } }, { key: "DATA_KEY", get: function get() {
          return gn;
        } }, { key: "Event", get: function get() {
          return Dn;
        } }, { key: "EVENT_KEY", get: function get() {
          return _n;
        } }, { key: "DefaultType", get: function get() {
          return bn;
        } }]), i;
    }();p.fn[mn] = Hn._jQueryInterface, p.fn[mn].Constructor = Hn, p.fn[mn].noConflict = function () {
      return p.fn[mn] = vn, Hn._jQueryInterface;
    };var jn = "popover",
        Rn = "bs.popover",
        Fn = "." + Rn,
        Mn = p.fn[jn],
        Wn = "bs-popover",
        Un = new RegExp("(^|\\s)" + Wn + "\\S+", "g"),
        Bn = l({}, Hn.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),
        qn = l({}, Hn.DefaultType, { content: "(string|element|function)" }),
        Kn = "fade",
        Qn = "show",
        Yn = ".popover-header",
        Vn = ".popover-body",
        Xn = { HIDE: "hide" + Fn, HIDDEN: "hidden" + Fn, SHOW: "show" + Fn, SHOWN: "shown" + Fn, INSERTED: "inserted" + Fn, CLICK: "click" + Fn, FOCUSIN: "focusin" + Fn, FOCUSOUT: "focusout" + Fn, MOUSEENTER: "mouseenter" + Fn, MOUSELEAVE: "mouseleave" + Fn },
        zn = function (t) {
      var e, n;function i() {
        return t.apply(this, arguments) || this;
      }n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;var o = i.prototype;return o.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, o.addAttachmentClass = function (t) {
        p(this.getTipElement()).addClass(Wn + "-" + t);
      }, o.getTipElement = function () {
        return this.tip = this.tip || p(this.config.template)[0], this.tip;
      }, o.setContent = function () {
        var t = p(this.getTipElement());this.setElementContent(t.find(Yn), this.getTitle());var e = this._getContent();"function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Vn), e), t.removeClass(Kn + " " + Qn);
      }, o._getContent = function () {
        return this.element.getAttribute("data-content") || this.config.content;
      }, o._cleanTipClass = function () {
        var t = p(this.getTipElement()),
            e = t.attr("class").match(Un);null !== e && 0 < e.length && t.removeClass(e.join(""));
      }, i._jQueryInterface = function (n) {
        return this.each(function () {
          var t = p(this).data(Rn),
              e = "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) ? n : null;if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), p(this).data(Rn, t)), "string" == typeof n)) {
            if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');t[n]();
          }
        });
      }, s(i, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return Bn;
        } }, { key: "NAME", get: function get() {
          return jn;
        } }, { key: "DATA_KEY", get: function get() {
          return Rn;
        } }, { key: "Event", get: function get() {
          return Xn;
        } }, { key: "EVENT_KEY", get: function get() {
          return Fn;
        } }, { key: "DefaultType", get: function get() {
          return qn;
        } }]), i;
    }(Hn);p.fn[jn] = zn._jQueryInterface, p.fn[jn].Constructor = zn, p.fn[jn].noConflict = function () {
      return p.fn[jn] = Mn, zn._jQueryInterface;
    };var Gn = "scrollspy",
        Jn = "bs.scrollspy",
        Zn = "." + Jn,
        $n = p.fn[Gn],
        ti = { offset: 10, method: "auto", target: "" },
        ei = { offset: "number", method: "string", target: "(string|element)" },
        ni = { ACTIVATE: "activate" + Zn, SCROLL: "scroll" + Zn, LOAD_DATA_API: "load" + Zn + ".data-api" },
        ii = "dropdown-item",
        oi = "active",
        ri = '[data-spy="scroll"]',
        si = ".nav, .list-group",
        ai = ".nav-link",
        li = ".nav-item",
        ci = ".list-group-item",
        hi = ".dropdown",
        ui = ".dropdown-item",
        fi = ".dropdown-toggle",
        di = "offset",
        pi = "position",
        mi = function () {
      function n(t, e) {
        var n = this;this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " " + ai + "," + this._config.target + " " + ci + "," + this._config.target + " " + ui, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, p(this._scrollElement).on(ni.SCROLL, function (t) {
          return n._process(t);
        }), this.refresh(), this._process();
      }var t = n.prototype;return t.refresh = function () {
        var e = this,
            t = this._scrollElement === this._scrollElement.window ? di : pi,
            o = "auto" === this._config.method ? t : this._config.method,
            r = o === pi ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function (t) {
          var e,
              n = m.getSelectorFromElement(t);if (n && (e = document.querySelector(n)), e) {
            var i = e.getBoundingClientRect();if (i.width || i.height) return [p(e)[o]().top + r, n];
          }return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (t) {
          e._offsets.push(t[0]), e._targets.push(t[1]);
        });
      }, t.dispose = function () {
        p.removeData(this._element, Jn), p(this._scrollElement).off(Zn), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, t._getConfig = function (t) {
        if ("string" != typeof (t = l({}, ti, "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t ? t : {})).target) {
          var e = p(t.target).attr("id");e || (e = m.getUID(Gn), p(t.target).attr("id", e)), t.target = "#" + e;
        }return m.typeCheckConfig(Gn, t, ei), t;
      }, t._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, t._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, t._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, t._process = function () {
        var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), n <= t) {
          var i = this._targets[this._targets.length - 1];this._activeTarget !== i && this._activate(i);
        } else {
          if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();for (var o = this._offsets.length; o--;) {
            this._activeTarget !== this._targets[o] && t >= this._offsets[o] && ("undefined" == typeof this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);
          }
        }
      }, t._activate = function (e) {
        this._activeTarget = e, this._clear();var t = this._selector.split(",").map(function (t) {
          return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
        }),
            n = p([].slice.call(document.querySelectorAll(t.join(","))));n.hasClass(ii) ? (n.closest(hi).find(fi).addClass(oi), n.addClass(oi)) : (n.addClass(oi), n.parents(si).prev(ai + ", " + ci).addClass(oi), n.parents(si).prev(li).children(ai).addClass(oi)), p(this._scrollElement).trigger(ni.ACTIVATE, { relatedTarget: e });
      }, t._clear = function () {
        [].slice.call(document.querySelectorAll(this._selector)).filter(function (t) {
          return t.classList.contains(oi);
        }).forEach(function (t) {
          return t.classList.remove(oi);
        });
      }, n._jQueryInterface = function (e) {
        return this.each(function () {
          var t = p(this).data(Jn);if (t || (t = new n(this, "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && e), p(this).data(Jn, t)), "string" == typeof e) {
            if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');t[e]();
          }
        });
      }, s(n, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "Default", get: function get() {
          return ti;
        } }]), n;
    }();p(window).on(ni.LOAD_DATA_API, function () {
      for (var t = [].slice.call(document.querySelectorAll(ri)), e = t.length; e--;) {
        var n = p(t[e]);mi._jQueryInterface.call(n, n.data());
      }
    }), p.fn[Gn] = mi._jQueryInterface, p.fn[Gn].Constructor = mi, p.fn[Gn].noConflict = function () {
      return p.fn[Gn] = $n, mi._jQueryInterface;
    };var gi = "bs.tab",
        _i = "." + gi,
        vi = p.fn.tab,
        yi = { HIDE: "hide" + _i, HIDDEN: "hidden" + _i, SHOW: "show" + _i, SHOWN: "shown" + _i, CLICK_DATA_API: "click" + _i + ".data-api" },
        Ei = "dropdown-menu",
        bi = "active",
        wi = "disabled",
        Ti = "fade",
        Ci = "show",
        Si = ".dropdown",
        Di = ".nav, .list-group",
        Ii = ".active",
        Ai = "> li > .active",
        Oi = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
        Ni = ".dropdown-toggle",
        ki = "> .dropdown-menu .active",
        Li = function () {
      function i(t) {
        this._element = t;
      }var t = i.prototype;return t.show = function () {
        var n = this;if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && p(this._element).hasClass(bi) || p(this._element).hasClass(wi))) {
          var t,
              i,
              e = p(this._element).closest(Di)[0],
              o = m.getSelectorFromElement(this._element);if (e) {
            var r = "UL" === e.nodeName || "OL" === e.nodeName ? Ai : Ii;i = (i = p.makeArray(p(e).find(r)))[i.length - 1];
          }var s = p.Event(yi.HIDE, { relatedTarget: this._element }),
              a = p.Event(yi.SHOW, { relatedTarget: i });if (i && p(i).trigger(s), p(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
            o && (t = document.querySelector(o)), this._activate(this._element, e);var l = function l() {
              var t = p.Event(yi.HIDDEN, { relatedTarget: n._element }),
                  e = p.Event(yi.SHOWN, { relatedTarget: i });p(i).trigger(t), p(n._element).trigger(e);
            };t ? this._activate(t, t.parentNode, l) : l();
          }
        }
      }, t.dispose = function () {
        p.removeData(this._element, gi), this._element = null;
      }, t._activate = function (t, e, n) {
        var i = this,
            o = (!e || "UL" !== e.nodeName && "OL" !== e.nodeName ? p(e).children(Ii) : p(e).find(Ai))[0],
            r = n && o && p(o).hasClass(Ti),
            s = function s() {
          return i._transitionComplete(t, o, n);
        };if (o && r) {
          var a = m.getTransitionDurationFromElement(o);p(o).removeClass(Ci).one(m.TRANSITION_END, s).emulateTransitionEnd(a);
        } else s();
      }, t._transitionComplete = function (t, e, n) {
        if (e) {
          p(e).removeClass(bi);var i = p(e.parentNode).find(ki)[0];i && p(i).removeClass(bi), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
        }if (p(t).addClass(bi), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), m.reflow(t), p(t).addClass(Ci), t.parentNode && p(t.parentNode).hasClass(Ei)) {
          var o = p(t).closest(Si)[0];if (o) {
            var r = [].slice.call(o.querySelectorAll(Ni));p(r).addClass(bi);
          }t.setAttribute("aria-expanded", !0);
        }n && n();
      }, i._jQueryInterface = function (n) {
        return this.each(function () {
          var t = p(this),
              e = t.data(gi);if (e || (e = new i(this), t.data(gi, e)), "string" == typeof n) {
            if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');e[n]();
          }
        });
      }, s(i, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }]), i;
    }();p(document).on(yi.CLICK_DATA_API, Oi, function (t) {
      t.preventDefault(), Li._jQueryInterface.call(p(this), "show");
    }), p.fn.tab = Li._jQueryInterface, p.fn.tab.Constructor = Li, p.fn.tab.noConflict = function () {
      return p.fn.tab = vi, Li._jQueryInterface;
    };var Pi = "toast",
        xi = "bs.toast",
        Hi = "." + xi,
        ji = p.fn[Pi],
        Ri = { CLICK_DISMISS: "click.dismiss" + Hi, HIDE: "hide" + Hi, HIDDEN: "hidden" + Hi, SHOW: "show" + Hi, SHOWN: "shown" + Hi },
        Fi = "fade",
        Mi = "hide",
        Wi = "show",
        Ui = "showing",
        Bi = { animation: "boolean", autohide: "boolean", delay: "number" },
        qi = { animation: !0, autohide: !0, delay: 500 },
        Ki = '[data-dismiss="toast"]',
        Qi = function () {
      function i(t, e) {
        this._element = t, this._config = this._getConfig(e), this._timeout = null, this._setListeners();
      }var t = i.prototype;return t.show = function () {
        var t = this;p(this._element).trigger(Ri.SHOW), this._config.animation && this._element.classList.add(Fi);var e = function e() {
          t._element.classList.remove(Ui), t._element.classList.add(Wi), p(t._element).trigger(Ri.SHOWN), t._config.autohide && t.hide();
        };if (this._element.classList.remove(Mi), this._element.classList.add(Ui), this._config.animation) {
          var n = m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END, e).emulateTransitionEnd(n);
        } else e();
      }, t.hide = function (t) {
        var e = this;this._element.classList.contains(Wi) && (p(this._element).trigger(Ri.HIDE), t ? this._close() : this._timeout = setTimeout(function () {
          e._close();
        }, this._config.delay));
      }, t.dispose = function () {
        clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(Wi) && this._element.classList.remove(Wi), p(this._element).off(Ri.CLICK_DISMISS), p.removeData(this._element, xi), this._element = null, this._config = null;
      }, t._getConfig = function (t) {
        return t = l({}, qi, p(this._element).data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t ? t : {}), m.typeCheckConfig(Pi, t, this.constructor.DefaultType), t;
      }, t._setListeners = function () {
        var t = this;p(this._element).on(Ri.CLICK_DISMISS, Ki, function () {
          return t.hide(!0);
        });
      }, t._close = function () {
        var t = this,
            e = function e() {
          t._element.classList.add(Mi), p(t._element).trigger(Ri.HIDDEN);
        };if (this._element.classList.remove(Wi), this._config.animation) {
          var n = m.getTransitionDurationFromElement(this._element);p(this._element).one(m.TRANSITION_END, e).emulateTransitionEnd(n);
        } else e();
      }, i._jQueryInterface = function (n) {
        return this.each(function () {
          var t = p(this),
              e = t.data(xi);if (e || (e = new i(this, "object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && n), t.data(xi, e)), "string" == typeof n) {
            if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');e[n](this);
          }
        });
      }, s(i, null, [{ key: "VERSION", get: function get() {
          return "4.2.1";
        } }, { key: "DefaultType", get: function get() {
          return Bi;
        } }]), i;
    }();p.fn[Pi] = Qi._jQueryInterface, p.fn[Pi].Constructor = Qi, p.fn[Pi].noConflict = function () {
      return p.fn[Pi] = ji, Qi._jQueryInterface;
    }, function () {
      if ("undefined" == typeof p) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t = p.fn.jquery.split(" ")[0].split(".");if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || 4 <= t[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }(), t.Util = m, t.Alert = g, t.Button = k, t.Carousel = at, t.Collapse = Tt, t.Dropdown = ze, t.Modal = pn, t.Popover = zn, t.Scrollspy = mi, t.Tab = Li, t.Toast = Qi, t.Tooltip = Hn, Object.defineProperty(t, "__esModule", { value: !0 });
  });
  
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"jquery":1}],4:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "jquery"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("jquery"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.jquery);
    global.datepickerMin = mod.exports;
  }
})(undefined, function (module, exports) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /*!
   * Datepicker v1.0.7
   * https://fengyuanchen.github.io/datepicker
   *
   * Copyright 2014-present Chen Fengyuan
   * Released under the MIT license
   *
   * Date: 2019-02-19T12:18:04.827Z
   */
  !function (t, e) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e() : "function" == typeof define && define.amd ? define(["jquery"], e) : e((t = t || self).jQuery);
  }(undefined, function (D) {
    "use strict";

    function s(t, e) {
      for (var i = 0; i < e.length; i++) {
        var a = e[i];a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);
      }
    }D = D && D.hasOwnProperty("default") ? D.default : D;var n = { autoShow: !1, autoHide: !1, autoPick: !1, inline: !1, container: null, trigger: null, language: "", format: "mm/dd/yyyy", date: null, startDate: null, endDate: null, startView: 0, weekStart: 0, yearFirst: !1, yearSuffix: "", days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], itemTag: "li", mutedClass: "muted", pickedClass: "picked", disabledClass: "disabled", highlightedClass: "highlighted", template: '<div class="datepicker-container"><div class="datepicker-panel" data-view="years picker"><ul><li data-view="years prev">&lsaquo;</li><li data-view="years current"></li><li data-view="years next">&rsaquo;</li></ul><ul data-view="years"></ul></div><div class="datepicker-panel" data-view="months picker"><ul><li data-view="year prev">&lsaquo;</li><li data-view="year current"></li><li data-view="year next">&rsaquo;</li></ul><ul data-view="months"></ul></div><div class="datepicker-panel" data-view="days picker"><ul><li data-view="month prev">&lsaquo;</li><li data-view="month current"></li><li data-view="month next">&rsaquo;</li></ul><ul data-view="week"></ul><ul data-view="days"></ul></div></div>', offset: 10, zIndex: 1e3, filter: null, show: null, hide: null, pick: null },
        t = "undefined" != typeof window,
        e = t ? window : {},
        i = !!t && "ontouchstart" in e.document.documentElement,
        c = "datepicker",
        r = "click.".concat(c),
        h = "focus.".concat(c),
        o = "hide.".concat(c),
        l = "keyup.".concat(c),
        d = "pick.".concat(c),
        a = "resize.".concat(c),
        u = "scroll.".concat(c),
        p = "show.".concat(c),
        f = "touchstart.".concat(c),
        g = "".concat(c, "-hide"),
        y = {},
        m = 0,
        v = 1,
        w = 2,
        k = Object.prototype.toString;function b(t) {
      return "string" == typeof t;
    }var C = Number.isNaN || e.isNaN;function $(t) {
      return "number" == typeof t && !C(t);
    }function x(t) {
      return void 0 === t;
    }function F(t) {
      return "date" === (e = t, k.call(e).slice(8, -1).toLowerCase()) && !C(t.getTime());var e;
    }function M(a, s) {
      for (var t = arguments.length, n = new Array(2 < t ? t - 2 : 0), e = 2; e < t; e++) {
        n[e - 2] = arguments[e];
      }return function () {
        for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++) {
          e[i] = arguments[i];
        }return a.apply(s, n.concat(e));
      };
    }function Y(t) {
      return '[data-view="'.concat(t, '"]');
    }function G(t, e) {
      return [31, (i = t, i % 4 == 0 && i % 100 != 0 || i % 400 == 0 ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][e];var i;
    }function V(t, e, i) {
      return Math.min(i, G(t, e));
    }var T = /(y|m|d)+/g;function S(t) {
      var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 1,
          i = String(Math.abs(t)),
          a = i.length,
          s = "";for (t < 0 && (s += "-"); a < e;) {
        a += 1, s += "0";
      }return s + i;
    }var I = /\d+/g,
        P = { show: function show() {
        this.built || this.build(), this.shown || this.trigger(p).isDefaultPrevented() || (this.shown = !0, this.$picker.removeClass(g).on(r, D.proxy(this.click, this)), this.showView(this.options.startView), this.inline || (this.$scrollParent.on(u, D.proxy(this.place, this)), D(window).on(a, this.onResize = M(this.place, this)), D(document).on(r, this.onGlobalClick = M(this.globalClick, this)), D(document).on(l, this.onGlobalKeyup = M(this.globalKeyup, this)), i && D(document).on(f, this.onTouchStart = M(this.touchstart, this)), this.place()));
      }, hide: function hide() {
        this.shown && (this.trigger(o).isDefaultPrevented() || (this.shown = !1, this.$picker.addClass(g).off(r, this.click), this.inline || (this.$scrollParent.off(u, this.place), D(window).off(a, this.onResize), D(document).off(r, this.onGlobalClick), D(document).off(l, this.onGlobalKeyup), i && D(document).off(f, this.onTouchStart))));
      }, toggle: function toggle() {
        this.shown ? this.hide() : this.show();
      }, update: function update() {
        var t = this.getValue();t !== this.oldValue && (this.setDate(t, !0), this.oldValue = t);
      }, pick: function pick(t) {
        var e = this.$element,
            i = this.date;this.trigger(d, { view: t || "", date: i }).isDefaultPrevented() || (i = this.formatDate(this.date), this.setValue(i), this.isInput && (e.trigger("input"), e.trigger("change")));
      }, reset: function reset() {
        this.setDate(this.initialDate, !0), this.setValue(this.initialValue), this.shown && this.showView(this.options.startView);
      }, getMonthName: function getMonthName(t, e) {
        var i = this.options,
            a = i.monthsShort,
            s = i.months;return D.isNumeric(t) ? t = Number(t) : x(e) && (e = t), !0 === e && (s = a), s[$(t) ? t : this.date.getMonth()];
      }, getDayName: function getDayName(t, e, i) {
        var a = this.options,
            s = a.days;return D.isNumeric(t) ? t = Number(t) : (x(i) && (i = e), x(e) && (e = t)), i ? s = a.daysMin : e && (s = a.daysShort), s[$(t) ? t : this.date.getDay()];
      }, getDate: function getDate(t) {
        var e = this.date;return t ? this.formatDate(e) : new Date(e);
      }, setDate: function setDate(t, e) {
        var i = this.options.filter;if (F(t) || b(t)) {
          if (t = this.parseDate(t), D.isFunction(i) && !1 === i.call(this.$element, t, "day")) return;this.date = t, this.viewDate = new Date(t), e || this.pick(), this.built && this.render();
        }
      }, setStartDate: function setStartDate(t) {
        F(t) || b(t) ? this.startDate = this.parseDate(t) : this.startDate = null, this.built && this.render();
      }, setEndDate: function setEndDate(t) {
        F(t) || b(t) ? this.endDate = this.parseDate(t) : this.endDate = null, this.built && this.render();
      }, parseDate: function parseDate(a) {
        var s = this.format,
            t = [];return F(a) || (b(a) && (t = a.match(I) || []), F(a = a ? new Date(a) : new Date()) || (a = new Date()), t.length === s.parts.length && D.each(t, function (t, e) {
          var i = parseInt(e, 10);switch (s.parts[t]) {case "dd":case "d":
              a.setDate(i);break;case "mm":case "m":
              a.setMonth(i - 1);break;case "yy":
              a.setFullYear(2e3 + i);break;case "yyyy":
              a.setFullYear(2 === e.length ? 2e3 + i : i);}
        })), new Date(a.getFullYear(), a.getMonth(), a.getDate());
      }, formatDate: function formatDate(t) {
        var e = this.format,
            i = "";if (F(t)) {
          var a = t.getFullYear(),
              s = t.getMonth(),
              n = t.getDate(),
              r = { d: n, dd: S(n, 2), m: s + 1, mm: S(s + 1, 2), yy: String(a).substring(2), yyyy: S(a, 4) };i = e.source, D.each(e.parts, function (t, e) {
            i = i.replace(e, r[e]);
          });
        }return i;
      }, destroy: function destroy() {
        this.unbind(), this.unbuild(), this.$element.removeData(c);
      } },
        N = { click: function click(t) {
        var e = D(t.target),
            i = this.options,
            a = this.date,
            s = this.viewDate,
            n = this.format;if (t.stopPropagation(), t.preventDefault(), !e.hasClass("disabled")) {
          var r = e.data("view"),
              h = s.getFullYear(),
              o = s.getMonth(),
              l = s.getDate();switch (r) {case "years prev":case "years next":
              h = "years prev" === r ? h - 10 : h + 10, s.setFullYear(h), s.setDate(V(h, o, l)), this.renderYears();break;case "year prev":case "year next":
              h = "year prev" === r ? h - 1 : h + 1, s.setFullYear(h), s.setDate(V(h, o, l)), this.renderMonths();break;case "year current":
              n.hasYear && this.showView(w);break;case "year picked":
              n.hasMonth ? this.showView(v) : (e.addClass(i.pickedClass).siblings().removeClass(i.pickedClass), this.hideView()), this.pick("year");break;case "year":
              h = parseInt(e.text(), 10), a.setDate(V(h, o, l)), a.setFullYear(h), s.setDate(V(h, o, l)), s.setFullYear(h), n.hasMonth ? this.showView(v) : (e.addClass(i.pickedClass).siblings().removeClass(i.pickedClass), this.hideView()), this.pick("year");break;case "month prev":case "month next":
              (o = "month prev" === r ? o - 1 : o + 1) < 0 ? (h -= 1, o += 12) : 11 < o && (h += 1, o -= 12), s.setFullYear(h), s.setDate(V(h, o, l)), s.setMonth(o), this.renderDays();break;case "month current":
              n.hasMonth && this.showView(v);break;case "month picked":
              n.hasDay ? this.showView(m) : (e.addClass(i.pickedClass).siblings().removeClass(i.pickedClass), this.hideView()), this.pick("month");break;case "month":
              o = D.inArray(e.text(), i.monthsShort), a.setFullYear(h), a.setDate(V(h, o, l)), a.setMonth(o), s.setFullYear(h), s.setDate(V(h, o, l)), s.setMonth(o), n.hasDay ? this.showView(m) : (e.addClass(i.pickedClass).siblings().removeClass(i.pickedClass), this.hideView()), this.pick("month");break;case "day prev":case "day next":case "day":
              "day prev" === r ? o -= 1 : "day next" === r && (o += 1), l = parseInt(e.text(), 10), a.setDate(1), a.setFullYear(h), a.setMonth(o), a.setDate(l), s.setDate(1), s.setFullYear(h), s.setMonth(o), s.setDate(l), this.renderDays(), "day" === r && this.hideView(), this.pick("day");break;case "day picked":
              this.hideView(), this.pick("day");}
        }
      }, globalClick: function globalClick(t) {
        for (var e = t.target, i = this.element, a = this.$trigger[0], s = !0; e !== document;) {
          if (e === a || e === i) {
            s = !1;break;
          }e = e.parentNode;
        }s && this.hide();
      }, keyup: function keyup() {
        this.update();
      }, globalKeyup: function globalKeyup(t) {
        var e = t.target,
            i = t.key,
            a = t.keyCode;this.isInput && e !== this.element && this.shown && ("Tab" === i || 9 === a) && this.hide();
      }, touchstart: function touchstart(t) {
        var e = t.target;this.isInput && e !== this.element && !D.contains(this.$picker[0], e) && (this.hide(), this.element.blur());
      } },
        j = { render: function render() {
        this.renderYears(), this.renderMonths(), this.renderDays();
      }, renderWeek: function renderWeek() {
        var i = this,
            a = [],
            t = this.options,
            e = t.weekStart,
            s = t.daysMin;e = parseInt(e, 10) % 7, s = s.slice(e).concat(s.slice(0, e)), D.each(s, function (t, e) {
          a.push(i.createItem({ text: e }));
        }), this.$week.html(a.join(""));
      }, renderYears: function renderYears() {
        var t,
            e = this.options,
            i = this.startDate,
            a = this.endDate,
            s = e.disabledClass,
            n = e.filter,
            r = e.yearSuffix,
            h = this.viewDate.getFullYear(),
            o = new Date().getFullYear(),
            l = this.date.getFullYear(),
            c = [],
            d = !1,
            u = !1;for (t = -5; t <= 6; t += 1) {
          var p = new Date(h + t, 1, 1),
              f = !1;i && (f = p.getFullYear() < i.getFullYear(), -5 === t && (d = f)), !f && a && (f = p.getFullYear() > a.getFullYear(), 6 === t && (u = f)), !f && n && (f = !1 === n.call(this.$element, p, "year"));var g = h + t === l,
              y = g ? "year picked" : "year";c.push(this.createItem({ picked: g, disabled: f, text: h + t, view: f ? "year disabled" : y, highlighted: p.getFullYear() === o }));
        }this.$yearsPrev.toggleClass(s, d), this.$yearsNext.toggleClass(s, u), this.$yearsCurrent.toggleClass(s, !0).html("".concat(h + -5 + r, " - ").concat(h + 6).concat(r)), this.$years.html(c.join(""));
      }, renderMonths: function renderMonths() {
        var t,
            e = this.options,
            i = this.startDate,
            a = this.endDate,
            s = this.viewDate,
            n = e.disabledClass || "",
            r = e.monthsShort,
            h = D.isFunction(e.filter) && e.filter,
            o = s.getFullYear(),
            l = new Date(),
            c = l.getFullYear(),
            d = l.getMonth(),
            u = this.date.getFullYear(),
            p = this.date.getMonth(),
            f = [],
            g = !1,
            y = !1;for (t = 0; t <= 11; t += 1) {
          var m = new Date(o, t, 1),
              v = !1;i && (v = (g = m.getFullYear() === i.getFullYear()) && m.getMonth() < i.getMonth()), !v && a && (v = (y = m.getFullYear() === a.getFullYear()) && m.getMonth() > a.getMonth()), !v && h && (v = !1 === h.call(this.$element, m, "month"));var w = o === u && t === p,
              k = w ? "month picked" : "month";f.push(this.createItem({ disabled: v, picked: w, highlighted: o === c && m.getMonth() === d, index: t, text: r[t], view: v ? "month disabled" : k }));
        }this.$yearPrev.toggleClass(n, g), this.$yearNext.toggleClass(n, y), this.$yearCurrent.toggleClass(n, g && y).html(o + e.yearSuffix || ""), this.$months.html(f.join(""));
      }, renderDays: function renderDays() {
        var t,
            e,
            i,
            a = this.$element,
            s = this.options,
            n = this.startDate,
            r = this.endDate,
            h = this.viewDate,
            o = this.date,
            l = s.disabledClass,
            c = s.filter,
            d = s.months,
            u = s.weekStart,
            p = s.yearSuffix,
            f = h.getFullYear(),
            g = h.getMonth(),
            y = new Date(),
            m = y.getFullYear(),
            v = y.getMonth(),
            w = y.getDate(),
            k = o.getFullYear(),
            D = o.getMonth(),
            b = o.getDate(),
            C = [],
            $ = f,
            x = g,
            F = !1;0 === g ? ($ -= 1, x = 11) : x -= 1, t = G($, x);var M = new Date(f, g, 1);for ((i = M.getDay() - parseInt(u, 10) % 7) <= 0 && (i += 7), n && (F = M.getTime() <= n.getTime()), e = t - (i - 1); e <= t; e += 1) {
          var Y = new Date($, x, e),
              V = !1;n && (V = Y.getTime() < n.getTime()), !V && c && (V = !1 === c.call(a, Y, "day")), C.push(this.createItem({ disabled: V, highlighted: $ === m && x === v && Y.getDate() === w, muted: !0, picked: $ === k && x === D && e === b, text: e, view: "day prev" }));
        }var T = [],
            S = f,
            I = g,
            P = !1;11 === g ? (S += 1, I = 0) : I += 1, t = G(f, g), i = 42 - (C.length + t);var N = new Date(f, g, t);for (r && (P = N.getTime() >= r.getTime()), e = 1; e <= i; e += 1) {
          var j = new Date(S, I, e),
              q = S === k && I === D && e === b,
              A = !1;r && (A = j.getTime() > r.getTime()), !A && c && (A = !1 === c.call(a, j, "day")), T.push(this.createItem({ disabled: A, picked: q, highlighted: S === m && I === v && j.getDate() === w, muted: !0, text: e, view: "day next" }));
        }var O = [];for (e = 1; e <= t; e += 1) {
          var W = new Date(f, g, e),
              z = !1;n && (z = W.getTime() < n.getTime()), !z && r && (z = W.getTime() > r.getTime()), !z && c && (z = !1 === c.call(a, W, "day"));var J = f === k && g === D && e === b,
              E = J ? "day picked" : "day";O.push(this.createItem({ disabled: z, picked: J, highlighted: f === m && g === v && W.getDate() === w, text: e, view: z ? "day disabled" : E }));
        }this.$monthPrev.toggleClass(l, F), this.$monthNext.toggleClass(l, P), this.$monthCurrent.toggleClass(l, F && P).html(s.yearFirst ? "".concat(f + p, " ").concat(d[g]) : "".concat(d[g], " ").concat(f).concat(p)), this.$days.html(C.join("") + O.join("") + T.join(""));
      } },
        q = "".concat(c, "-top-left"),
        A = "".concat(c, "-top-right"),
        O = "".concat(c, "-bottom-left"),
        W = "".concat(c, "-bottom-right"),
        z = [q, A, O, W].join(" "),
        J = function () {
      function i(t) {
        var e = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {};!function (t, e) {
          if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
        }(this, i), this.$element = D(t), this.element = t, this.options = D.extend({}, n, y[e.language], D.isPlainObject(e) && e), this.$scrollParent = function (t) {
          var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
              i = D(t),
              a = i.css("position"),
              s = "absolute" === a,
              n = e ? /auto|scroll|hidden/ : /auto|scroll/,
              r = i.parents().filter(function (t, e) {
            var i = D(e);return (!s || "static" !== i.css("position")) && n.test(i.css("overflow") + i.css("overflow-y") + i.css("overflow-x"));
          }).eq(0);return "fixed" !== a && r.length ? r : D(t.ownerDocument || document);
        }(t, !0), this.built = !1, this.shown = !1, this.isInput = !1, this.inline = !1, this.initialValue = "", this.initialDate = null, this.startDate = null, this.endDate = null, this.init();
      }var t, e, a;return t = i, a = [{ key: "setDefaults", value: function value() {
          var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};D.extend(n, y[t.language], D.isPlainObject(t) && t);
        } }], (e = [{ key: "init", value: function value() {
          var t = this.$element,
              e = this.options,
              i = e.startDate,
              a = e.endDate,
              s = e.date;this.$trigger = D(e.trigger), this.isInput = t.is("input") || t.is("textarea"), this.inline = e.inline && (e.container || !this.isInput), this.format = function (i) {
            var t = String(i).toLowerCase(),
                e = t.match(T);if (!e || 0 === e.length) throw new Error("Invalid date format.");return i = { source: t, parts: e }, D.each(e, function (t, e) {
              switch (e) {case "dd":case "d":
                  i.hasDay = !0;break;case "mm":case "m":
                  i.hasMonth = !0;break;case "yyyy":case "yy":
                  i.hasYear = !0;}
            }), i;
          }(e.format);var n = this.getValue();this.initialValue = n, this.oldValue = n, s = this.parseDate(s || n), i && (i = this.parseDate(i), s.getTime() < i.getTime() && (s = new Date(i)), this.startDate = i), a && (a = this.parseDate(a), i && a.getTime() < i.getTime() && (a = new Date(i)), s.getTime() > a.getTime() && (s = new Date(a)), this.endDate = a), this.date = s, this.viewDate = new Date(s), this.initialDate = new Date(this.date), this.bind(), (e.autoShow || this.inline) && this.show(), e.autoPick && this.pick();
        } }, { key: "build", value: function value() {
          if (!this.built) {
            this.built = !0;var t = this.$element,
                e = this.options,
                i = D(e.template);this.$picker = i, this.$week = i.find(Y("week")), this.$yearsPicker = i.find(Y("years picker")), this.$yearsPrev = i.find(Y("years prev")), this.$yearsNext = i.find(Y("years next")), this.$yearsCurrent = i.find(Y("years current")), this.$years = i.find(Y("years")), this.$monthsPicker = i.find(Y("months picker")), this.$yearPrev = i.find(Y("year prev")), this.$yearNext = i.find(Y("year next")), this.$yearCurrent = i.find(Y("year current")), this.$months = i.find(Y("months")), this.$daysPicker = i.find(Y("days picker")), this.$monthPrev = i.find(Y("month prev")), this.$monthNext = i.find(Y("month next")), this.$monthCurrent = i.find(Y("month current")), this.$days = i.find(Y("days")), this.inline ? D(e.container || t).append(i.addClass("".concat(c, "-inline"))) : (D(document.body).append(i.addClass("".concat(c, "-dropdown"))), i.addClass(g).css({ zIndex: parseInt(e.zIndex, 10) })), this.renderWeek();
          }
        } }, { key: "unbuild", value: function value() {
          this.built && (this.built = !1, this.$picker.remove());
        } }, { key: "bind", value: function value() {
          var t = this.options,
              e = this.$element;D.isFunction(t.show) && e.on(p, t.show), D.isFunction(t.hide) && e.on(o, t.hide), D.isFunction(t.pick) && e.on(d, t.pick), this.isInput && e.on(l, D.proxy(this.keyup, this)), this.inline || (t.trigger ? this.$trigger.on(r, D.proxy(this.toggle, this)) : this.isInput ? e.on(h, D.proxy(this.show, this)) : e.on(r, D.proxy(this.show, this)));
        } }, { key: "unbind", value: function value() {
          var t = this.$element,
              e = this.options;D.isFunction(e.show) && t.off(p, e.show), D.isFunction(e.hide) && t.off(o, e.hide), D.isFunction(e.pick) && t.off(d, e.pick), this.isInput && t.off(l, this.keyup), this.inline || (e.trigger ? this.$trigger.off(r, this.toggle) : this.isInput ? t.off(h, this.show) : t.off(r, this.show));
        } }, { key: "showView", value: function value(t) {
          var e = this.$yearsPicker,
              i = this.$monthsPicker,
              a = this.$daysPicker,
              s = this.format;if (s.hasYear || s.hasMonth || s.hasDay) switch (Number(t)) {case w:
              i.addClass(g), a.addClass(g), s.hasYear ? (this.renderYears(), e.removeClass(g), this.place()) : this.showView(m);break;case v:
              e.addClass(g), a.addClass(g), s.hasMonth ? (this.renderMonths(), i.removeClass(g), this.place()) : this.showView(w);break;default:
              e.addClass(g), i.addClass(g), s.hasDay ? (this.renderDays(), a.removeClass(g), this.place()) : this.showView(v);}
        } }, { key: "hideView", value: function value() {
          !this.inline && this.options.autoHide && this.hide();
        } }, { key: "place", value: function value() {
          if (!this.inline) {
            var t = this.$element,
                e = this.options,
                i = this.$picker,
                a = D(document).outerWidth(),
                s = D(document).outerHeight(),
                n = t.outerWidth(),
                r = t.outerHeight(),
                h = i.width(),
                o = i.height(),
                l = t.offset(),
                c = l.left,
                d = l.top,
                u = parseFloat(e.offset),
                p = q;C(u) && (u = 10), o < d && s < d + r + o ? (d -= o + u, p = O) : d += r + u, a < c + h && (c += n - h, p = p.replace("left", "right")), i.removeClass(z).addClass(p).css({ top: d, left: c });
          }
        } }, { key: "trigger", value: function value(t, e) {
          var i = D.Event(t, e);return this.$element.trigger(i), i;
        } }, { key: "createItem", value: function value(t) {
          var e = this.options,
              i = e.itemTag,
              a = { text: "", view: "", muted: !1, picked: !1, disabled: !1, highlighted: !1 },
              s = [];return D.extend(a, t), a.muted && s.push(e.mutedClass), a.highlighted && s.push(e.highlightedClass), a.picked && s.push(e.pickedClass), a.disabled && s.push(e.disabledClass), "<".concat(i, ' class="').concat(s.join(" "), '" data-view="').concat(a.view, '">').concat(a.text, "</").concat(i, ">");
        } }, { key: "getValue", value: function value() {
          var t = this.$element;return this.isInput ? t.val() : t.text();
        } }, { key: "setValue", value: function value() {
          var t = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
              e = this.$element;this.isInput ? e.val(t) : this.inline && !this.options.container || e.text(t);
        } }]) && s(t.prototype, e), a && s(t, a), i;
    }();if (D.extend && D.extend(J.prototype, j, N, P), D.fn) {
      var E = D.fn.datepicker;D.fn.datepicker = function (h) {
        for (var t = arguments.length, o = new Array(1 < t ? t - 1 : 0), e = 1; e < t; e++) {
          o[e - 1] = arguments[e];
        }var l;return this.each(function (t, e) {
          var i = D(e),
              a = "destroy" === h,
              s = i.data(c);if (!s) {
            if (a) return;var n = D.extend({}, i.data(), D.isPlainObject(h) && h);s = new J(e, n), i.data(c, s);
          }if (b(h)) {
            var r = s[h];D.isFunction(r) && (l = r.apply(s, o), a && i.removeData(c));
          }
        }), x(l) ? this : l;
      }, D.fn.datepicker.Constructor = J, D.fn.datepicker.languages = y, D.fn.datepicker.setDefaults = J.setDefaults, D.fn.datepicker.noConflict = function () {
        return D.fn.datepicker = E, this;
      };
    }
  });
});

},{"jquery":1}],5:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports !== "undefined") {
        factory();
    } else {
        var mod = {
            exports: {}
        };
        factory();
        global.formVariables = mod.exports;
    }
})(undefined, function () {
    'use strict';

    var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
    };

    var options_reg_form = {
        success: function success(data, statusText, xhr, $form) {
            $.MCustomLoader(false);
            $form.find('input').removeClass('is-invalid').addClass('valid');
            $form.find('.errorText').hide().html('');
            var obj = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) != 'object' ? $.parseJSON(data) : data;
            if (typeof obj.errors != "undefined" && obj.errors !== null) {
                $.each(obj.errors, function (i, val) {
                    $form.find('.errorText[data-error="' + i + '"]').html(val[0]).show();
                    $form.find('.errorText[data-error="' + i + '"]').closest('form-group').find('input').removeClass('valid').addClass('is-invalid');
                });
            } else {
                var timer = 1000;

                if (typeof obj.success != "undefined" && obj.success !== null) {
                    swal({
                        title: obj.success,
                        text: obj.desc,
                        type: "success",
                        timer: 3000,
                        html: true,
                        showConfirmButton: false
                    });

                    timer = 3200;
                }

                if (typeof obj.redirect != "undefined" && obj.redirect !== null) {
                    window.setTimeout(function () {
                        window.location.href = obj.redirect;
                    }, timer);
                }
            }
        }
    };

    var options_login_form = options_reg_form;

    var options_procedure_form = {
        beforeSubmit: function beforeSubmit(arr, $form, options) {
            var urgent_order = $form.find('.form-check #urgent-order');
            if (urgent_order.length <= 0) urgent_order = $form.find('.form-check #urgent-order-main');

            if (typeof $form.attr('data-type') != 'undefined') arr.push({ name: 'type', value: $form.attr('data-type') });

            arr.push({ name: 'urgent', value: urgent_order.is(':checked') });
        },
        success: function success(data, statusText, xhr, $form) {
            $.MCustomLoader(false);
            $form.find('input').removeClass('is-invalid').addClass('valid');
            $form.find('.errorText').hide().html('');
            var obj = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) != 'object' ? $.parseJSON(data) : data;
            if (typeof obj.errors != "undefined" && obj.errors !== null) {
                $.each(obj.errors, function (i, val) {
                    $form.find('.errorText[data-error="' + i + '"]').html(val[0]).show();
                    $form.find('.errorText[data-error="' + i + '"]').closest('form-group').find('input').removeClass('valid').addClass('is-invalid');
                });
            } else {
                if (typeof obj.header != "undefined" && obj.header !== null) {
                    $('.total-price-form').remove();
                    $('.cart-content-form').remove();

                    $(obj.header).insertBefore($form);
                    $form[0].reset();
                }

                if (typeof obj.cart != "undefined" && obj.cart !== null) {
                    $('.inputs-wrapper--shopping').replaceWith(obj.cart);
                    $('.shopping-card--icon .notification-circle').html(obj.cartCount);
                }

                if (typeof obj.isGuest != "undefined" && obj.isGuest !== null) {
                    $('.hamburger').trigger('click');
                    $('.b-nav__tab.b-nav__tab--second a').trigger('click');
                }

                if (typeof obj.redirect != "undefined" && obj.redirect !== null) {
                    window.location.href = obj.redirect;
                }
            }
        }
    };

    var options_user_filter_form = {
        success: function success(data, statusText, xhr, $form) {
            $.MCustomLoader(false);

            if (typeof $(data)[2] != 'undefined') {
                $('.orders-content-main').replaceWith($(data)[2]);

                $('.orders-content-main').find('.selectpicker').selectpicker();
            }
        }
    };

    var options_declaration_form = {
        success: function success(data, statusText, xhr, $form) {
            $.MCustomLoader(false);
            $form.find('input').removeClass('is-invalid').addClass('valid');
            $form.find('.errorText').hide().html('');

            var obj = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) != 'object' ? $.parseJSON(data) : data;
            if (typeof obj.errors != "undefined" && obj.errors !== null) {
                var errors = typeof obj.errors == 'string' ? $.parseJSON(obj.errors) : obj.errors;
                $.each(errors, function (i, val) {
                    $form.find('.errorText[data-error="' + i + '"]').html(val[0]).show();
                    $form.find('.errorText[data-error="' + i + '"]').closest('form-group').find('input').removeClass('valid').addClass('is-invalid');
                });
            } else {
                if (typeof obj.success != "undefined" && obj.success !== null) {
                    swal({
                        title: obj.success,
                        text: "",
                        type: "success",
                        timer: 3000,
                        showConfirmButton: false
                    });
                }

                if (typeof obj.redirect != "undefined" && obj.redirect !== null) window.setTimeout(function () {
                    window.location.href = obj.redirect;
                }, 4100);
            }
        }
    };
});

},{}],6:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.jquery331Min = mod.exports;
  }
})(undefined, function (module) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
  !function (e, t) {
    "use strict";

    "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = e.document ? t(e, !0) : function (e) {
      if (!e.document) throw new Error("jQuery requires a window with a document");return t(e);
    } : t(e);
  }("undefined" != typeof window ? window : undefined, function (e, t) {
    "use strict";

    var n = [],
        r = e.document,
        i = Object.getPrototypeOf,
        o = n.slice,
        a = n.concat,
        s = n.push,
        u = n.indexOf,
        l = {},
        c = l.toString,
        f = l.hasOwnProperty,
        p = f.toString,
        d = p.call(Object),
        h = {},
        g = function e(t) {
      return "function" == typeof t && "number" != typeof t.nodeType;
    },
        y = function e(t) {
      return null != t && t === t.window;
    },
        v = { type: !0, src: !0, noModule: !0 };function m(e, t, n) {
      var i,
          o = (t = t || r).createElement("script");if (o.text = e, n) for (i in v) {
        n[i] && (o[i] = n[i]);
      }t.head.appendChild(o).parentNode.removeChild(o);
    }function x(e) {
      return null == e ? e + "" : "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || "function" == typeof e ? l[c.call(e)] || "object" : typeof e === "undefined" ? "undefined" : _typeof(e);
    }var b = "3.3.1",
        w = function w(e, t) {
      return new w.fn.init(e, t);
    },
        T = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.fn = w.prototype = { jquery: "3.3.1", constructor: w, length: 0, toArray: function toArray() {
        return o.call(this);
      }, get: function get(e) {
        return null == e ? o.call(this) : e < 0 ? this[e + this.length] : this[e];
      }, pushStack: function pushStack(e) {
        var t = w.merge(this.constructor(), e);return t.prevObject = this, t;
      }, each: function each(e) {
        return w.each(this, e);
      }, map: function map(e) {
        return this.pushStack(w.map(this, function (t, n) {
          return e.call(t, n, t);
        }));
      }, slice: function slice() {
        return this.pushStack(o.apply(this, arguments));
      }, first: function first() {
        return this.eq(0);
      }, last: function last() {
        return this.eq(-1);
      }, eq: function eq(e) {
        var t = this.length,
            n = +e + (e < 0 ? t : 0);return this.pushStack(n >= 0 && n < t ? [this[n]] : []);
      }, end: function end() {
        return this.prevObject || this.constructor();
      }, push: s, sort: n.sort, splice: n.splice }, w.extend = w.fn.extend = function () {
      var e,
          t,
          n,
          r,
          i,
          o,
          a = arguments[0] || {},
          s = 1,
          u = arguments.length,
          l = !1;for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || g(a) || (a = {}), s === u && (a = this, s--); s < u; s++) {
        if (null != (e = arguments[s])) for (t in e) {
          n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n) ? n : []) : o = n && w.isPlainObject(n) ? n : {}, a[t] = w.extend(l, o, r)) : void 0 !== r && (a[t] = r));
        }
      }return a;
    }, w.extend({ expando: "jQuery" + ("3.3.1" + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(e) {
        throw new Error(e);
      }, noop: function noop() {}, isPlainObject: function isPlainObject(e) {
        var t, n;return !(!e || "[object Object]" !== c.call(e)) && (!(t = i(e)) || "function" == typeof (n = f.call(t, "constructor") && t.constructor) && p.call(n) === d);
      }, isEmptyObject: function isEmptyObject(e) {
        var t;for (t in e) {
          return !1;
        }return !0;
      }, globalEval: function globalEval(e) {
        m(e);
      }, each: function each(e, t) {
        var n,
            r = 0;if (C(e)) {
          for (n = e.length; r < n; r++) {
            if (!1 === t.call(e[r], r, e[r])) break;
          }
        } else for (r in e) {
          if (!1 === t.call(e[r], r, e[r])) break;
        }return e;
      }, trim: function trim(e) {
        return null == e ? "" : (e + "").replace(T, "");
      }, makeArray: function makeArray(e, t) {
        var n = t || [];return null != e && (C(Object(e)) ? w.merge(n, "string" == typeof e ? [e] : e) : s.call(n, e)), n;
      }, inArray: function inArray(e, t, n) {
        return null == t ? -1 : u.call(t, e, n);
      }, merge: function merge(e, t) {
        for (var n = +t.length, r = 0, i = e.length; r < n; r++) {
          e[i++] = t[r];
        }return e.length = i, e;
      }, grep: function grep(e, t, n) {
        for (var r, i = [], o = 0, a = e.length, s = !n; o < a; o++) {
          (r = !t(e[o], o)) !== s && i.push(e[o]);
        }return i;
      }, map: function map(e, t, n) {
        var r,
            i,
            o = 0,
            s = [];if (C(e)) for (r = e.length; o < r; o++) {
          null != (i = t(e[o], o, n)) && s.push(i);
        } else for (o in e) {
          null != (i = t(e[o], o, n)) && s.push(i);
        }return a.apply([], s);
      }, guid: 1, support: h }), "function" == typeof Symbol && (w.fn[Symbol.iterator] = n[Symbol.iterator]), w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) {
      l["[object " + t + "]"] = t.toLowerCase();
    });function C(e) {
      var t = !!e && "length" in e && e.length,
          n = x(e);return !g(e) && !y(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
    }var E = function (e) {
      var t,
          n,
          r,
          i,
          o,
          a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h,
          g,
          y,
          v,
          m,
          x,
          b = "sizzle" + 1 * new Date(),
          w = e.document,
          T = 0,
          C = 0,
          E = ae(),
          k = ae(),
          S = ae(),
          D = function D(e, t) {
        return e === t && (f = !0), 0;
      },
          N = {}.hasOwnProperty,
          A = [],
          j = A.pop,
          q = A.push,
          L = A.push,
          H = A.slice,
          O = function O(e, t) {
        for (var n = 0, r = e.length; n < r; n++) {
          if (e[n] === t) return n;
        }return -1;
      },
          P = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
          M = "[\\x20\\t\\r\\n\\f]",
          R = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
          I = "\\[" + M + "*(" + R + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + R + "))|)" + M + "*\\]",
          W = ":(" + R + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + I + ")*)|.*)\\)|)",
          $ = new RegExp(M + "+", "g"),
          B = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
          F = new RegExp("^" + M + "*," + M + "*"),
          _ = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
          z = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
          X = new RegExp(W),
          U = new RegExp("^" + R + "$"),
          V = { ID: new RegExp("^#(" + R + ")"), CLASS: new RegExp("^\\.(" + R + ")"), TAG: new RegExp("^(" + R + "|[*])"), ATTR: new RegExp("^" + I), PSEUDO: new RegExp("^" + W), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"), bool: new RegExp("^(?:" + P + ")$", "i"), needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i") },
          G = /^(?:input|select|textarea|button)$/i,
          Y = /^h\d$/i,
          Q = /^[^{]+\{\s*\[native \w/,
          J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
          K = /[+~]/,
          Z = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
          ee = function ee(e, t, n) {
        var r = "0x" + t - 65536;return r !== r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
      },
          te = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
          ne = function ne(e, t) {
        return t ? "\0" === e ? "\uFFFD" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
      },
          re = function re() {
        p();
      },
          ie = me(function (e) {
        return !0 === e.disabled && ("form" in e || "label" in e);
      }, { dir: "parentNode", next: "legend" });try {
        L.apply(A = H.call(w.childNodes), w.childNodes), A[w.childNodes.length].nodeType;
      } catch (e) {
        L = { apply: A.length ? function (e, t) {
            q.apply(e, H.call(t));
          } : function (e, t) {
            var n = e.length,
                r = 0;while (e[n++] = t[r++]) {}e.length = n - 1;
          } };
      }function oe(e, t, r, i) {
        var o,
            s,
            l,
            c,
            f,
            h,
            v,
            m = t && t.ownerDocument,
            T = t ? t.nodeType : 9;if (r = r || [], "string" != typeof e || !e || 1 !== T && 9 !== T && 11 !== T) return r;if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, g)) {
          if (11 !== T && (f = J.exec(e))) if (o = f[1]) {
            if (9 === T) {
              if (!(l = t.getElementById(o))) return r;if (l.id === o) return r.push(l), r;
            } else if (m && (l = m.getElementById(o)) && x(t, l) && l.id === o) return r.push(l), r;
          } else {
            if (f[2]) return L.apply(r, t.getElementsByTagName(e)), r;if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return L.apply(r, t.getElementsByClassName(o)), r;
          }if (n.qsa && !S[e + " "] && (!y || !y.test(e))) {
            if (1 !== T) m = t, v = e;else if ("object" !== t.nodeName.toLowerCase()) {
              (c = t.getAttribute("id")) ? c = c.replace(te, ne) : t.setAttribute("id", c = b), s = (h = a(e)).length;while (s--) {
                h[s] = "#" + c + " " + ve(h[s]);
              }v = h.join(","), m = K.test(e) && ge(t.parentNode) || t;
            }if (v) try {
              return L.apply(r, m.querySelectorAll(v)), r;
            } catch (e) {} finally {
              c === b && t.removeAttribute("id");
            }
          }
        }return u(e.replace(B, "$1"), t, r, i);
      }function ae() {
        var e = [];function t(n, i) {
          return e.push(n + " ") > r.cacheLength && delete t[e.shift()], t[n + " "] = i;
        }return t;
      }function se(e) {
        return e[b] = !0, e;
      }function ue(e) {
        var t = d.createElement("fieldset");try {
          return !!e(t);
        } catch (e) {
          return !1;
        } finally {
          t.parentNode && t.parentNode.removeChild(t), t = null;
        }
      }function le(e, t) {
        var n = e.split("|"),
            i = n.length;while (i--) {
          r.attrHandle[n[i]] = t;
        }
      }function ce(e, t) {
        var n = t && e,
            r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;if (r) return r;if (n) while (n = n.nextSibling) {
          if (n === t) return -1;
        }return e ? 1 : -1;
      }function fe(e) {
        return function (t) {
          return "input" === t.nodeName.toLowerCase() && t.type === e;
        };
      }function pe(e) {
        return function (t) {
          var n = t.nodeName.toLowerCase();return ("input" === n || "button" === n) && t.type === e;
        };
      }function de(e) {
        return function (t) {
          return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ie(t) === e : t.disabled === e : "label" in t && t.disabled === e;
        };
      }function he(e) {
        return se(function (t) {
          return t = +t, se(function (n, r) {
            var i,
                o = e([], n.length, t),
                a = o.length;while (a--) {
              n[i = o[a]] && (n[i] = !(r[i] = n[i]));
            }
          });
        });
      }function ge(e) {
        return e && "undefined" != typeof e.getElementsByTagName && e;
      }n = oe.support = {}, o = oe.isXML = function (e) {
        var t = e && (e.ownerDocument || e).documentElement;return !!t && "HTML" !== t.nodeName;
      }, p = oe.setDocument = function (e) {
        var t,
            i,
            a = e ? e.ownerDocument || e : w;return a !== d && 9 === a.nodeType && a.documentElement ? (d = a, h = d.documentElement, g = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", re, !1) : i.attachEvent && i.attachEvent("onunload", re)), n.attributes = ue(function (e) {
          return e.className = "i", !e.getAttribute("className");
        }), n.getElementsByTagName = ue(function (e) {
          return e.appendChild(d.createComment("")), !e.getElementsByTagName("*").length;
        }), n.getElementsByClassName = Q.test(d.getElementsByClassName), n.getById = ue(function (e) {
          return h.appendChild(e).id = b, !d.getElementsByName || !d.getElementsByName(b).length;
        }), n.getById ? (r.filter.ID = function (e) {
          var t = e.replace(Z, ee);return function (e) {
            return e.getAttribute("id") === t;
          };
        }, r.find.ID = function (e, t) {
          if ("undefined" != typeof t.getElementById && g) {
            var n = t.getElementById(e);return n ? [n] : [];
          }
        }) : (r.filter.ID = function (e) {
          var t = e.replace(Z, ee);return function (e) {
            var n = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");return n && n.value === t;
          };
        }, r.find.ID = function (e, t) {
          if ("undefined" != typeof t.getElementById && g) {
            var n,
                r,
                i,
                o = t.getElementById(e);if (o) {
              if ((n = o.getAttributeNode("id")) && n.value === e) return [o];i = t.getElementsByName(e), r = 0;while (o = i[r++]) {
                if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
              }
            }return [];
          }
        }), r.find.TAG = n.getElementsByTagName ? function (e, t) {
          return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0;
        } : function (e, t) {
          var n,
              r = [],
              i = 0,
              o = t.getElementsByTagName(e);if ("*" === e) {
            while (n = o[i++]) {
              1 === n.nodeType && r.push(n);
            }return r;
          }return o;
        }, r.find.CLASS = n.getElementsByClassName && function (e, t) {
          if ("undefined" != typeof t.getElementsByClassName && g) return t.getElementsByClassName(e);
        }, v = [], y = [], (n.qsa = Q.test(d.querySelectorAll)) && (ue(function (e) {
          h.appendChild(e).innerHTML = "<a id='" + b + "'></a><select id='" + b + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && y.push("[*^$]=" + M + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || y.push("\\[" + M + "*(?:value|" + P + ")"), e.querySelectorAll("[id~=" + b + "-]").length || y.push("~="), e.querySelectorAll(":checked").length || y.push(":checked"), e.querySelectorAll("a#" + b + "+*").length || y.push(".#.+[+~]");
        }), ue(function (e) {
          e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t = d.createElement("input");t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && y.push("name" + M + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled").length && y.push(":enabled", ":disabled"), h.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && y.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), y.push(",.*:");
        })), (n.matchesSelector = Q.test(m = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue(function (e) {
          n.disconnectedMatch = m.call(e, "*"), m.call(e, "[s!='']:x"), v.push("!=", W);
        }), y = y.length && new RegExp(y.join("|")), v = v.length && new RegExp(v.join("|")), t = Q.test(h.compareDocumentPosition), x = t || Q.test(h.contains) ? function (e, t) {
          var n = 9 === e.nodeType ? e.documentElement : e,
              r = t && t.parentNode;return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
        } : function (e, t) {
          if (t) while (t = t.parentNode) {
            if (t === e) return !0;
          }return !1;
        }, D = t ? function (e, t) {
          if (e === t) return f = !0, 0;var r = !e.compareDocumentPosition - !t.compareDocumentPosition;return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && x(w, e) ? -1 : t === d || t.ownerDocument === w && x(w, t) ? 1 : c ? O(c, e) - O(c, t) : 0 : 4 & r ? -1 : 1);
        } : function (e, t) {
          if (e === t) return f = !0, 0;var n,
              r = 0,
              i = e.parentNode,
              o = t.parentNode,
              a = [e],
              s = [t];if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : c ? O(c, e) - O(c, t) : 0;if (i === o) return ce(e, t);n = e;while (n = n.parentNode) {
            a.unshift(n);
          }n = t;while (n = n.parentNode) {
            s.unshift(n);
          }while (a[r] === s[r]) {
            r++;
          }return r ? ce(a[r], s[r]) : a[r] === w ? -1 : s[r] === w ? 1 : 0;
        }, d) : d;
      }, oe.matches = function (e, t) {
        return oe(e, null, null, t);
      }, oe.matchesSelector = function (e, t) {
        if ((e.ownerDocument || e) !== d && p(e), t = t.replace(z, "='$1']"), n.matchesSelector && g && !S[t + " "] && (!v || !v.test(t)) && (!y || !y.test(t))) try {
          var r = m.call(e, t);if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
        } catch (e) {}return oe(t, d, null, [e]).length > 0;
      }, oe.contains = function (e, t) {
        return (e.ownerDocument || e) !== d && p(e), x(e, t);
      }, oe.attr = function (e, t) {
        (e.ownerDocument || e) !== d && p(e);var i = r.attrHandle[t.toLowerCase()],
            o = i && N.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !g) : void 0;return void 0 !== o ? o : n.attributes || !g ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;
      }, oe.escape = function (e) {
        return (e + "").replace(te, ne);
      }, oe.error = function (e) {
        throw new Error("Syntax error, unrecognized expression: " + e);
      }, oe.uniqueSort = function (e) {
        var t,
            r = [],
            i = 0,
            o = 0;if (f = !n.detectDuplicates, c = !n.sortStable && e.slice(0), e.sort(D), f) {
          while (t = e[o++]) {
            t === e[o] && (i = r.push(o));
          }while (i--) {
            e.splice(r[i], 1);
          }
        }return c = null, e;
      }, i = oe.getText = function (e) {
        var t,
            n = "",
            r = 0,
            o = e.nodeType;if (o) {
          if (1 === o || 9 === o || 11 === o) {
            if ("string" == typeof e.textContent) return e.textContent;for (e = e.firstChild; e; e = e.nextSibling) {
              n += i(e);
            }
          } else if (3 === o || 4 === o) return e.nodeValue;
        } else while (t = e[r++]) {
          n += i(t);
        }return n;
      }, (r = oe.selectors = { cacheLength: 50, createPseudo: se, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(e) {
            return e[1] = e[1].replace(Z, ee), e[3] = (e[3] || e[4] || e[5] || "").replace(Z, ee), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
          }, CHILD: function CHILD(e) {
            return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && oe.error(e[0]), e;
          }, PSEUDO: function PSEUDO(e) {
            var t,
                n = !e[6] && e[2];return V.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = a(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
          } }, filter: { TAG: function TAG(e) {
            var t = e.replace(Z, ee).toLowerCase();return "*" === e ? function () {
              return !0;
            } : function (e) {
              return e.nodeName && e.nodeName.toLowerCase() === t;
            };
          }, CLASS: function CLASS(e) {
            var t = E[e + " "];return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && E(e, function (e) {
              return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
            });
          }, ATTR: function ATTR(e, t, n) {
            return function (r) {
              var i = oe.attr(r, e);return null == i ? "!=" === t : !t || (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i.replace($, " ") + " ").indexOf(n) > -1 : "|=" === t && (i === n || i.slice(0, n.length + 1) === n + "-"));
            };
          }, CHILD: function CHILD(e, t, n, r, i) {
            var o = "nth" !== e.slice(0, 3),
                a = "last" !== e.slice(-4),
                s = "of-type" === t;return 1 === r && 0 === i ? function (e) {
              return !!e.parentNode;
            } : function (t, n, u) {
              var l,
                  c,
                  f,
                  p,
                  d,
                  h,
                  g = o !== a ? "nextSibling" : "previousSibling",
                  y = t.parentNode,
                  v = s && t.nodeName.toLowerCase(),
                  m = !u && !s,
                  x = !1;if (y) {
                if (o) {
                  while (g) {
                    p = t;while (p = p[g]) {
                      if (s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) return !1;
                    }h = g = "only" === e && !h && "nextSibling";
                  }return !0;
                }if (h = [a ? y.firstChild : y.lastChild], a && m) {
                  x = (d = (l = (c = (f = (p = y)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]) && l[2], p = d && y.childNodes[d];while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) {
                    if (1 === p.nodeType && ++x && p === t) {
                      c[e] = [T, d, x];break;
                    }
                  }
                } else if (m && (x = d = (l = (c = (f = (p = t)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]), !1 === x) while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) {
                  if ((s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) && ++x && (m && ((c = (f = p[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, x]), p === t)) break;
                }return (x -= i) === r || x % r == 0 && x / r >= 0;
              }
            };
          }, PSEUDO: function PSEUDO(e, t) {
            var n,
                i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || oe.error("unsupported pseudo: " + e);return i[b] ? i(t) : i.length > 1 ? (n = [e, e, "", t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? se(function (e, n) {
              var r,
                  o = i(e, t),
                  a = o.length;while (a--) {
                e[r = O(e, o[a])] = !(n[r] = o[a]);
              }
            }) : function (e) {
              return i(e, 0, n);
            }) : i;
          } }, pseudos: { not: se(function (e) {
            var t = [],
                n = [],
                r = s(e.replace(B, "$1"));return r[b] ? se(function (e, t, n, i) {
              var o,
                  a = r(e, null, i, []),
                  s = e.length;while (s--) {
                (o = a[s]) && (e[s] = !(t[s] = o));
              }
            }) : function (e, i, o) {
              return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop();
            };
          }), has: se(function (e) {
            return function (t) {
              return oe(e, t).length > 0;
            };
          }), contains: se(function (e) {
            return e = e.replace(Z, ee), function (t) {
              return (t.textContent || t.innerText || i(t)).indexOf(e) > -1;
            };
          }), lang: se(function (e) {
            return U.test(e || "") || oe.error("unsupported lang: " + e), e = e.replace(Z, ee).toLowerCase(), function (t) {
              var n;do {
                if (n = g ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-");
              } while ((t = t.parentNode) && 1 === t.nodeType);return !1;
            };
          }), target: function target(t) {
            var n = e.location && e.location.hash;return n && n.slice(1) === t.id;
          }, root: function root(e) {
            return e === h;
          }, focus: function focus(e) {
            return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
          }, enabled: de(!1), disabled: de(!0), checked: function checked(e) {
            var t = e.nodeName.toLowerCase();return "input" === t && !!e.checked || "option" === t && !!e.selected;
          }, selected: function selected(e) {
            return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
          }, empty: function empty(e) {
            for (e = e.firstChild; e; e = e.nextSibling) {
              if (e.nodeType < 6) return !1;
            }return !0;
          }, parent: function parent(e) {
            return !r.pseudos.empty(e);
          }, header: function header(e) {
            return Y.test(e.nodeName);
          }, input: function input(e) {
            return G.test(e.nodeName);
          }, button: function button(e) {
            var t = e.nodeName.toLowerCase();return "input" === t && "button" === e.type || "button" === t;
          }, text: function text(e) {
            var t;return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
          }, first: he(function () {
            return [0];
          }), last: he(function (e, t) {
            return [t - 1];
          }), eq: he(function (e, t, n) {
            return [n < 0 ? n + t : n];
          }), even: he(function (e, t) {
            for (var n = 0; n < t; n += 2) {
              e.push(n);
            }return e;
          }), odd: he(function (e, t) {
            for (var n = 1; n < t; n += 2) {
              e.push(n);
            }return e;
          }), lt: he(function (e, t, n) {
            for (var r = n < 0 ? n + t : n; --r >= 0;) {
              e.push(r);
            }return e;
          }), gt: he(function (e, t, n) {
            for (var r = n < 0 ? n + t : n; ++r < t;) {
              e.push(r);
            }return e;
          }) } }).pseudos.nth = r.pseudos.eq;for (t in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
        r.pseudos[t] = fe(t);
      }for (t in { submit: !0, reset: !0 }) {
        r.pseudos[t] = pe(t);
      }function ye() {}ye.prototype = r.filters = r.pseudos, r.setFilters = new ye(), a = oe.tokenize = function (e, t) {
        var n,
            i,
            o,
            a,
            s,
            u,
            l,
            c = k[e + " "];if (c) return t ? 0 : c.slice(0);s = e, u = [], l = r.preFilter;while (s) {
          n && !(i = F.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = _.exec(s)) && (n = i.shift(), o.push({ value: n, type: i[0].replace(B, " ") }), s = s.slice(n.length));for (a in r.filter) {
            !(i = V[a].exec(s)) || l[a] && !(i = l[a](i)) || (n = i.shift(), o.push({ value: n, type: a, matches: i }), s = s.slice(n.length));
          }if (!n) break;
        }return t ? s.length : s ? oe.error(e) : k(e, u).slice(0);
      };function ve(e) {
        for (var t = 0, n = e.length, r = ""; t < n; t++) {
          r += e[t].value;
        }return r;
      }function me(e, t, n) {
        var r = t.dir,
            i = t.next,
            o = i || r,
            a = n && "parentNode" === o,
            s = C++;return t.first ? function (t, n, i) {
          while (t = t[r]) {
            if (1 === t.nodeType || a) return e(t, n, i);
          }return !1;
        } : function (t, n, u) {
          var l,
              c,
              f,
              p = [T, s];if (u) {
            while (t = t[r]) {
              if ((1 === t.nodeType || a) && e(t, n, u)) return !0;
            }
          } else while (t = t[r]) {
            if (1 === t.nodeType || a) if (f = t[b] || (t[b] = {}), c = f[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;else {
              if ((l = c[o]) && l[0] === T && l[1] === s) return p[2] = l[2];if (c[o] = p, p[2] = e(t, n, u)) return !0;
            }
          }return !1;
        };
      }function xe(e) {
        return e.length > 1 ? function (t, n, r) {
          var i = e.length;while (i--) {
            if (!e[i](t, n, r)) return !1;
          }return !0;
        } : e[0];
      }function be(e, t, n) {
        for (var r = 0, i = t.length; r < i; r++) {
          oe(e, t[r], n);
        }return n;
      }function we(e, t, n, r, i) {
        for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) {
          (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));
        }return a;
      }function Te(e, t, n, r, i, o) {
        return r && !r[b] && (r = Te(r)), i && !i[b] && (i = Te(i, o)), se(function (o, a, s, u) {
          var l,
              c,
              f,
              p = [],
              d = [],
              h = a.length,
              g = o || be(t || "*", s.nodeType ? [s] : s, []),
              y = !e || !o && t ? g : we(g, p, e, s, u),
              v = n ? i || (o ? e : h || r) ? [] : a : y;if (n && n(y, v, s, u), r) {
            l = we(v, d), r(l, [], s, u), c = l.length;while (c--) {
              (f = l[c]) && (v[d[c]] = !(y[d[c]] = f));
            }
          }if (o) {
            if (i || e) {
              if (i) {
                l = [], c = v.length;while (c--) {
                  (f = v[c]) && l.push(y[c] = f);
                }i(null, v = [], l, u);
              }c = v.length;while (c--) {
                (f = v[c]) && (l = i ? O(o, f) : p[c]) > -1 && (o[l] = !(a[l] = f));
              }
            }
          } else v = we(v === a ? v.splice(h, v.length) : v), i ? i(null, a, v, u) : L.apply(a, v);
        });
      }function Ce(e) {
        for (var t, n, i, o = e.length, a = r.relative[e[0].type], s = a || r.relative[" "], u = a ? 1 : 0, c = me(function (e) {
          return e === t;
        }, s, !0), f = me(function (e) {
          return O(t, e) > -1;
        }, s, !0), p = [function (e, n, r) {
          var i = !a && (r || n !== l) || ((t = n).nodeType ? c(e, n, r) : f(e, n, r));return t = null, i;
        }]; u < o; u++) {
          if (n = r.relative[e[u].type]) p = [me(xe(p), n)];else {
            if ((n = r.filter[e[u].type].apply(null, e[u].matches))[b]) {
              for (i = ++u; i < o; i++) {
                if (r.relative[e[i].type]) break;
              }return Te(u > 1 && xe(p), u > 1 && ve(e.slice(0, u - 1).concat({ value: " " === e[u - 2].type ? "*" : "" })).replace(B, "$1"), n, u < i && Ce(e.slice(u, i)), i < o && Ce(e = e.slice(i)), i < o && ve(e));
            }p.push(n);
          }
        }return xe(p);
      }function Ee(e, t) {
        var n = t.length > 0,
            i = e.length > 0,
            o = function o(_o, a, s, u, c) {
          var f,
              h,
              y,
              v = 0,
              m = "0",
              x = _o && [],
              b = [],
              w = l,
              C = _o || i && r.find.TAG("*", c),
              E = T += null == w ? 1 : Math.random() || .1,
              k = C.length;for (c && (l = a === d || a || c); m !== k && null != (f = C[m]); m++) {
            if (i && f) {
              h = 0, a || f.ownerDocument === d || (p(f), s = !g);while (y = e[h++]) {
                if (y(f, a || d, s)) {
                  u.push(f);break;
                }
              }c && (T = E);
            }n && ((f = !y && f) && v--, _o && x.push(f));
          }if (v += m, n && m !== v) {
            h = 0;while (y = t[h++]) {
              y(x, b, a, s);
            }if (_o) {
              if (v > 0) while (m--) {
                x[m] || b[m] || (b[m] = j.call(u));
              }b = we(b);
            }L.apply(u, b), c && !_o && b.length > 0 && v + t.length > 1 && oe.uniqueSort(u);
          }return c && (T = E, l = w), x;
        };return n ? se(o) : o;
      }return s = oe.compile = function (e, t) {
        var n,
            r = [],
            i = [],
            o = S[e + " "];if (!o) {
          t || (t = a(e)), n = t.length;while (n--) {
            (o = Ce(t[n]))[b] ? r.push(o) : i.push(o);
          }(o = S(e, Ee(i, r))).selector = e;
        }return o;
      }, u = oe.select = function (e, t, n, i) {
        var o,
            u,
            l,
            c,
            f,
            p = "function" == typeof e && e,
            d = !i && a(e = p.selector || e);if (n = n || [], 1 === d.length) {
          if ((u = d[0] = d[0].slice(0)).length > 2 && "ID" === (l = u[0]).type && 9 === t.nodeType && g && r.relative[u[1].type]) {
            if (!(t = (r.find.ID(l.matches[0].replace(Z, ee), t) || [])[0])) return n;p && (t = t.parentNode), e = e.slice(u.shift().value.length);
          }o = V.needsContext.test(e) ? 0 : u.length;while (o--) {
            if (l = u[o], r.relative[c = l.type]) break;if ((f = r.find[c]) && (i = f(l.matches[0].replace(Z, ee), K.test(u[0].type) && ge(t.parentNode) || t))) {
              if (u.splice(o, 1), !(e = i.length && ve(u))) return L.apply(n, i), n;break;
            }
          }
        }return (p || s(e, d))(i, t, !g, n, !t || K.test(e) && ge(t.parentNode) || t), n;
      }, n.sortStable = b.split("").sort(D).join("") === b, n.detectDuplicates = !!f, p(), n.sortDetached = ue(function (e) {
        return 1 & e.compareDocumentPosition(d.createElement("fieldset"));
      }), ue(function (e) {
        return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
      }) || le("type|href|height|width", function (e, t, n) {
        if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
      }), n.attributes && ue(function (e) {
        return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
      }) || le("value", function (e, t, n) {
        if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
      }), ue(function (e) {
        return null == e.getAttribute("disabled");
      }) || le(P, function (e, t, n) {
        var r;if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
      }), oe;
    }(e);w.find = E, w.expr = E.selectors, w.expr[":"] = w.expr.pseudos, w.uniqueSort = w.unique = E.uniqueSort, w.text = E.getText, w.isXMLDoc = E.isXML, w.contains = E.contains, w.escapeSelector = E.escape;var k = function k(e, t, n) {
      var r = [],
          i = void 0 !== n;while ((e = e[t]) && 9 !== e.nodeType) {
        if (1 === e.nodeType) {
          if (i && w(e).is(n)) break;r.push(e);
        }
      }return r;
    },
        S = function S(e, t) {
      for (var n = []; e; e = e.nextSibling) {
        1 === e.nodeType && e !== t && n.push(e);
      }return n;
    },
        D = w.expr.match.needsContext;function N(e, t) {
      return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }var A = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e, t, n) {
      return g(t) ? w.grep(e, function (e, r) {
        return !!t.call(e, r, e) !== n;
      }) : t.nodeType ? w.grep(e, function (e) {
        return e === t !== n;
      }) : "string" != typeof t ? w.grep(e, function (e) {
        return u.call(t, e) > -1 !== n;
      }) : w.filter(t, e, n);
    }w.filter = function (e, t, n) {
      var r = t[0];return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? w.find.matchesSelector(r, e) ? [r] : [] : w.find.matches(e, w.grep(t, function (e) {
        return 1 === e.nodeType;
      }));
    }, w.fn.extend({ find: function find(e) {
        var t,
            n,
            r = this.length,
            i = this;if ("string" != typeof e) return this.pushStack(w(e).filter(function () {
          for (t = 0; t < r; t++) {
            if (w.contains(i[t], this)) return !0;
          }
        }));for (n = this.pushStack([]), t = 0; t < r; t++) {
          w.find(e, i[t], n);
        }return r > 1 ? w.uniqueSort(n) : n;
      }, filter: function filter(e) {
        return this.pushStack(j(this, e || [], !1));
      }, not: function not(e) {
        return this.pushStack(j(this, e || [], !0));
      }, is: function is(e) {
        return !!j(this, "string" == typeof e && D.test(e) ? w(e) : e || [], !1).length;
      } });var q,
        L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init = function (e, t, n) {
      var i, o;if (!e) return this;if (n = n || q, "string" == typeof e) {
        if (!(i = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : L.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);if (i[1]) {
          if (t = t instanceof w ? t[0] : t, w.merge(this, w.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : r, !0)), A.test(i[1]) && w.isPlainObject(t)) for (i in t) {
            g(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);
          }return this;
        }return (o = r.getElementById(i[2])) && (this[0] = o, this.length = 1), this;
      }return e.nodeType ? (this[0] = e, this.length = 1, this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(w) : w.makeArray(e, this);
    }).prototype = w.fn, q = w(r);var H = /^(?:parents|prev(?:Until|All))/,
        O = { children: !0, contents: !0, next: !0, prev: !0 };w.fn.extend({ has: function has(e) {
        var t = w(e, this),
            n = t.length;return this.filter(function () {
          for (var e = 0; e < n; e++) {
            if (w.contains(this, t[e])) return !0;
          }
        });
      }, closest: function closest(e, t) {
        var n,
            r = 0,
            i = this.length,
            o = [],
            a = "string" != typeof e && w(e);if (!D.test(e)) for (; r < i; r++) {
          for (n = this[r]; n && n !== t; n = n.parentNode) {
            if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && w.find.matchesSelector(n, e))) {
              o.push(n);break;
            }
          }
        }return this.pushStack(o.length > 1 ? w.uniqueSort(o) : o);
      }, index: function index(e) {
        return e ? "string" == typeof e ? u.call(w(e), this[0]) : u.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }, add: function add(e, t) {
        return this.pushStack(w.uniqueSort(w.merge(this.get(), w(e, t))));
      }, addBack: function addBack(e) {
        return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
      } });function P(e, t) {
      while ((e = e[t]) && 1 !== e.nodeType) {}return e;
    }w.each({ parent: function parent(e) {
        var t = e.parentNode;return t && 11 !== t.nodeType ? t : null;
      }, parents: function parents(e) {
        return k(e, "parentNode");
      }, parentsUntil: function parentsUntil(e, t, n) {
        return k(e, "parentNode", n);
      }, next: function next(e) {
        return P(e, "nextSibling");
      }, prev: function prev(e) {
        return P(e, "previousSibling");
      }, nextAll: function nextAll(e) {
        return k(e, "nextSibling");
      }, prevAll: function prevAll(e) {
        return k(e, "previousSibling");
      }, nextUntil: function nextUntil(e, t, n) {
        return k(e, "nextSibling", n);
      }, prevUntil: function prevUntil(e, t, n) {
        return k(e, "previousSibling", n);
      }, siblings: function siblings(e) {
        return S((e.parentNode || {}).firstChild, e);
      }, children: function children(e) {
        return S(e.firstChild);
      }, contents: function contents(e) {
        return N(e, "iframe") ? e.contentDocument : (N(e, "template") && (e = e.content || e), w.merge([], e.childNodes));
      } }, function (e, t) {
      w.fn[e] = function (n, r) {
        var i = w.map(this, t, n);return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = w.filter(r, i)), this.length > 1 && (O[e] || w.uniqueSort(i), H.test(e) && i.reverse()), this.pushStack(i);
      };
    });var M = /[^\x20\t\r\n\f]+/g;function R(e) {
      var t = {};return w.each(e.match(M) || [], function (e, n) {
        t[n] = !0;
      }), t;
    }w.Callbacks = function (e) {
      e = "string" == typeof e ? R(e) : w.extend({}, e);var t,
          n,
          r,
          i,
          o = [],
          a = [],
          s = -1,
          u = function u() {
        for (i = i || e.once, r = t = !0; a.length; s = -1) {
          n = a.shift();while (++s < o.length) {
            !1 === o[s].apply(n[0], n[1]) && e.stopOnFalse && (s = o.length, n = !1);
          }
        }e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
      },
          l = { add: function add() {
          return o && (n && !t && (s = o.length - 1, a.push(n)), function t(n) {
            w.each(n, function (n, r) {
              g(r) ? e.unique && l.has(r) || o.push(r) : r && r.length && "string" !== x(r) && t(r);
            });
          }(arguments), n && !t && u()), this;
        }, remove: function remove() {
          return w.each(arguments, function (e, t) {
            var n;while ((n = w.inArray(t, o, n)) > -1) {
              o.splice(n, 1), n <= s && s--;
            }
          }), this;
        }, has: function has(e) {
          return e ? w.inArray(e, o) > -1 : o.length > 0;
        }, empty: function empty() {
          return o && (o = []), this;
        }, disable: function disable() {
          return i = a = [], o = n = "", this;
        }, disabled: function disabled() {
          return !o;
        }, lock: function lock() {
          return i = a = [], n || t || (o = n = ""), this;
        }, locked: function locked() {
          return !!i;
        }, fireWith: function fireWith(e, n) {
          return i || (n = [e, (n = n || []).slice ? n.slice() : n], a.push(n), t || u()), this;
        }, fire: function fire() {
          return l.fireWith(this, arguments), this;
        }, fired: function fired() {
          return !!r;
        } };return l;
    };function I(e) {
      return e;
    }function W(e) {
      throw e;
    }function $(e, t, n, r) {
      var i;try {
        e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));
      } catch (e) {
        n.apply(void 0, [e]);
      }
    }w.extend({ Deferred: function Deferred(t) {
        var n = [["notify", "progress", w.Callbacks("memory"), w.Callbacks("memory"), 2], ["resolve", "done", w.Callbacks("once memory"), w.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", w.Callbacks("once memory"), w.Callbacks("once memory"), 1, "rejected"]],
            r = "pending",
            i = { state: function state() {
            return r;
          }, always: function always() {
            return o.done(arguments).fail(arguments), this;
          }, "catch": function _catch(e) {
            return i.then(null, e);
          }, pipe: function pipe() {
            var e = arguments;return w.Deferred(function (t) {
              w.each(n, function (n, r) {
                var i = g(e[r[4]]) && e[r[4]];o[r[1]](function () {
                  var e = i && i.apply(this, arguments);e && g(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[r[0] + "With"](this, i ? [e] : arguments);
                });
              }), e = null;
            }).promise();
          }, then: function then(t, r, i) {
            var o = 0;function a(t, n, r, i) {
              return function () {
                var s = this,
                    u = arguments,
                    l = function l() {
                  var e, l;if (!(t < o)) {
                    if ((e = r.apply(s, u)) === n.promise()) throw new TypeError("Thenable self-resolution");l = e && ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) || "function" == typeof e) && e.then, g(l) ? i ? l.call(e, a(o, n, I, i), a(o, n, W, i)) : (o++, l.call(e, a(o, n, I, i), a(o, n, W, i), a(o, n, I, n.notifyWith))) : (r !== I && (s = void 0, u = [e]), (i || n.resolveWith)(s, u));
                  }
                },
                    c = i ? l : function () {
                  try {
                    l();
                  } catch (e) {
                    w.Deferred.exceptionHook && w.Deferred.exceptionHook(e, c.stackTrace), t + 1 >= o && (r !== W && (s = void 0, u = [e]), n.rejectWith(s, u));
                  }
                };t ? c() : (w.Deferred.getStackHook && (c.stackTrace = w.Deferred.getStackHook()), e.setTimeout(c));
              };
            }return w.Deferred(function (e) {
              n[0][3].add(a(0, e, g(i) ? i : I, e.notifyWith)), n[1][3].add(a(0, e, g(t) ? t : I)), n[2][3].add(a(0, e, g(r) ? r : W));
            }).promise();
          }, promise: function promise(e) {
            return null != e ? w.extend(e, i) : i;
          } },
            o = {};return w.each(n, function (e, t) {
          var a = t[2],
              s = t[5];i[t[1]] = a.add, s && a.add(function () {
            r = s;
          }, n[3 - e][2].disable, n[3 - e][3].disable, n[0][2].lock, n[0][3].lock), a.add(t[3].fire), o[t[0]] = function () {
            return o[t[0] + "With"](this === o ? void 0 : this, arguments), this;
          }, o[t[0] + "With"] = a.fireWith;
        }), i.promise(o), t && t.call(o, o), o;
      }, when: function when(e) {
        var t = arguments.length,
            n = t,
            r = Array(n),
            i = o.call(arguments),
            a = w.Deferred(),
            s = function s(e) {
          return function (n) {
            r[e] = this, i[e] = arguments.length > 1 ? o.call(arguments) : n, --t || a.resolveWith(r, i);
          };
        };if (t <= 1 && ($(e, a.done(s(n)).resolve, a.reject, !t), "pending" === a.state() || g(i[n] && i[n].then))) return a.then();while (n--) {
          $(i[n], s(n), a.reject);
        }return a.promise();
      } });var B = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook = function (t, n) {
      e.console && e.console.warn && t && B.test(t.name) && e.console.warn("jQuery.Deferred exception: " + t.message, t.stack, n);
    }, w.readyException = function (t) {
      e.setTimeout(function () {
        throw t;
      });
    };var F = w.Deferred();w.fn.ready = function (e) {
      return F.then(e)["catch"](function (e) {
        w.readyException(e);
      }), this;
    }, w.extend({ isReady: !1, readyWait: 1, ready: function ready(e) {
        (!0 === e ? --w.readyWait : w.isReady) || (w.isReady = !0, !0 !== e && --w.readyWait > 0 || F.resolveWith(r, [w]));
      } }), w.ready.then = F.then;function _() {
      r.removeEventListener("DOMContentLoaded", _), e.removeEventListener("load", _), w.ready();
    }"complete" === r.readyState || "loading" !== r.readyState && !r.documentElement.doScroll ? e.setTimeout(w.ready) : (r.addEventListener("DOMContentLoaded", _), e.addEventListener("load", _));var z = function z(e, t, n, r, i, o, a) {
      var s = 0,
          u = e.length,
          l = null == n;if ("object" === x(n)) {
        i = !0;for (s in n) {
          z(e, t, s, n[s], !0, o, a);
        }
      } else if (void 0 !== r && (i = !0, g(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function t(e, _t2, n) {
        return l.call(w(e), n);
      })), t)) for (; s < u; s++) {
        t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
      }return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
    },
        X = /^-ms-/,
        U = /-([a-z])/g;function V(e, t) {
      return t.toUpperCase();
    }function G(e) {
      return e.replace(X, "ms-").replace(U, V);
    }var Y = function Y(e) {
      return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    };function Q() {
      this.expando = w.expando + Q.uid++;
    }Q.uid = 1, Q.prototype = { cache: function cache(e) {
        var t = e[this.expando];return t || (t = {}, Y(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, { value: t, configurable: !0 }))), t;
      }, set: function set(e, t, n) {
        var r,
            i = this.cache(e);if ("string" == typeof t) i[G(t)] = n;else for (r in t) {
          i[G(r)] = t[r];
        }return i;
      }, get: function get(e, t) {
        return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][G(t)];
      }, access: function access(e, t, n) {
        return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);
      }, remove: function remove(e, t) {
        var n,
            r = e[this.expando];if (void 0 !== r) {
          if (void 0 !== t) {
            n = (t = Array.isArray(t) ? t.map(G) : (t = G(t)) in r ? [t] : t.match(M) || []).length;while (n--) {
              delete r[t[n]];
            }
          }(void 0 === t || w.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
        }
      }, hasData: function hasData(e) {
        var t = e[this.expando];return void 0 !== t && !w.isEmptyObject(t);
      } };var J = new Q(),
        K = new Q(),
        Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        ee = /[A-Z]/g;function te(e) {
      return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : Z.test(e) ? JSON.parse(e) : e);
    }function ne(e, t, n) {
      var r;if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(ee, "-$&").toLowerCase(), "string" == typeof (n = e.getAttribute(r))) {
        try {
          n = te(n);
        } catch (e) {}K.set(e, t, n);
      } else n = void 0;return n;
    }w.extend({ hasData: function hasData(e) {
        return K.hasData(e) || J.hasData(e);
      }, data: function data(e, t, n) {
        return K.access(e, t, n);
      }, removeData: function removeData(e, t) {
        K.remove(e, t);
      }, _data: function _data(e, t, n) {
        return J.access(e, t, n);
      }, _removeData: function _removeData(e, t) {
        J.remove(e, t);
      } }), w.fn.extend({ data: function data(e, t) {
        var n,
            r,
            i,
            o = this[0],
            a = o && o.attributes;if (void 0 === e) {
          if (this.length && (i = K.get(o), 1 === o.nodeType && !J.get(o, "hasDataAttrs"))) {
            n = a.length;while (n--) {
              a[n] && 0 === (r = a[n].name).indexOf("data-") && (r = G(r.slice(5)), ne(o, r, i[r]));
            }J.set(o, "hasDataAttrs", !0);
          }return i;
        }return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? this.each(function () {
          K.set(this, e);
        }) : z(this, function (t) {
          var n;if (o && void 0 === t) {
            if (void 0 !== (n = K.get(o, e))) return n;if (void 0 !== (n = ne(o, e))) return n;
          } else this.each(function () {
            K.set(this, e, t);
          });
        }, null, t, arguments.length > 1, null, !0);
      }, removeData: function removeData(e) {
        return this.each(function () {
          K.remove(this, e);
        });
      } }), w.extend({ queue: function queue(e, t, n) {
        var r;if (e) return t = (t || "fx") + "queue", r = J.get(e, t), n && (!r || Array.isArray(n) ? r = J.access(e, t, w.makeArray(n)) : r.push(n)), r || [];
      }, dequeue: function dequeue(e, t) {
        t = t || "fx";var n = w.queue(e, t),
            r = n.length,
            i = n.shift(),
            o = w._queueHooks(e, t),
            a = function a() {
          w.dequeue(e, t);
        };"inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
      }, _queueHooks: function _queueHooks(e, t) {
        var n = t + "queueHooks";return J.get(e, n) || J.access(e, n, { empty: w.Callbacks("once memory").add(function () {
            J.remove(e, [t + "queue", n]);
          }) });
      } }), w.fn.extend({ queue: function queue(e, t) {
        var n = 2;return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? w.queue(this[0], e) : void 0 === t ? this : this.each(function () {
          var n = w.queue(this, e, t);w._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && w.dequeue(this, e);
        });
      }, dequeue: function dequeue(e) {
        return this.each(function () {
          w.dequeue(this, e);
        });
      }, clearQueue: function clearQueue(e) {
        return this.queue(e || "fx", []);
      }, promise: function promise(e, t) {
        var n,
            r = 1,
            i = w.Deferred(),
            o = this,
            a = this.length,
            s = function s() {
          --r || i.resolveWith(o, [o]);
        };"string" != typeof e && (t = e, e = void 0), e = e || "fx";while (a--) {
          (n = J.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));
        }return s(), i.promise(t);
      } });var re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
        ie = new RegExp("^(?:([+-])=|)(" + re + ")([a-z%]*)$", "i"),
        oe = ["Top", "Right", "Bottom", "Left"],
        ae = function ae(e, t) {
      return "none" === (e = t || e).style.display || "" === e.style.display && w.contains(e.ownerDocument, e) && "none" === w.css(e, "display");
    },
        se = function se(e, t, n, r) {
      var i,
          o,
          a = {};for (o in t) {
        a[o] = e.style[o], e.style[o] = t[o];
      }i = n.apply(e, r || []);for (o in t) {
        e.style[o] = a[o];
      }return i;
    };function ue(e, t, n, r) {
      var i,
          o,
          a = 20,
          s = r ? function () {
        return r.cur();
      } : function () {
        return w.css(e, t, "");
      },
          u = s(),
          l = n && n[3] || (w.cssNumber[t] ? "" : "px"),
          c = (w.cssNumber[t] || "px" !== l && +u) && ie.exec(w.css(e, t));if (c && c[3] !== l) {
        u /= 2, l = l || c[3], c = +u || 1;while (a--) {
          w.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;
        }c *= 2, w.style(e, t, c + l), n = n || [];
      }return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;
    }var le = {};function ce(e) {
      var t,
          n = e.ownerDocument,
          r = e.nodeName,
          i = le[r];return i || (t = n.body.appendChild(n.createElement(r)), i = w.css(t, "display"), t.parentNode.removeChild(t), "none" === i && (i = "block"), le[r] = i, i);
    }function fe(e, t) {
      for (var n, r, i = [], o = 0, a = e.length; o < a; o++) {
        (r = e[o]).style && (n = r.style.display, t ? ("none" === n && (i[o] = J.get(r, "display") || null, i[o] || (r.style.display = "")), "" === r.style.display && ae(r) && (i[o] = ce(r))) : "none" !== n && (i[o] = "none", J.set(r, "display", n)));
      }for (o = 0; o < a; o++) {
        null != i[o] && (e[o].style.display = i[o]);
      }return e;
    }w.fn.extend({ show: function show() {
        return fe(this, !0);
      }, hide: function hide() {
        return fe(this);
      }, toggle: function toggle(e) {
        return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {
          ae(this) ? w(this).show() : w(this).hide();
        });
      } });var pe = /^(?:checkbox|radio)$/i,
        de = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
        he = /^$|^module$|\/(?:java|ecma)script/i,
        ge = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;function ye(e, t) {
      var n;return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && N(e, t) ? w.merge([e], n) : n;
    }function ve(e, t) {
      for (var n = 0, r = e.length; n < r; n++) {
        J.set(e[n], "globalEval", !t || J.get(t[n], "globalEval"));
      }
    }var me = /<|&#?\w+;/;function xe(e, t, n, r, i) {
      for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) {
        if ((o = e[d]) || 0 === o) if ("object" === x(o)) w.merge(p, o.nodeType ? [o] : o);else if (me.test(o)) {
          a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + w.htmlPrefilter(o) + u[2], c = u[0];while (c--) {
            a = a.lastChild;
          }w.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
        } else p.push(t.createTextNode(o));
      }f.textContent = "", d = 0;while (o = p[d++]) {
        if (r && w.inArray(o, r) > -1) i && i.push(o);else if (l = w.contains(o.ownerDocument, o), a = ye(f.appendChild(o), "script"), l && ve(a), n) {
          c = 0;while (o = a[c++]) {
            he.test(o.type || "") && n.push(o);
          }
        }
      }return f;
    }!function () {
      var e = r.createDocumentFragment().appendChild(r.createElement("div")),
          t = r.createElement("input");t.setAttribute("type", "radio"), t.setAttribute("checked", "checked"), t.setAttribute("name", "t"), e.appendChild(t), h.checkClone = e.cloneNode(!0).cloneNode(!0).lastChild.checked, e.innerHTML = "<textarea>x</textarea>", h.noCloneChecked = !!e.cloneNode(!0).lastChild.defaultValue;
    }();var be = r.documentElement,
        we = /^key/,
        Te = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        Ce = /^([^.]*)(?:\.(.+)|)/;function Ee() {
      return !0;
    }function ke() {
      return !1;
    }function Se() {
      try {
        return r.activeElement;
      } catch (e) {}
    }function De(e, t, n, r, i, o) {
      var a, s;if ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t))) {
        "string" != typeof n && (r = r || n, n = void 0);for (s in t) {
          De(e, s, n, r, t[s], o);
        }return e;
      }if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = ke;else if (!i) return e;return 1 === o && (a = i, (i = function i(e) {
        return w().off(e), a.apply(this, arguments);
      }).guid = a.guid || (a.guid = w.guid++)), e.each(function () {
        w.event.add(this, t, i, r, n);
      });
    }w.event = { global: {}, add: function add(e, t, n, r, i) {
        var o,
            a,
            s,
            u,
            l,
            c,
            f,
            p,
            d,
            h,
            g,
            y = J.get(e);if (y) {
          n.handler && (n = (o = n).handler, i = o.selector), i && w.find.matchesSelector(be, i), n.guid || (n.guid = w.guid++), (u = y.events) || (u = y.events = {}), (a = y.handle) || (a = y.handle = function (t) {
            return "undefined" != typeof w && w.event.triggered !== t.type ? w.event.dispatch.apply(e, arguments) : void 0;
          }), l = (t = (t || "").match(M) || [""]).length;while (l--) {
            d = g = (s = Ce.exec(t[l]) || [])[1], h = (s[2] || "").split(".").sort(), d && (f = w.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = w.event.special[d] || {}, c = w.extend({ type: d, origType: g, data: r, handler: n, guid: n.guid, selector: i, needsContext: i && w.expr.match.needsContext.test(i), namespace: h.join(".") }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, a) || e.addEventListener && e.addEventListener(d, a)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), w.event.global[d] = !0);
          }
        }
      }, remove: function remove(e, t, n, r, i) {
        var o,
            a,
            s,
            u,
            l,
            c,
            f,
            p,
            d,
            h,
            g,
            y = J.hasData(e) && J.get(e);if (y && (u = y.events)) {
          l = (t = (t || "").match(M) || [""]).length;while (l--) {
            if (s = Ce.exec(t[l]) || [], d = g = s[1], h = (s[2] || "").split(".").sort(), d) {
              f = w.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;while (o--) {
                c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
              }a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, y.handle) || w.removeEvent(e, d, y.handle), delete u[d]);
            } else for (d in u) {
              w.event.remove(e, d + t[l], n, r, !0);
            }
          }w.isEmptyObject(u) && J.remove(e, "handle events");
        }
      }, dispatch: function dispatch(e) {
        var t = w.event.fix(e),
            n,
            r,
            i,
            o,
            a,
            s,
            u = new Array(arguments.length),
            l = (J.get(this, "events") || {})[t.type] || [],
            c = w.event.special[t.type] || {};for (u[0] = t, n = 1; n < arguments.length; n++) {
          u[n] = arguments[n];
        }if (t.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, t)) {
          s = w.event.handlers.call(this, t, l), n = 0;while ((o = s[n++]) && !t.isPropagationStopped()) {
            t.currentTarget = o.elem, r = 0;while ((a = o.handlers[r++]) && !t.isImmediatePropagationStopped()) {
              t.rnamespace && !t.rnamespace.test(a.namespace) || (t.handleObj = a, t.data = a.data, void 0 !== (i = ((w.event.special[a.origType] || {}).handle || a.handler).apply(o.elem, u)) && !1 === (t.result = i) && (t.preventDefault(), t.stopPropagation()));
            }
          }return c.postDispatch && c.postDispatch.call(this, t), t.result;
        }
      }, handlers: function handlers(e, t) {
        var n,
            r,
            i,
            o,
            a,
            s = [],
            u = t.delegateCount,
            l = e.target;if (u && l.nodeType && !("click" === e.type && e.button >= 1)) for (; l !== this; l = l.parentNode || this) {
          if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
            for (o = [], a = {}, n = 0; n < u; n++) {
              void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? w(i, this).index(l) > -1 : w.find(i, this, null, [l]).length), a[i] && o.push(r);
            }o.length && s.push({ elem: l, handlers: o });
          }
        }return l = this, u < t.length && s.push({ elem: l, handlers: t.slice(u) }), s;
      }, addProp: function addProp(e, t) {
        Object.defineProperty(w.Event.prototype, e, { enumerable: !0, configurable: !0, get: g(t) ? function () {
            if (this.originalEvent) return t(this.originalEvent);
          } : function () {
            if (this.originalEvent) return this.originalEvent[e];
          }, set: function set(t) {
            Object.defineProperty(this, e, { enumerable: !0, configurable: !0, writable: !0, value: t });
          } });
      }, fix: function fix(e) {
        return e[w.expando] ? e : new w.Event(e);
      }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
            if (this !== Se() && this.focus) return this.focus(), !1;
          }, delegateType: "focusin" }, blur: { trigger: function trigger() {
            if (this === Se() && this.blur) return this.blur(), !1;
          }, delegateType: "focusout" }, click: { trigger: function trigger() {
            if ("checkbox" === this.type && this.click && N(this, "input")) return this.click(), !1;
          }, _default: function _default(e) {
            return N(e.target, "a");
          } }, beforeunload: { postDispatch: function postDispatch(e) {
            void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
          } } } }, w.removeEvent = function (e, t, n) {
      e.removeEventListener && e.removeEventListener(t, n);
    }, w.Event = function (e, t) {
      if (!(this instanceof w.Event)) return new w.Event(e, t);e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ee : ke, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && w.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[w.expando] = !0;
    }, w.Event.prototype = { constructor: w.Event, isDefaultPrevented: ke, isPropagationStopped: ke, isImmediatePropagationStopped: ke, isSimulated: !1, preventDefault: function preventDefault() {
        var e = this.originalEvent;this.isDefaultPrevented = Ee, e && !this.isSimulated && e.preventDefault();
      }, stopPropagation: function stopPropagation() {
        var e = this.originalEvent;this.isPropagationStopped = Ee, e && !this.isSimulated && e.stopPropagation();
      }, stopImmediatePropagation: function stopImmediatePropagation() {
        var e = this.originalEvent;this.isImmediatePropagationStopped = Ee, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
      } }, w.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function which(e) {
        var t = e.button;return null == e.which && we.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Te.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
      } }, w.event.addProp), w.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (e, t) {
      w.event.special[e] = { delegateType: t, bindType: t, handle: function handle(e) {
          var n,
              r = this,
              i = e.relatedTarget,
              o = e.handleObj;return i && (i === r || w.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n;
        } };
    }), w.fn.extend({ on: function on(e, t, n, r) {
        return De(this, e, t, n, r);
      }, one: function one(e, t, n, r) {
        return De(this, e, t, n, r, 1);
      }, off: function off(e, t, n) {
        var r, i;if (e && e.preventDefault && e.handleObj) return r = e.handleObj, w(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e))) {
          for (i in e) {
            this.off(i, t, e[i]);
          }return this;
        }return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = ke), this.each(function () {
          w.event.remove(this, e, n, t);
        });
      } });var Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
        Ae = /<script|<style|<link/i,
        je = /checked\s*(?:[^=]|=\s*.checked.)/i,
        qe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Le(e, t) {
      return N(e, "table") && N(11 !== t.nodeType ? t : t.firstChild, "tr") ? w(e).children("tbody")[0] || e : e;
    }function He(e) {
      return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }function Oe(e) {
      return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e;
    }function Pe(e, t) {
      var n, r, i, o, a, s, u, l;if (1 === t.nodeType) {
        if (J.hasData(e) && (o = J.access(e), a = J.set(t, o), l = o.events)) {
          delete a.handle, a.events = {};for (i in l) {
            for (n = 0, r = l[i].length; n < r; n++) {
              w.event.add(t, i, l[i][n]);
            }
          }
        }K.hasData(e) && (s = K.access(e), u = w.extend({}, s), K.set(t, u));
      }
    }function Me(e, t) {
      var n = t.nodeName.toLowerCase();"input" === n && pe.test(e.type) ? t.checked = e.checked : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue);
    }function Re(e, t, n, r) {
      t = a.apply([], t);var i,
          o,
          s,
          u,
          l,
          c,
          f = 0,
          p = e.length,
          d = p - 1,
          y = t[0],
          v = g(y);if (v || p > 1 && "string" == typeof y && !h.checkClone && je.test(y)) return e.each(function (i) {
        var o = e.eq(i);v && (t[0] = y.call(this, i, o.html())), Re(o, t, n, r);
      });if (p && (i = xe(t, e[0].ownerDocument, !1, e, r), o = i.firstChild, 1 === i.childNodes.length && (i = o), o || r)) {
        for (u = (s = w.map(ye(i, "script"), He)).length; f < p; f++) {
          l = i, f !== d && (l = w.clone(l, !0, !0), u && w.merge(s, ye(l, "script"))), n.call(e[f], l, f);
        }if (u) for (c = s[s.length - 1].ownerDocument, w.map(s, Oe), f = 0; f < u; f++) {
          l = s[f], he.test(l.type || "") && !J.access(l, "globalEval") && w.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? w._evalUrl && w._evalUrl(l.src) : m(l.textContent.replace(qe, ""), c, l));
        }
      }return e;
    }function Ie(e, t, n) {
      for (var r, i = t ? w.filter(t, e) : e, o = 0; null != (r = i[o]); o++) {
        n || 1 !== r.nodeType || w.cleanData(ye(r)), r.parentNode && (n && w.contains(r.ownerDocument, r) && ve(ye(r, "script")), r.parentNode.removeChild(r));
      }return e;
    }w.extend({ htmlPrefilter: function htmlPrefilter(e) {
        return e.replace(Ne, "<$1></$2>");
      }, clone: function clone(e, t, n) {
        var r,
            i,
            o,
            a,
            s = e.cloneNode(!0),
            u = w.contains(e.ownerDocument, e);if (!(h.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || w.isXMLDoc(e))) for (a = ye(s), r = 0, i = (o = ye(e)).length; r < i; r++) {
          Me(o[r], a[r]);
        }if (t) if (n) for (o = o || ye(e), a = a || ye(s), r = 0, i = o.length; r < i; r++) {
          Pe(o[r], a[r]);
        } else Pe(e, s);return (a = ye(s, "script")).length > 0 && ve(a, !u && ye(e, "script")), s;
      }, cleanData: function cleanData(e) {
        for (var t, n, r, i = w.event.special, o = 0; void 0 !== (n = e[o]); o++) {
          if (Y(n)) {
            if (t = n[J.expando]) {
              if (t.events) for (r in t.events) {
                i[r] ? w.event.remove(n, r) : w.removeEvent(n, r, t.handle);
              }n[J.expando] = void 0;
            }n[K.expando] && (n[K.expando] = void 0);
          }
        }
      } }), w.fn.extend({ detach: function detach(e) {
        return Ie(this, e, !0);
      }, remove: function remove(e) {
        return Ie(this, e);
      }, text: function text(e) {
        return z(this, function (e) {
          return void 0 === e ? w.text(this) : this.empty().each(function () {
            1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
          });
        }, null, e, arguments.length);
      }, append: function append() {
        return Re(this, arguments, function (e) {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Le(this, e).appendChild(e);
        });
      }, prepend: function prepend() {
        return Re(this, arguments, function (e) {
          if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
            var t = Le(this, e);t.insertBefore(e, t.firstChild);
          }
        });
      }, before: function before() {
        return Re(this, arguments, function (e) {
          this.parentNode && this.parentNode.insertBefore(e, this);
        });
      }, after: function after() {
        return Re(this, arguments, function (e) {
          this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
        });
      }, empty: function empty() {
        for (var e, t = 0; null != (e = this[t]); t++) {
          1 === e.nodeType && (w.cleanData(ye(e, !1)), e.textContent = "");
        }return this;
      }, clone: function clone(e, t) {
        return e = null != e && e, t = null == t ? e : t, this.map(function () {
          return w.clone(this, e, t);
        });
      }, html: function html(e) {
        return z(this, function (e) {
          var t = this[0] || {},
              n = 0,
              r = this.length;if (void 0 === e && 1 === t.nodeType) return t.innerHTML;if ("string" == typeof e && !Ae.test(e) && !ge[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
            e = w.htmlPrefilter(e);try {
              for (; n < r; n++) {
                1 === (t = this[n] || {}).nodeType && (w.cleanData(ye(t, !1)), t.innerHTML = e);
              }t = 0;
            } catch (e) {}
          }t && this.empty().append(e);
        }, null, e, arguments.length);
      }, replaceWith: function replaceWith() {
        var e = [];return Re(this, arguments, function (t) {
          var n = this.parentNode;w.inArray(this, e) < 0 && (w.cleanData(ye(this)), n && n.replaceChild(t, this));
        }, e);
      } }), w.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (e, t) {
      w.fn[e] = function (e) {
        for (var n, r = [], i = w(e), o = i.length - 1, a = 0; a <= o; a++) {
          n = a === o ? this : this.clone(!0), w(i[a])[t](n), s.apply(r, n.get());
        }return this.pushStack(r);
      };
    });var We = new RegExp("^(" + re + ")(?!px)[a-z%]+$", "i"),
        $e = function $e(t) {
      var n = t.ownerDocument.defaultView;return n && n.opener || (n = e), n.getComputedStyle(t);
    },
        Be = new RegExp(oe.join("|"), "i");!function () {
      function t() {
        if (c) {
          l.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", c.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", be.appendChild(l).appendChild(c);var t = e.getComputedStyle(c);i = "1%" !== t.top, u = 12 === n(t.marginLeft), c.style.right = "60%", s = 36 === n(t.right), o = 36 === n(t.width), c.style.position = "absolute", a = 36 === c.offsetWidth || "absolute", be.removeChild(l), c = null;
        }
      }function n(e) {
        return Math.round(parseFloat(e));
      }var i,
          o,
          a,
          s,
          u,
          l = r.createElement("div"),
          c = r.createElement("div");c.style && (c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", h.clearCloneStyle = "content-box" === c.style.backgroundClip, w.extend(h, { boxSizingReliable: function boxSizingReliable() {
          return t(), o;
        }, pixelBoxStyles: function pixelBoxStyles() {
          return t(), s;
        }, pixelPosition: function pixelPosition() {
          return t(), i;
        }, reliableMarginLeft: function reliableMarginLeft() {
          return t(), u;
        }, scrollboxSize: function scrollboxSize() {
          return t(), a;
        } }));
    }();function Fe(e, t, n) {
      var r,
          i,
          o,
          a,
          s = e.style;return (n = n || $e(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || w.contains(e.ownerDocument, e) || (a = w.style(e, t)), !h.pixelBoxStyles() && We.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }function _e(e, t) {
      return { get: function get() {
          if (!e()) return (this.get = t).apply(this, arguments);delete this.get;
        } };
    }var ze = /^(none|table(?!-c[ea]).+)/,
        Xe = /^--/,
        Ue = { position: "absolute", visibility: "hidden", display: "block" },
        Ve = { letterSpacing: "0", fontWeight: "400" },
        Ge = ["Webkit", "Moz", "ms"],
        Ye = r.createElement("div").style;function Qe(e) {
      if (e in Ye) return e;var t = e[0].toUpperCase() + e.slice(1),
          n = Ge.length;while (n--) {
        if ((e = Ge[n] + t) in Ye) return e;
      }
    }function Je(e) {
      var t = w.cssProps[e];return t || (t = w.cssProps[e] = Qe(e) || e), t;
    }function Ke(e, t, n) {
      var r = ie.exec(t);return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }function Ze(e, t, n, r, i, o) {
      var a = "width" === t ? 1 : 0,
          s = 0,
          u = 0;if (n === (r ? "border" : "content")) return 0;for (; a < 4; a += 2) {
        "margin" === n && (u += w.css(e, n + oe[a], !0, i)), r ? ("content" === n && (u -= w.css(e, "padding" + oe[a], !0, i)), "margin" !== n && (u -= w.css(e, "border" + oe[a] + "Width", !0, i))) : (u += w.css(e, "padding" + oe[a], !0, i), "padding" !== n ? u += w.css(e, "border" + oe[a] + "Width", !0, i) : s += w.css(e, "border" + oe[a] + "Width", !0, i));
      }return !r && o >= 0 && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5))), u;
    }function et(e, t, n) {
      var r = $e(e),
          i = Fe(e, t, r),
          o = "border-box" === w.css(e, "boxSizing", !1, r),
          a = o;if (We.test(i)) {
        if (!n) return i;i = "auto";
      }return a = a && (h.boxSizingReliable() || i === e.style[t]), ("auto" === i || !parseFloat(i) && "inline" === w.css(e, "display", !1, r)) && (i = e["offset" + t[0].toUpperCase() + t.slice(1)], a = !0), (i = parseFloat(i) || 0) + Ze(e, t, n || (o ? "border" : "content"), a, r, i) + "px";
    }w.extend({ cssHooks: { opacity: { get: function get(e, t) {
            if (t) {
              var n = Fe(e, "opacity");return "" === n ? "1" : n;
            }
          } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: {}, style: function style(e, t, n, r) {
        if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
          var i,
              o,
              a,
              s = G(t),
              u = Xe.test(t),
              l = e.style;if (u || (t = Je(s)), a = w.cssHooks[t] || w.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];"string" == (o = typeof n === "undefined" ? "undefined" : _typeof(n)) && (i = ie.exec(n)) && i[1] && (n = ue(e, t, i), o = "number"), null != n && n === n && ("number" === o && (n += i && i[3] || (w.cssNumber[s] ? "" : "px")), h.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
        }
      }, css: function css(e, t, n, r) {
        var i,
            o,
            a,
            s = G(t);return Xe.test(t) || (t = Je(s)), (a = w.cssHooks[t] || w.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = Fe(e, t, r)), "normal" === i && t in Ve && (i = Ve[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;
      } }), w.each(["height", "width"], function (e, t) {
      w.cssHooks[t] = { get: function get(e, n, r) {
          if (n) return !ze.test(w.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? et(e, t, r) : se(e, Ue, function () {
            return et(e, t, r);
          });
        }, set: function set(e, n, r) {
          var i,
              o = $e(e),
              a = "border-box" === w.css(e, "boxSizing", !1, o),
              s = r && Ze(e, t, r, a, o);return a && h.scrollboxSize() === o.position && (s -= Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - parseFloat(o[t]) - Ze(e, t, "border", !1, o) - .5)), s && (i = ie.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n, n = w.css(e, t)), Ke(e, n, s);
        } };
    }), w.cssHooks.marginLeft = _e(h.reliableMarginLeft, function (e, t) {
      if (t) return (parseFloat(Fe(e, "marginLeft")) || e.getBoundingClientRect().left - se(e, { marginLeft: 0 }, function () {
        return e.getBoundingClientRect().left;
      })) + "px";
    }), w.each({ margin: "", padding: "", border: "Width" }, function (e, t) {
      w.cssHooks[e + t] = { expand: function expand(n) {
          for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; r < 4; r++) {
            i[e + oe[r] + t] = o[r] || o[r - 2] || o[0];
          }return i;
        } }, "margin" !== e && (w.cssHooks[e + t].set = Ke);
    }), w.fn.extend({ css: function css(e, t) {
        return z(this, function (e, t, n) {
          var r,
              i,
              o = {},
              a = 0;if (Array.isArray(t)) {
            for (r = $e(e), i = t.length; a < i; a++) {
              o[t[a]] = w.css(e, t[a], !1, r);
            }return o;
          }return void 0 !== n ? w.style(e, t, n) : w.css(e, t);
        }, e, t, arguments.length > 1);
      } });function tt(e, t, n, r, i) {
      return new tt.prototype.init(e, t, n, r, i);
    }w.Tween = tt, tt.prototype = { constructor: tt, init: function init(e, t, n, r, i, o) {
        this.elem = e, this.prop = n, this.easing = i || w.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (w.cssNumber[n] ? "" : "px");
      }, cur: function cur() {
        var e = tt.propHooks[this.prop];return e && e.get ? e.get(this) : tt.propHooks._default.get(this);
      }, run: function run(e) {
        var t,
            n = tt.propHooks[this.prop];return this.options.duration ? this.pos = t = w.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : tt.propHooks._default.set(this), this;
      } }, tt.prototype.init.prototype = tt.prototype, tt.propHooks = { _default: { get: function get(e) {
          var t;return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = w.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0;
        }, set: function set(e) {
          w.fx.step[e.prop] ? w.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[w.cssProps[e.prop]] && !w.cssHooks[e.prop] ? e.elem[e.prop] = e.now : w.style(e.elem, e.prop, e.now + e.unit);
        } } }, tt.propHooks.scrollTop = tt.propHooks.scrollLeft = { set: function set(e) {
        e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
      } }, w.easing = { linear: function linear(e) {
        return e;
      }, swing: function swing(e) {
        return .5 - Math.cos(e * Math.PI) / 2;
      }, _default: "swing" }, w.fx = tt.prototype.init, w.fx.step = {};var nt,
        rt,
        it = /^(?:toggle|show|hide)$/,
        ot = /queueHooks$/;function at() {
      rt && (!1 === r.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(at) : e.setTimeout(at, w.fx.interval), w.fx.tick());
    }function st() {
      return e.setTimeout(function () {
        nt = void 0;
      }), nt = Date.now();
    }function ut(e, t) {
      var n,
          r = 0,
          i = { height: e };for (t = t ? 1 : 0; r < 4; r += 2 - t) {
        i["margin" + (n = oe[r])] = i["padding" + n] = e;
      }return t && (i.opacity = i.width = e), i;
    }function lt(e, t, n) {
      for (var r, i = (pt.tweeners[t] || []).concat(pt.tweeners["*"]), o = 0, a = i.length; o < a; o++) {
        if (r = i[o].call(n, t, e)) return r;
      }
    }function ct(e, t, n) {
      var r,
          i,
          o,
          a,
          s,
          u,
          l,
          c,
          f = "width" in t || "height" in t,
          p = this,
          d = {},
          h = e.style,
          g = e.nodeType && ae(e),
          y = J.get(e, "fxshow");n.queue || (null == (a = w._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {
        a.unqueued || s();
      }), a.unqueued++, p.always(function () {
        p.always(function () {
          a.unqueued--, w.queue(e, "fx").length || a.empty.fire();
        });
      }));for (r in t) {
        if (i = t[r], it.test(i)) {
          if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
            if ("show" !== i || !y || void 0 === y[r]) continue;g = !0;
          }d[r] = y && y[r] || w.style(e, r);
        }
      }if ((u = !w.isEmptyObject(t)) || !w.isEmptyObject(d)) {
        f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = y && y.display) && (l = J.get(e, "display")), "none" === (c = w.css(e, "display")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = w.css(e, "display"), fe([e]))), ("inline" === c || "inline-block" === c && null != l) && "none" === w.css(e, "float") && (u || (p.done(function () {
          h.display = l;
        }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function () {
          h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
        })), u = !1;for (r in d) {
          u || (y ? "hidden" in y && (g = y.hidden) : y = J.access(e, "fxshow", { display: l }), o && (y.hidden = !g), g && fe([e], !0), p.done(function () {
            g || fe([e]), J.remove(e, "fxshow");for (r in d) {
              w.style(e, r, d[r]);
            }
          })), u = lt(g ? y[r] : 0, r, p), r in y || (y[r] = u.start, g && (u.end = u.start, u.start = 0));
        }
      }
    }function ft(e, t) {
      var n, r, i, o, a;for (n in e) {
        if (r = G(n), i = t[r], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = w.cssHooks[r]) && "expand" in a) {
          o = a.expand(o), delete e[r];for (n in o) {
            n in e || (e[n] = o[n], t[n] = i);
          }
        } else t[r] = i;
      }
    }function pt(e, t, n) {
      var r,
          i,
          o = 0,
          a = pt.prefilters.length,
          s = w.Deferred().always(function () {
        delete u.elem;
      }),
          u = function u() {
        if (i) return !1;for (var t = nt || st(), n = Math.max(0, l.startTime + l.duration - t), r = 1 - (n / l.duration || 0), o = 0, a = l.tweens.length; o < a; o++) {
          l.tweens[o].run(r);
        }return s.notifyWith(e, [l, r, n]), r < 1 && a ? n : (a || s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l]), !1);
      },
          l = s.promise({ elem: e, props: w.extend({}, t), opts: w.extend(!0, { specialEasing: {}, easing: w.easing._default }, n), originalProperties: t, originalOptions: n, startTime: nt || st(), duration: n.duration, tweens: [], createTween: function createTween(t, n) {
          var r = w.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);return l.tweens.push(r), r;
        }, stop: function stop(t) {
          var n = 0,
              r = t ? l.tweens.length : 0;if (i) return this;for (i = !0; n < r; n++) {
            l.tweens[n].run(1);
          }return t ? (s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l, t])) : s.rejectWith(e, [l, t]), this;
        } }),
          c = l.props;for (ft(c, l.opts.specialEasing); o < a; o++) {
        if (r = pt.prefilters[o].call(l, e, c, l.opts)) return g(r.stop) && (w._queueHooks(l.elem, l.opts.queue).stop = r.stop.bind(r)), r;
      }return w.map(c, lt, l), g(l.opts.start) && l.opts.start.call(e, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), w.fx.timer(w.extend(u, { elem: e, anim: l, queue: l.opts.queue })), l;
    }w.Animation = w.extend(pt, { tweeners: { "*": [function (e, t) {
          var n = this.createTween(e, t);return ue(n.elem, e, ie.exec(t), n), n;
        }] }, tweener: function tweener(e, t) {
        g(e) ? (t = e, e = ["*"]) : e = e.match(M);for (var n, r = 0, i = e.length; r < i; r++) {
          n = e[r], pt.tweeners[n] = pt.tweeners[n] || [], pt.tweeners[n].unshift(t);
        }
      }, prefilters: [ct], prefilter: function prefilter(e, t) {
        t ? pt.prefilters.unshift(e) : pt.prefilters.push(e);
      } }), w.speed = function (e, t, n) {
      var r = e && "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? w.extend({}, e) : { complete: n || !n && t || g(e) && e, duration: e, easing: n && t || t && !g(t) && t };return w.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in w.fx.speeds ? r.duration = w.fx.speeds[r.duration] : r.duration = w.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function () {
        g(r.old) && r.old.call(this), r.queue && w.dequeue(this, r.queue);
      }, r;
    }, w.fn.extend({ fadeTo: function fadeTo(e, t, n, r) {
        return this.filter(ae).css("opacity", 0).show().end().animate({ opacity: t }, e, n, r);
      }, animate: function animate(e, t, n, r) {
        var i = w.isEmptyObject(e),
            o = w.speed(t, n, r),
            a = function a() {
          var t = pt(this, w.extend({}, e), o);(i || J.get(this, "finish")) && t.stop(!0);
        };return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
      }, stop: function stop(e, t, n) {
        var r = function r(e) {
          var t = e.stop;delete e.stop, t(n);
        };return "string" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), this.each(function () {
          var t = !0,
              i = null != e && e + "queueHooks",
              o = w.timers,
              a = J.get(this);if (i) a[i] && a[i].stop && r(a[i]);else for (i in a) {
            a[i] && a[i].stop && ot.test(i) && r(a[i]);
          }for (i = o.length; i--;) {
            o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));
          }!t && n || w.dequeue(this, e);
        });
      }, finish: function finish(e) {
        return !1 !== e && (e = e || "fx"), this.each(function () {
          var t,
              n = J.get(this),
              r = n[e + "queue"],
              i = n[e + "queueHooks"],
              o = w.timers,
              a = r ? r.length : 0;for (n.finish = !0, w.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) {
            o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));
          }for (t = 0; t < a; t++) {
            r[t] && r[t].finish && r[t].finish.call(this);
          }delete n.finish;
        });
      } }), w.each(["toggle", "show", "hide"], function (e, t) {
      var n = w.fn[t];w.fn[t] = function (e, r, i) {
        return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ut(t, !0), e, r, i);
      };
    }), w.each({ slideDown: ut("show"), slideUp: ut("hide"), slideToggle: ut("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (e, t) {
      w.fn[e] = function (e, n, r) {
        return this.animate(t, e, n, r);
      };
    }), w.timers = [], w.fx.tick = function () {
      var e,
          t = 0,
          n = w.timers;for (nt = Date.now(); t < n.length; t++) {
        (e = n[t])() || n[t] !== e || n.splice(t--, 1);
      }n.length || w.fx.stop(), nt = void 0;
    }, w.fx.timer = function (e) {
      w.timers.push(e), w.fx.start();
    }, w.fx.interval = 13, w.fx.start = function () {
      rt || (rt = !0, at());
    }, w.fx.stop = function () {
      rt = null;
    }, w.fx.speeds = { slow: 600, fast: 200, _default: 400 }, w.fn.delay = function (t, n) {
      return t = w.fx ? w.fx.speeds[t] || t : t, n = n || "fx", this.queue(n, function (n, r) {
        var i = e.setTimeout(n, t);r.stop = function () {
          e.clearTimeout(i);
        };
      });
    }, function () {
      var e = r.createElement("input"),
          t = r.createElement("select").appendChild(r.createElement("option"));e.type = "checkbox", h.checkOn = "" !== e.value, h.optSelected = t.selected, (e = r.createElement("input")).value = "t", e.type = "radio", h.radioValue = "t" === e.value;
    }();var dt,
        ht = w.expr.attrHandle;w.fn.extend({ attr: function attr(e, t) {
        return z(this, w.attr, e, t, arguments.length > 1);
      }, removeAttr: function removeAttr(e) {
        return this.each(function () {
          w.removeAttr(this, e);
        });
      } }), w.extend({ attr: function attr(e, t, n) {
        var r,
            i,
            o = e.nodeType;if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? w.prop(e, t, n) : (1 === o && w.isXMLDoc(e) || (i = w.attrHooks[t.toLowerCase()] || (w.expr.match.bool.test(t) ? dt : void 0)), void 0 !== n ? null === n ? void w.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = w.find.attr(e, t)) ? void 0 : r);
      }, attrHooks: { type: { set: function set(e, t) {
            if (!h.radioValue && "radio" === t && N(e, "input")) {
              var n = e.value;return e.setAttribute("type", t), n && (e.value = n), t;
            }
          } } }, removeAttr: function removeAttr(e, t) {
        var n,
            r = 0,
            i = t && t.match(M);if (i && 1 === e.nodeType) while (n = i[r++]) {
          e.removeAttribute(n);
        }
      } }), dt = { set: function set(e, t, n) {
        return !1 === t ? w.removeAttr(e, n) : e.setAttribute(n, n), n;
      } }, w.each(w.expr.match.bool.source.match(/\w+/g), function (e, t) {
      var n = ht[t] || w.find.attr;ht[t] = function (e, t, r) {
        var i,
            o,
            a = t.toLowerCase();return r || (o = ht[a], ht[a] = i, i = null != n(e, t, r) ? a : null, ht[a] = o), i;
      };
    });var gt = /^(?:input|select|textarea|button)$/i,
        yt = /^(?:a|area)$/i;w.fn.extend({ prop: function prop(e, t) {
        return z(this, w.prop, e, t, arguments.length > 1);
      }, removeProp: function removeProp(e) {
        return this.each(function () {
          delete this[w.propFix[e] || e];
        });
      } }), w.extend({ prop: function prop(e, t, n) {
        var r,
            i,
            o = e.nodeType;if (3 !== o && 8 !== o && 2 !== o) return 1 === o && w.isXMLDoc(e) || (t = w.propFix[t] || t, i = w.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
      }, propHooks: { tabIndex: { get: function get(e) {
            var t = w.find.attr(e, "tabindex");return t ? parseInt(t, 10) : gt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1;
          } } }, propFix: { "for": "htmlFor", "class": "className" } }), h.optSelected || (w.propHooks.selected = { get: function get(e) {
        var t = e.parentNode;return t && t.parentNode && t.parentNode.selectedIndex, null;
      }, set: function set(e) {
        var t = e.parentNode;t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
      } }), w.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
      w.propFix[this.toLowerCase()] = this;
    });function vt(e) {
      return (e.match(M) || []).join(" ");
    }function mt(e) {
      return e.getAttribute && e.getAttribute("class") || "";
    }function xt(e) {
      return Array.isArray(e) ? e : "string" == typeof e ? e.match(M) || [] : [];
    }w.fn.extend({ addClass: function addClass(e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u = 0;if (g(e)) return this.each(function (t) {
          w(this).addClass(e.call(this, t, mt(this)));
        });if ((t = xt(e)).length) while (n = this[u++]) {
          if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
            a = 0;while (o = t[a++]) {
              r.indexOf(" " + o + " ") < 0 && (r += o + " ");
            }i !== (s = vt(r)) && n.setAttribute("class", s);
          }
        }return this;
      }, removeClass: function removeClass(e) {
        var t,
            n,
            r,
            i,
            o,
            a,
            s,
            u = 0;if (g(e)) return this.each(function (t) {
          w(this).removeClass(e.call(this, t, mt(this)));
        });if (!arguments.length) return this.attr("class", "");if ((t = xt(e)).length) while (n = this[u++]) {
          if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
            a = 0;while (o = t[a++]) {
              while (r.indexOf(" " + o + " ") > -1) {
                r = r.replace(" " + o + " ", " ");
              }
            }i !== (s = vt(r)) && n.setAttribute("class", s);
          }
        }return this;
      }, toggleClass: function toggleClass(e, t) {
        var n = typeof e === "undefined" ? "undefined" : _typeof(e),
            r = "string" === n || Array.isArray(e);return "boolean" == typeof t && r ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each(function (n) {
          w(this).toggleClass(e.call(this, n, mt(this), t), t);
        }) : this.each(function () {
          var t, i, o, a;if (r) {
            i = 0, o = w(this), a = xt(e);while (t = a[i++]) {
              o.hasClass(t) ? o.removeClass(t) : o.addClass(t);
            }
          } else void 0 !== e && "boolean" !== n || ((t = mt(this)) && J.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : J.get(this, "__className__") || ""));
        });
      }, hasClass: function hasClass(e) {
        var t,
            n,
            r = 0;t = " " + e + " ";while (n = this[r++]) {
          if (1 === n.nodeType && (" " + vt(mt(n)) + " ").indexOf(t) > -1) return !0;
        }return !1;
      } });var bt = /\r/g;w.fn.extend({ val: function val(e) {
        var t,
            n,
            r,
            i = this[0];{
          if (arguments.length) return r = g(e), this.each(function (n) {
            var i;1 === this.nodeType && (null == (i = r ? e.call(this, n, w(this).val()) : e) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = w.map(i, function (e) {
              return null == e ? "" : e + "";
            })), (t = w.valHooks[this.type] || w.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
          });if (i) return (t = w.valHooks[i.type] || w.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : "string" == typeof (n = i.value) ? n.replace(bt, "") : null == n ? "" : n;
        }
      } }), w.extend({ valHooks: { option: { get: function get(e) {
            var t = w.find.attr(e, "value");return null != t ? t : vt(w.text(e));
          } }, select: { get: function get(e) {
            var t,
                n,
                r,
                i = e.options,
                o = e.selectedIndex,
                a = "select-one" === e.type,
                s = a ? null : [],
                u = a ? o + 1 : i.length;for (r = o < 0 ? u : a ? o : 0; r < u; r++) {
              if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !N(n.parentNode, "optgroup"))) {
                if (t = w(n).val(), a) return t;s.push(t);
              }
            }return s;
          }, set: function set(e, t) {
            var n,
                r,
                i = e.options,
                o = w.makeArray(t),
                a = i.length;while (a--) {
              ((r = i[a]).selected = w.inArray(w.valHooks.option.get(r), o) > -1) && (n = !0);
            }return n || (e.selectedIndex = -1), o;
          } } } }), w.each(["radio", "checkbox"], function () {
      w.valHooks[this] = { set: function set(e, t) {
          if (Array.isArray(t)) return e.checked = w.inArray(w(e).val(), t) > -1;
        } }, h.checkOn || (w.valHooks[this].get = function (e) {
        return null === e.getAttribute("value") ? "on" : e.value;
      });
    }), h.focusin = "onfocusin" in e;var wt = /^(?:focusinfocus|focusoutblur)$/,
        Tt = function Tt(e) {
      e.stopPropagation();
    };w.extend(w.event, { trigger: function trigger(t, n, i, o) {
        var a,
            s,
            u,
            l,
            c,
            p,
            d,
            h,
            v = [i || r],
            m = f.call(t, "type") ? t.type : t,
            x = f.call(t, "namespace") ? t.namespace.split(".") : [];if (s = h = u = i = i || r, 3 !== i.nodeType && 8 !== i.nodeType && !wt.test(m + w.event.triggered) && (m.indexOf(".") > -1 && (m = (x = m.split(".")).shift(), x.sort()), c = m.indexOf(":") < 0 && "on" + m, t = t[w.expando] ? t : new w.Event(m, "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t), t.isTrigger = o ? 2 : 3, t.namespace = x.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + x.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = i), n = null == n ? [t] : w.makeArray(n, [t]), d = w.event.special[m] || {}, o || !d.trigger || !1 !== d.trigger.apply(i, n))) {
          if (!o && !d.noBubble && !y(i)) {
            for (l = d.delegateType || m, wt.test(l + m) || (s = s.parentNode); s; s = s.parentNode) {
              v.push(s), u = s;
            }u === (i.ownerDocument || r) && v.push(u.defaultView || u.parentWindow || e);
          }a = 0;while ((s = v[a++]) && !t.isPropagationStopped()) {
            h = s, t.type = a > 1 ? l : d.bindType || m, (p = (J.get(s, "events") || {})[t.type] && J.get(s, "handle")) && p.apply(s, n), (p = c && s[c]) && p.apply && Y(s) && (t.result = p.apply(s, n), !1 === t.result && t.preventDefault());
          }return t.type = m, o || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(v.pop(), n) || !Y(i) || c && g(i[m]) && !y(i) && ((u = i[c]) && (i[c] = null), w.event.triggered = m, t.isPropagationStopped() && h.addEventListener(m, Tt), i[m](), t.isPropagationStopped() && h.removeEventListener(m, Tt), w.event.triggered = void 0, u && (i[c] = u)), t.result;
        }
      }, simulate: function simulate(e, t, n) {
        var r = w.extend(new w.Event(), n, { type: e, isSimulated: !0 });w.event.trigger(r, null, t);
      } }), w.fn.extend({ trigger: function trigger(e, t) {
        return this.each(function () {
          w.event.trigger(e, t, this);
        });
      }, triggerHandler: function triggerHandler(e, t) {
        var n = this[0];if (n) return w.event.trigger(e, t, n, !0);
      } }), h.focusin || w.each({ focus: "focusin", blur: "focusout" }, function (e, t) {
      var n = function n(e) {
        w.event.simulate(t, e.target, w.event.fix(e));
      };w.event.special[t] = { setup: function setup() {
          var r = this.ownerDocument || this,
              i = J.access(r, t);i || r.addEventListener(e, n, !0), J.access(r, t, (i || 0) + 1);
        }, teardown: function teardown() {
          var r = this.ownerDocument || this,
              i = J.access(r, t) - 1;i ? J.access(r, t, i) : (r.removeEventListener(e, n, !0), J.remove(r, t));
        } };
    });var Ct = e.location,
        Et = Date.now(),
        kt = /\?/;w.parseXML = function (t) {
      var n;if (!t || "string" != typeof t) return null;try {
        n = new e.DOMParser().parseFromString(t, "text/xml");
      } catch (e) {
        n = void 0;
      }return n && !n.getElementsByTagName("parsererror").length || w.error("Invalid XML: " + t), n;
    };var St = /\[\]$/,
        Dt = /\r?\n/g,
        Nt = /^(?:submit|button|image|reset|file)$/i,
        At = /^(?:input|select|textarea|keygen)/i;function jt(e, t, n, r) {
      var i;if (Array.isArray(t)) w.each(t, function (t, i) {
        n || St.test(e) ? r(e, i) : jt(e + "[" + ("object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) && null != i ? t : "") + "]", i, n, r);
      });else if (n || "object" !== x(t)) r(e, t);else for (i in t) {
        jt(e + "[" + i + "]", t[i], n, r);
      }
    }w.param = function (e, t) {
      var n,
          r = [],
          i = function i(e, t) {
        var n = g(t) ? t() : t;r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
      };if (Array.isArray(e) || e.jquery && !w.isPlainObject(e)) w.each(e, function () {
        i(this.name, this.value);
      });else for (n in e) {
        jt(n, e[n], t, i);
      }return r.join("&");
    }, w.fn.extend({ serialize: function serialize() {
        return w.param(this.serializeArray());
      }, serializeArray: function serializeArray() {
        return this.map(function () {
          var e = w.prop(this, "elements");return e ? w.makeArray(e) : this;
        }).filter(function () {
          var e = this.type;return this.name && !w(this).is(":disabled") && At.test(this.nodeName) && !Nt.test(e) && (this.checked || !pe.test(e));
        }).map(function (e, t) {
          var n = w(this).val();return null == n ? null : Array.isArray(n) ? w.map(n, function (e) {
            return { name: t.name, value: e.replace(Dt, "\r\n") };
          }) : { name: t.name, value: n.replace(Dt, "\r\n") };
        }).get();
      } });var qt = /%20/g,
        Lt = /#.*$/,
        Ht = /([?&])_=[^&]*/,
        Ot = /^(.*?):[ \t]*([^\r\n]*)$/gm,
        Pt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        Mt = /^(?:GET|HEAD)$/,
        Rt = /^\/\//,
        It = {},
        Wt = {},
        $t = "*/".concat("*"),
        Bt = r.createElement("a");Bt.href = Ct.href;function Ft(e) {
      return function (t, n) {
        "string" != typeof t && (n = t, t = "*");var r,
            i = 0,
            o = t.toLowerCase().match(M) || [];if (g(n)) while (r = o[i++]) {
          "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
        }
      };
    }function _t(e, t, n, r) {
      var i = {},
          o = e === Wt;function a(s) {
        var u;return i[s] = !0, w.each(e[s] || [], function (e, s) {
          var l = s(t, n, r);return "string" != typeof l || o || i[l] ? o ? !(u = l) : void 0 : (t.dataTypes.unshift(l), a(l), !1);
        }), u;
      }return a(t.dataTypes[0]) || !i["*"] && a("*");
    }function zt(e, t) {
      var n,
          r,
          i = w.ajaxSettings.flatOptions || {};for (n in t) {
        void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
      }return r && w.extend(!0, e, r), e;
    }function Xt(e, t, n) {
      var r,
          i,
          o,
          a,
          s = e.contents,
          u = e.dataTypes;while ("*" === u[0]) {
        u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
      }if (r) for (i in s) {
        if (s[i] && s[i].test(r)) {
          u.unshift(i);break;
        }
      }if (u[0] in n) o = u[0];else {
        for (i in n) {
          if (!u[0] || e.converters[i + " " + u[0]]) {
            o = i;break;
          }a || (a = i);
        }o = o || a;
      }if (o) return o !== u[0] && u.unshift(o), n[o];
    }function Ut(e, t, n, r) {
      var i,
          o,
          a,
          s,
          u,
          l = {},
          c = e.dataTypes.slice();if (c[1]) for (a in e.converters) {
        l[a.toLowerCase()] = e.converters[a];
      }o = c.shift();while (o) {
        if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if ("*" === o) o = u;else if ("*" !== u && u !== o) {
          if (!(a = l[u + " " + o] || l["* " + o])) for (i in l) {
            if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
              !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));break;
            }
          }if (!0 !== a) if (a && e["throws"]) t = a(t);else try {
            t = a(t);
          } catch (e) {
            return { state: "parsererror", error: a ? e : "No conversion from " + u + " to " + o };
          }
        }
      }return { state: "success", data: t };
    }w.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: Ct.href, type: "GET", isLocal: Pt.test(Ct.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": $t, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": w.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(e, t) {
        return t ? zt(zt(e, w.ajaxSettings), t) : zt(w.ajaxSettings, e);
      }, ajaxPrefilter: Ft(It), ajaxTransport: Ft(Wt), ajax: function ajax(t, n) {
        "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (n = t, t = void 0), n = n || {};var i,
            o,
            a,
            s,
            u,
            l,
            c,
            f,
            p,
            d,
            h = w.ajaxSetup({}, n),
            g = h.context || h,
            y = h.context && (g.nodeType || g.jquery) ? w(g) : w.event,
            v = w.Deferred(),
            m = w.Callbacks("once memory"),
            x = h.statusCode || {},
            b = {},
            T = {},
            C = "canceled",
            E = { readyState: 0, getResponseHeader: function getResponseHeader(e) {
            var t;if (c) {
              if (!s) {
                s = {};while (t = Ot.exec(a)) {
                  s[t[1].toLowerCase()] = t[2];
                }
              }t = s[e.toLowerCase()];
            }return null == t ? null : t;
          }, getAllResponseHeaders: function getAllResponseHeaders() {
            return c ? a : null;
          }, setRequestHeader: function setRequestHeader(e, t) {
            return null == c && (e = T[e.toLowerCase()] = T[e.toLowerCase()] || e, b[e] = t), this;
          }, overrideMimeType: function overrideMimeType(e) {
            return null == c && (h.mimeType = e), this;
          }, statusCode: function statusCode(e) {
            var t;if (e) if (c) E.always(e[E.status]);else for (t in e) {
              x[t] = [x[t], e[t]];
            }return this;
          }, abort: function abort(e) {
            var t = e || C;return i && i.abort(t), k(0, t), this;
          } };if (v.promise(E), h.url = ((t || h.url || Ct.href) + "").replace(Rt, Ct.protocol + "//"), h.type = n.method || n.type || h.method || h.type, h.dataTypes = (h.dataType || "*").toLowerCase().match(M) || [""], null == h.crossDomain) {
          l = r.createElement("a");try {
            l.href = h.url, l.href = l.href, h.crossDomain = Bt.protocol + "//" + Bt.host != l.protocol + "//" + l.host;
          } catch (e) {
            h.crossDomain = !0;
          }
        }if (h.data && h.processData && "string" != typeof h.data && (h.data = w.param(h.data, h.traditional)), _t(It, h, n, E), c) return E;(f = w.event && h.global) && 0 == w.active++ && w.event.trigger("ajaxStart"), h.type = h.type.toUpperCase(), h.hasContent = !Mt.test(h.type), o = h.url.replace(Lt, ""), h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(qt, "+")) : (d = h.url.slice(o.length), h.data && (h.processData || "string" == typeof h.data) && (o += (kt.test(o) ? "&" : "?") + h.data, delete h.data), !1 === h.cache && (o = o.replace(Ht, "$1"), d = (kt.test(o) ? "&" : "?") + "_=" + Et++ + d), h.url = o + d), h.ifModified && (w.lastModified[o] && E.setRequestHeader("If-Modified-Since", w.lastModified[o]), w.etag[o] && E.setRequestHeader("If-None-Match", w.etag[o])), (h.data && h.hasContent && !1 !== h.contentType || n.contentType) && E.setRequestHeader("Content-Type", h.contentType), E.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : h.accepts["*"]);for (p in h.headers) {
          E.setRequestHeader(p, h.headers[p]);
        }if (h.beforeSend && (!1 === h.beforeSend.call(g, E, h) || c)) return E.abort();if (C = "abort", m.add(h.complete), E.done(h.success), E.fail(h.error), i = _t(Wt, h, n, E)) {
          if (E.readyState = 1, f && y.trigger("ajaxSend", [E, h]), c) return E;h.async && h.timeout > 0 && (u = e.setTimeout(function () {
            E.abort("timeout");
          }, h.timeout));try {
            c = !1, i.send(b, k);
          } catch (e) {
            if (c) throw e;k(-1, e);
          }
        } else k(-1, "No Transport");function k(t, n, r, s) {
          var l,
              p,
              d,
              b,
              T,
              C = n;c || (c = !0, u && e.clearTimeout(u), i = void 0, a = s || "", E.readyState = t > 0 ? 4 : 0, l = t >= 200 && t < 300 || 304 === t, r && (b = Xt(h, E, r)), b = Ut(h, b, E, l), l ? (h.ifModified && ((T = E.getResponseHeader("Last-Modified")) && (w.lastModified[o] = T), (T = E.getResponseHeader("etag")) && (w.etag[o] = T)), 204 === t || "HEAD" === h.type ? C = "nocontent" : 304 === t ? C = "notmodified" : (C = b.state, p = b.data, l = !(d = b.error))) : (d = C, !t && C || (C = "error", t < 0 && (t = 0))), E.status = t, E.statusText = (n || C) + "", l ? v.resolveWith(g, [p, C, E]) : v.rejectWith(g, [E, C, d]), E.statusCode(x), x = void 0, f && y.trigger(l ? "ajaxSuccess" : "ajaxError", [E, h, l ? p : d]), m.fireWith(g, [E, C]), f && (y.trigger("ajaxComplete", [E, h]), --w.active || w.event.trigger("ajaxStop")));
        }return E;
      }, getJSON: function getJSON(e, t, n) {
        return w.get(e, t, n, "json");
      }, getScript: function getScript(e, t) {
        return w.get(e, void 0, t, "script");
      } }), w.each(["get", "post"], function (e, t) {
      w[t] = function (e, n, r, i) {
        return g(n) && (i = i || r, r = n, n = void 0), w.ajax(w.extend({ url: e, type: t, dataType: i, data: n, success: r }, w.isPlainObject(e) && e));
      };
    }), w._evalUrl = function (e) {
      return w.ajax({ url: e, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 });
    }, w.fn.extend({ wrapAll: function wrapAll(e) {
        var t;return this[0] && (g(e) && (e = e.call(this[0])), t = w(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
          var e = this;while (e.firstElementChild) {
            e = e.firstElementChild;
          }return e;
        }).append(this)), this;
      }, wrapInner: function wrapInner(e) {
        return g(e) ? this.each(function (t) {
          w(this).wrapInner(e.call(this, t));
        }) : this.each(function () {
          var t = w(this),
              n = t.contents();n.length ? n.wrapAll(e) : t.append(e);
        });
      }, wrap: function wrap(e) {
        var t = g(e);return this.each(function (n) {
          w(this).wrapAll(t ? e.call(this, n) : e);
        });
      }, unwrap: function unwrap(e) {
        return this.parent(e).not("body").each(function () {
          w(this).replaceWith(this.childNodes);
        }), this;
      } }), w.expr.pseudos.hidden = function (e) {
      return !w.expr.pseudos.visible(e);
    }, w.expr.pseudos.visible = function (e) {
      return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, w.ajaxSettings.xhr = function () {
      try {
        return new e.XMLHttpRequest();
      } catch (e) {}
    };var Vt = { 0: 200, 1223: 204 },
        Gt = w.ajaxSettings.xhr();h.cors = !!Gt && "withCredentials" in Gt, h.ajax = Gt = !!Gt, w.ajaxTransport(function (t) {
      var _n, r;if (h.cors || Gt && !t.crossDomain) return { send: function send(i, o) {
          var a,
              s = t.xhr();if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (a in t.xhrFields) {
            s[a] = t.xhrFields[a];
          }t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");for (a in i) {
            s.setRequestHeader(a, i[a]);
          }_n = function n(e) {
            return function () {
              _n && (_n = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(Vt[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? { binary: s.response } : { text: s.responseText }, s.getAllResponseHeaders()));
            };
          }, s.onload = _n(), r = s.onerror = s.ontimeout = _n("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function () {
            4 === s.readyState && e.setTimeout(function () {
              _n && r();
            });
          }, _n = _n("abort");try {
            s.send(t.hasContent && t.data || null);
          } catch (e) {
            if (_n) throw e;
          }
        }, abort: function abort() {
          _n && _n();
        } };
    }), w.ajaxPrefilter(function (e) {
      e.crossDomain && (e.contents.script = !1);
    }), w.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function textScript(e) {
          return w.globalEval(e), e;
        } } }), w.ajaxPrefilter("script", function (e) {
      void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), w.ajaxTransport("script", function (e) {
      if (e.crossDomain) {
        var t, _n2;return { send: function send(i, o) {
            t = w("<script>").prop({ charset: e.scriptCharset, src: e.url }).on("load error", _n2 = function n(e) {
              t.remove(), _n2 = null, e && o("error" === e.type ? 404 : 200, e.type);
            }), r.head.appendChild(t[0]);
          }, abort: function abort() {
            _n2 && _n2();
          } };
      }
    });var Yt = [],
        Qt = /(=)\?(?=&|$)|\?\?/;w.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
        var e = Yt.pop() || w.expando + "_" + Et++;return this[e] = !0, e;
      } }), w.ajaxPrefilter("json jsonp", function (t, n, r) {
      var i,
          o,
          a,
          s = !1 !== t.jsonp && (Qt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Qt.test(t.data) && "data");if (s || "jsonp" === t.dataTypes[0]) return i = t.jsonpCallback = g(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, s ? t[s] = t[s].replace(Qt, "$1" + i) : !1 !== t.jsonp && (t.url += (kt.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), t.converters["script json"] = function () {
        return a || w.error(i + " was not called"), a[0];
      }, t.dataTypes[0] = "json", o = e[i], e[i] = function () {
        a = arguments;
      }, r.always(function () {
        void 0 === o ? w(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Yt.push(i)), a && g(o) && o(a[0]), a = o = void 0;
      }), "script";
    }), h.createHTMLDocument = function () {
      var e = r.implementation.createHTMLDocument("").body;return e.innerHTML = "<form></form><form></form>", 2 === e.childNodes.length;
    }(), w.parseHTML = function (e, t, n) {
      if ("string" != typeof e) return [];"boolean" == typeof t && (n = t, t = !1);var i, o, a;return t || (h.createHTMLDocument ? ((i = (t = r.implementation.createHTMLDocument("")).createElement("base")).href = r.location.href, t.head.appendChild(i)) : t = r), o = A.exec(e), a = !n && [], o ? [t.createElement(o[1])] : (o = xe([e], t, a), a && a.length && w(a).remove(), w.merge([], o.childNodes));
    }, w.fn.load = function (e, t, n) {
      var r,
          i,
          o,
          a = this,
          s = e.indexOf(" ");return s > -1 && (r = vt(e.slice(s)), e = e.slice(0, s)), g(t) ? (n = t, t = void 0) : t && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (i = "POST"), a.length > 0 && w.ajax({ url: e, type: i || "GET", dataType: "html", data: t }).done(function (e) {
        o = arguments, a.html(r ? w("<div>").append(w.parseHTML(e)).find(r) : e);
      }).always(n && function (e, t) {
        a.each(function () {
          n.apply(this, o || [e.responseText, t, e]);
        });
      }), this;
    }, w.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
      w.fn[t] = function (e) {
        return this.on(t, e);
      };
    }), w.expr.pseudos.animated = function (e) {
      return w.grep(w.timers, function (t) {
        return e === t.elem;
      }).length;
    }, w.offset = { setOffset: function setOffset(e, t, n) {
        var r,
            i,
            o,
            a,
            s,
            u,
            l,
            c = w.css(e, "position"),
            f = w(e),
            p = {};"static" === c && (e.style.position = "relative"), s = f.offset(), o = w.css(e, "top"), u = w.css(e, "left"), (l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1) ? (a = (r = f.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), g(t) && (t = t.call(e, n, w.extend({}, s))), null != t.top && (p.top = t.top - s.top + a), null != t.left && (p.left = t.left - s.left + i), "using" in t ? t.using.call(e, p) : f.css(p);
      } }, w.fn.extend({ offset: function offset(e) {
        if (arguments.length) return void 0 === e ? this : this.each(function (t) {
          w.offset.setOffset(this, e, t);
        });var t,
            n,
            r = this[0];if (r) return r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, { top: t.top + n.pageYOffset, left: t.left + n.pageXOffset }) : { top: 0, left: 0 };
      }, position: function position() {
        if (this[0]) {
          var e,
              t,
              n,
              r = this[0],
              i = { top: 0, left: 0 };if ("fixed" === w.css(r, "position")) t = r.getBoundingClientRect();else {
            t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;while (e && (e === n.body || e === n.documentElement) && "static" === w.css(e, "position")) {
              e = e.parentNode;
            }e && e !== r && 1 === e.nodeType && ((i = w(e).offset()).top += w.css(e, "borderTopWidth", !0), i.left += w.css(e, "borderLeftWidth", !0));
          }return { top: t.top - i.top - w.css(r, "marginTop", !0), left: t.left - i.left - w.css(r, "marginLeft", !0) };
        }
      }, offsetParent: function offsetParent() {
        return this.map(function () {
          var e = this.offsetParent;while (e && "static" === w.css(e, "position")) {
            e = e.offsetParent;
          }return e || be;
        });
      } }), w.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (e, t) {
      var n = "pageYOffset" === t;w.fn[e] = function (r) {
        return z(this, function (e, r, i) {
          var o;if (y(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
        }, e, r, arguments.length);
      };
    }), w.each(["top", "left"], function (e, t) {
      w.cssHooks[t] = _e(h.pixelPosition, function (e, n) {
        if (n) return n = Fe(e, t), We.test(n) ? w(e).position()[t] + "px" : n;
      });
    }), w.each({ Height: "height", Width: "width" }, function (e, t) {
      w.each({ padding: "inner" + e, content: t, "": "outer" + e }, function (n, r) {
        w.fn[r] = function (i, o) {
          var a = arguments.length && (n || "boolean" != typeof i),
              s = n || (!0 === i || !0 === o ? "margin" : "border");return z(this, function (t, n, i) {
            var o;return y(t) ? 0 === r.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === i ? w.css(t, n, s) : w.style(t, n, i, s);
          }, t, a ? i : void 0, a);
        };
      });
    }), w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (e, t) {
      w.fn[t] = function (e, n) {
        return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
      };
    }), w.fn.extend({ hover: function hover(e, t) {
        return this.mouseenter(e).mouseleave(t || e);
      } }), w.fn.extend({ bind: function bind(e, t, n) {
        return this.on(e, null, t, n);
      }, unbind: function unbind(e, t) {
        return this.off(e, null, t);
      }, delegate: function delegate(e, t, n, r) {
        return this.on(t, e, n, r);
      }, undelegate: function undelegate(e, t, n) {
        return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
      } }), w.proxy = function (e, t) {
      var n, r, i;if ("string" == typeof t && (n = e[t], t = e, e = n), g(e)) return r = o.call(arguments, 2), i = function i() {
        return e.apply(t || this, r.concat(o.call(arguments)));
      }, i.guid = e.guid = e.guid || w.guid++, i;
    }, w.holdReady = function (e) {
      e ? w.readyWait++ : w.ready(!0);
    }, w.isArray = Array.isArray, w.parseJSON = JSON.parse, w.nodeName = N, w.isFunction = g, w.isWindow = y, w.camelCase = G, w.type = x, w.now = Date.now, w.isNumeric = function (e) {
      var t = w.type(e);return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, "function" == typeof define && define.amd && define("jquery", [], function () {
      return w;
    });var Jt = e.jQuery,
        Kt = e.$;return w.noConflict = function (t) {
      return e.$ === w && (e.$ = Kt), t && e.jQuery === w && (e.jQuery = Jt), w;
    }, t || (e.jQuery = e.$ = w), w;
  });
});

},{}],7:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof exports !== "undefined") {
    factory();
  } else {
    var mod = {
      exports: {}
    };
    factory();
    global.jqueryFormMin = mod.exports;
  }
})(undefined, function () {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /*!
   * jQuery Form Plugin
   * version: 3.51.0-2014.06.20
   * Requires jQuery v1.5 or later
   * Copyright (c) 2014 M. Alsup
   * Examples and documentation at: http://malsup.com/jquery/form/
   * Project repository: https://github.com/malsup/form
   * Dual licensed under the MIT and GPL licenses.
   * https://github.com/malsup/form#copyright-and-license
   */
  !function (e) {
    "use strict";

    "function" == typeof define && define.amd ? define(["jquery"], e) : e("undefined" != typeof jQuery ? jQuery : window.Zepto);
  }(function (e) {
    "use strict";

    function t(t) {
      var r = t.data;t.isDefaultPrevented() || (t.preventDefault(), e(t.target).ajaxSubmit(r));
    }function r(t) {
      var r = t.target,
          a = e(r);if (!a.is("[type=submit],[type=image]")) {
        var n = a.closest("[type=submit]");if (0 === n.length) return;r = n[0];
      }var i = this;if (i.clk = r, "image" == r.type) if (void 0 !== t.offsetX) i.clk_x = t.offsetX, i.clk_y = t.offsetY;else if ("function" == typeof e.fn.offset) {
        var o = a.offset();i.clk_x = t.pageX - o.left, i.clk_y = t.pageY - o.top;
      } else i.clk_x = t.pageX - r.offsetLeft, i.clk_y = t.pageY - r.offsetTop;setTimeout(function () {
        i.clk = i.clk_x = i.clk_y = null;
      }, 100);
    }function a() {
      if (e.fn.ajaxSubmit.debug) {
        var t = "[jquery.form] " + Array.prototype.join.call(arguments, "");window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t);
      }
    }var n = {};n.fileapi = void 0 !== e("<input type='file'/>").get(0).files, n.formdata = void 0 !== window.FormData;var i = !!e.fn.prop;e.fn.attr2 = function () {
      if (!i) return this.attr.apply(this, arguments);var e = this.prop.apply(this, arguments);return e && e.jquery || "string" == typeof e ? e : this.attr.apply(this, arguments);
    }, e.fn.ajaxSubmit = function (t) {
      function r(r) {
        var a,
            n,
            i = e.param(r, t.traditional).split("&"),
            o = i.length,
            s = [];for (a = 0; o > a; a++) {
          i[a] = i[a].replace(/\+/g, " "), n = i[a].split("="), s.push([decodeURIComponent(n[0]), decodeURIComponent(n[1])]);
        }return s;
      }function o(a) {
        for (var n = new FormData(), i = 0; i < a.length; i++) {
          n.append(a[i].name, a[i].value);
        }if (t.extraData) {
          var o = r(t.extraData);for (i = 0; i < o.length; i++) {
            o[i] && n.append(o[i][0], o[i][1]);
          }
        }t.data = null;var s = e.extend(!0, {}, e.ajaxSettings, t, { contentType: !1, processData: !1, cache: !1, type: u || "POST" });t.uploadProgress && (s.xhr = function () {
          var r = e.ajaxSettings.xhr();return r.upload && r.upload.addEventListener("progress", function (e) {
            var r = 0,
                a = e.loaded || e.position,
                n = e.total;e.lengthComputable && (r = Math.ceil(a / n * 100)), t.uploadProgress(e, a, n, r);
          }, !1), r;
        }), s.data = null;var c = s.beforeSend;return s.beforeSend = function (e, r) {
          r.data = t.formData ? t.formData : n, c && c.call(this, e, r);
        }, e.ajax(s);
      }function s(r) {
        function n(e) {
          var t = null;try {
            e.contentWindow && (t = e.contentWindow.document);
          } catch (r) {
            a("cannot get iframe.contentWindow document: " + r);
          }if (t) return t;try {
            t = e.contentDocument ? e.contentDocument : e.document;
          } catch (r) {
            a("cannot get iframe.contentDocument: " + r), t = e.document;
          }return t;
        }function o() {
          function t() {
            try {
              var e = n(g).readyState;a("state = " + e), e && "uninitialized" == e.toLowerCase() && setTimeout(t, 50);
            } catch (r) {
              a("Server abort: ", r, " (", r.name, ")"), s(k), j && clearTimeout(j), j = void 0;
            }
          }var r = f.attr2("target"),
              i = f.attr2("action"),
              o = "multipart/form-data",
              c = f.attr("enctype") || f.attr("encoding") || o;w.setAttribute("target", p), (!u || /post/i.test(u)) && w.setAttribute("method", "POST"), i != m.url && w.setAttribute("action", m.url), m.skipEncodingOverride || u && !/post/i.test(u) || f.attr({ encoding: "multipart/form-data", enctype: "multipart/form-data" }), m.timeout && (j = setTimeout(function () {
            T = !0, s(D);
          }, m.timeout));var l = [];try {
            if (m.extraData) for (var d in m.extraData) {
              m.extraData.hasOwnProperty(d) && l.push(e.isPlainObject(m.extraData[d]) && m.extraData[d].hasOwnProperty("name") && m.extraData[d].hasOwnProperty("value") ? e('<input type="hidden" name="' + m.extraData[d].name + '">').val(m.extraData[d].value).appendTo(w)[0] : e('<input type="hidden" name="' + d + '">').val(m.extraData[d]).appendTo(w)[0]);
            }m.iframeTarget || v.appendTo("body"), g.attachEvent ? g.attachEvent("onload", s) : g.addEventListener("load", s, !1), setTimeout(t, 15);try {
              w.submit();
            } catch (h) {
              var x = document.createElement("form").submit;x.apply(w);
            }
          } finally {
            w.setAttribute("action", i), w.setAttribute("enctype", c), r ? w.setAttribute("target", r) : f.removeAttr("target"), e(l).remove();
          }
        }function s(t) {
          if (!x.aborted && !F) {
            if (M = n(g), M || (a("cannot access response document"), t = k), t === D && x) return x.abort("timeout"), void S.reject(x, "timeout");if (t == k && x) return x.abort("server abort"), void S.reject(x, "error", "server abort");if (M && M.location.href != m.iframeSrc || T) {
              g.detachEvent ? g.detachEvent("onload", s) : g.removeEventListener("load", s, !1);var r,
                  i = "success";try {
                if (T) throw "timeout";var o = "xml" == m.dataType || M.XMLDocument || e.isXMLDoc(M);if (a("isXml=" + o), !o && window.opera && (null === M.body || !M.body.innerHTML) && --O) return a("requeing onLoad callback, DOM not available"), void setTimeout(s, 250);var u = M.body ? M.body : M.documentElement;x.responseText = u ? u.innerHTML : null, x.responseXML = M.XMLDocument ? M.XMLDocument : M, o && (m.dataType = "xml"), x.getResponseHeader = function (e) {
                  var t = { "content-type": m.dataType };return t[e.toLowerCase()];
                }, u && (x.status = Number(u.getAttribute("status")) || x.status, x.statusText = u.getAttribute("statusText") || x.statusText);var c = (m.dataType || "").toLowerCase(),
                    l = /(json|script|text)/.test(c);if (l || m.textarea) {
                  var f = M.getElementsByTagName("textarea")[0];if (f) x.responseText = f.value, x.status = Number(f.getAttribute("status")) || x.status, x.statusText = f.getAttribute("statusText") || x.statusText;else if (l) {
                    var p = M.getElementsByTagName("pre")[0],
                        h = M.getElementsByTagName("body")[0];p ? x.responseText = p.textContent ? p.textContent : p.innerText : h && (x.responseText = h.textContent ? h.textContent : h.innerText);
                  }
                } else "xml" == c && !x.responseXML && x.responseText && (x.responseXML = X(x.responseText));try {
                  E = _(x, c, m);
                } catch (y) {
                  i = "parsererror", x.error = r = y || i;
                }
              } catch (y) {
                a("error caught: ", y), i = "error", x.error = r = y || i;
              }x.aborted && (a("upload aborted"), i = null), x.status && (i = x.status >= 200 && x.status < 300 || 304 === x.status ? "success" : "error"), "success" === i ? (m.success && m.success.call(m.context, E, "success", x), S.resolve(x.responseText, "success", x), d && e.event.trigger("ajaxSuccess", [x, m])) : i && (void 0 === r && (r = x.statusText), m.error && m.error.call(m.context, x, i, r), S.reject(x, "error", r), d && e.event.trigger("ajaxError", [x, m, r])), d && e.event.trigger("ajaxComplete", [x, m]), d && ! --e.active && e.event.trigger("ajaxStop"), m.complete && m.complete.call(m.context, x, i), F = !0, m.timeout && clearTimeout(j), setTimeout(function () {
                m.iframeTarget ? v.attr("src", m.iframeSrc) : v.remove(), x.responseXML = null;
              }, 100);
            }
          }
        }var c,
            l,
            m,
            d,
            p,
            v,
            g,
            x,
            y,
            b,
            T,
            j,
            w = f[0],
            S = e.Deferred();if (S.abort = function (e) {
          x.abort(e);
        }, r) for (l = 0; l < h.length; l++) {
          c = e(h[l]), i ? c.prop("disabled", !1) : c.removeAttr("disabled");
        }if (m = e.extend(!0, {}, e.ajaxSettings, t), m.context = m.context || m, p = "jqFormIO" + new Date().getTime(), m.iframeTarget ? (v = e(m.iframeTarget), b = v.attr2("name"), b ? p = b : v.attr2("name", p)) : (v = e('<iframe name="' + p + '" src="' + m.iframeSrc + '" />'), v.css({ position: "absolute", top: "-1000px", left: "-1000px" })), g = v[0], x = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: "n/a", getAllResponseHeaders: function getAllResponseHeaders() {}, getResponseHeader: function getResponseHeader() {}, setRequestHeader: function setRequestHeader() {}, abort: function abort(t) {
            var r = "timeout" === t ? "timeout" : "aborted";a("aborting upload... " + r), this.aborted = 1;try {
              g.contentWindow.document.execCommand && g.contentWindow.document.execCommand("Stop");
            } catch (n) {}v.attr("src", m.iframeSrc), x.error = r, m.error && m.error.call(m.context, x, r, t), d && e.event.trigger("ajaxError", [x, m, r]), m.complete && m.complete.call(m.context, x, r);
          } }, d = m.global, d && 0 === e.active++ && e.event.trigger("ajaxStart"), d && e.event.trigger("ajaxSend", [x, m]), m.beforeSend && m.beforeSend.call(m.context, x, m) === !1) return m.global && e.active--, S.reject(), S;if (x.aborted) return S.reject(), S;y = w.clk, y && (b = y.name, b && !y.disabled && (m.extraData = m.extraData || {}, m.extraData[b] = y.value, "image" == y.type && (m.extraData[b + ".x"] = w.clk_x, m.extraData[b + ".y"] = w.clk_y)));var D = 1,
            k = 2,
            A = e("meta[name=csrf-token]").attr("content"),
            L = e("meta[name=csrf-param]").attr("content");L && A && (m.extraData = m.extraData || {}, m.extraData[L] = A), m.forceSync ? o() : setTimeout(o, 10);var E,
            M,
            F,
            O = 50,
            X = e.parseXML || function (e, t) {
          return window.ActiveXObject ? (t = new ActiveXObject("Microsoft.XMLDOM"), t.async = "false", t.loadXML(e)) : t = new DOMParser().parseFromString(e, "text/xml"), t && t.documentElement && "parsererror" != t.documentElement.nodeName ? t : null;
        },
            C = e.parseJSON || function (e) {
          return window.eval("(" + e + ")");
        },
            _ = function _(t, r, a) {
          var n = t.getResponseHeader("content-type") || "",
              i = "xml" === r || !r && n.indexOf("xml") >= 0,
              o = i ? t.responseXML : t.responseText;return i && "parsererror" === o.documentElement.nodeName && e.error && e.error("parsererror"), a && a.dataFilter && (o = a.dataFilter(o, r)), "string" == typeof o && ("json" === r || !r && n.indexOf("json") >= 0 ? o = C(o) : ("script" === r || !r && n.indexOf("javascript") >= 0) && e.globalEval(o)), o;
        };return S;
      }if (!this.length) return a("ajaxSubmit: skipping submit process - no element selected"), this;var u,
          c,
          l,
          f = this;"function" == typeof t ? t = { success: t } : void 0 === t && (t = {}), u = t.type || this.attr2("method"), c = t.url || this.attr2("action"), l = "string" == typeof c ? e.trim(c) : "", l = l || window.location.href || "", l && (l = (l.match(/^([^#]+)/) || [])[1]), t = e.extend(!0, { url: l, success: e.ajaxSettings.success, type: u || e.ajaxSettings.type, iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank" }, t);var m = {};if (this.trigger("form-pre-serialize", [this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;if (t.beforeSerialize && t.beforeSerialize(this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSerialize callback"), this;var d = t.traditional;void 0 === d && (d = e.ajaxSettings.traditional);var p,
          h = [],
          v = this.formToArray(t.semantic, h);if (t.data && (t.extraData = t.data, p = e.param(t.data, d)), t.beforeSubmit && t.beforeSubmit(v, this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSubmit callback"), this;if (this.trigger("form-submit-validate", [v, this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;var g = e.param(v, d);p && (g = g ? g + "&" + p : p), "GET" == t.type.toUpperCase() ? (t.url += (t.url.indexOf("?") >= 0 ? "&" : "?") + g, t.data = null) : t.data = g;var x = [];if (t.resetForm && x.push(function () {
        f.resetForm();
      }), t.clearForm && x.push(function () {
        f.clearForm(t.includeHidden);
      }), !t.dataType && t.target) {
        var y = t.success || function () {};x.push(function (r) {
          var a = t.replaceTarget ? "replaceWith" : "html";e(t.target)[a](r).each(y, arguments);
        });
      } else t.success && x.push(t.success);if (t.success = function (e, r, a) {
        for (var n = t.context || this, i = 0, o = x.length; o > i; i++) {
          x[i].apply(n, [e, r, a || f, f]);
        }
      }, t.error) {
        var b = t.error;t.error = function (e, r, a) {
          var n = t.context || this;b.apply(n, [e, r, a, f]);
        };
      }if (t.complete) {
        var T = t.complete;t.complete = function (e, r) {
          var a = t.context || this;T.apply(a, [e, r, f]);
        };
      }var j = e("input[type=file]:enabled", this).filter(function () {
        return "" !== e(this).val();
      }),
          w = j.length > 0,
          S = "multipart/form-data",
          D = f.attr("enctype") == S || f.attr("encoding") == S,
          k = n.fileapi && n.formdata;a("fileAPI :" + k);var A,
          L = (w || D) && !k;t.iframe !== !1 && (t.iframe || L) ? t.closeKeepAlive ? e.get(t.closeKeepAlive, function () {
        A = s(v);
      }) : A = s(v) : A = (w || D) && k ? o(v) : e.ajax(t), f.removeData("jqxhr").data("jqxhr", A);for (var E = 0; E < h.length; E++) {
        h[E] = null;
      }return this.trigger("form-submit-notify", [this, t]), this;
    }, e.fn.ajaxForm = function (n) {
      if (n = n || {}, n.delegation = n.delegation && e.isFunction(e.fn.on), !n.delegation && 0 === this.length) {
        var i = { s: this.selector, c: this.context };return !e.isReady && i.s ? (a("DOM not ready, queuing ajaxForm"), e(function () {
          e(i.s, i.c).ajaxForm(n);
        }), this) : (a("terminating; zero elements found by selector" + (e.isReady ? "" : " (DOM not ready)")), this);
      }return n.delegation ? (e(document).off("submit.form-plugin", this.selector, t).off("click.form-plugin", this.selector, r).on("submit.form-plugin", this.selector, n, t).on("click.form-plugin", this.selector, n, r), this) : this.ajaxFormUnbind().bind("submit.form-plugin", n, t).bind("click.form-plugin", n, r);
    }, e.fn.ajaxFormUnbind = function () {
      return this.unbind("submit.form-plugin click.form-plugin");
    }, e.fn.formToArray = function (t, r) {
      var a = [];if (0 === this.length) return a;var i,
          o = this[0],
          s = this.attr("id"),
          u = t ? o.getElementsByTagName("*") : o.elements;if (u && !/MSIE [678]/.test(navigator.userAgent) && (u = e(u).get()), s && (i = e(':input[form="' + s + '"]').get(), i.length && (u = (u || []).concat(i))), !u || !u.length) return a;var c, l, f, m, d, p, h;for (c = 0, p = u.length; p > c; c++) {
        if (d = u[c], f = d.name, f && !d.disabled) if (t && o.clk && "image" == d.type) o.clk == d && (a.push({ name: f, value: e(d).val(), type: d.type }), a.push({ name: f + ".x", value: o.clk_x }, { name: f + ".y", value: o.clk_y }));else if (m = e.fieldValue(d, !0), m && m.constructor == Array) for (r && r.push(d), l = 0, h = m.length; h > l; l++) {
          a.push({ name: f, value: m[l] });
        } else if (n.fileapi && "file" == d.type) {
          r && r.push(d);var v = d.files;if (v.length) for (l = 0; l < v.length; l++) {
            a.push({ name: f, value: v[l], type: d.type });
          } else a.push({ name: f, value: "", type: d.type });
        } else null !== m && "undefined" != typeof m && (r && r.push(d), a.push({ name: f, value: m, type: d.type, required: d.required }));
      }if (!t && o.clk) {
        var g = e(o.clk),
            x = g[0];f = x.name, f && !x.disabled && "image" == x.type && (a.push({ name: f, value: g.val() }), a.push({ name: f + ".x", value: o.clk_x }, { name: f + ".y", value: o.clk_y }));
      }return a;
    }, e.fn.formSerialize = function (t) {
      return e.param(this.formToArray(t));
    }, e.fn.fieldSerialize = function (t) {
      var r = [];return this.each(function () {
        var a = this.name;if (a) {
          var n = e.fieldValue(this, t);if (n && n.constructor == Array) for (var i = 0, o = n.length; o > i; i++) {
            r.push({ name: a, value: n[i] });
          } else null !== n && "undefined" != typeof n && r.push({ name: this.name, value: n });
        }
      }), e.param(r);
    }, e.fn.fieldValue = function (t) {
      for (var r = [], a = 0, n = this.length; n > a; a++) {
        var i = this[a],
            o = e.fieldValue(i, t);null === o || "undefined" == typeof o || o.constructor == Array && !o.length || (o.constructor == Array ? e.merge(r, o) : r.push(o));
      }return r;
    }, e.fieldValue = function (t, r) {
      var a = t.name,
          n = t.type,
          i = t.tagName.toLowerCase();if (void 0 === r && (r = !0), r && (!a || t.disabled || "reset" == n || "button" == n || ("checkbox" == n || "radio" == n) && !t.checked || ("submit" == n || "image" == n) && t.form && t.form.clk != t || "select" == i && -1 == t.selectedIndex)) return null;if ("select" == i) {
        var o = t.selectedIndex;if (0 > o) return null;for (var s = [], u = t.options, c = "select-one" == n, l = c ? o + 1 : u.length, f = c ? o : 0; l > f; f++) {
          var m = u[f];if (m.selected) {
            var d = m.value;if (d || (d = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), c) return d;s.push(d);
          }
        }return s;
      }return e(t).val();
    }, e.fn.clearForm = function (t) {
      return this.each(function () {
        e("input,select,textarea", this).clearFields(t);
      });
    }, e.fn.clearFields = e.fn.clearInputs = function (t) {
      var r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function () {
        var a = this.type,
            n = this.tagName.toLowerCase();r.test(a) || "textarea" == n ? this.value = "" : "checkbox" == a || "radio" == a ? this.checked = !1 : "select" == n ? this.selectedIndex = -1 : "file" == a ? /MSIE/.test(navigator.userAgent) ? e(this).replaceWith(e(this).clone(!0)) : e(this).val("") : t && (t === !0 && /hidden/.test(a) || "string" == typeof t && e(this).is(t)) && (this.value = "");
      });
    }, e.fn.resetForm = function () {
      return this.each(function () {
        ("function" == typeof this.reset || "object" == _typeof(this.reset) && !this.reset.nodeType) && this.reset();
      });
    }, e.fn.enable = function (e) {
      return void 0 === e && (e = !0), this.each(function () {
        this.disabled = !e;
      });
    }, e.fn.selected = function (t) {
      return void 0 === t && (t = !0), this.each(function () {
        var r = this.type;if ("checkbox" == r || "radio" == r) this.checked = t;else if ("option" == this.tagName.toLowerCase()) {
          var a = e(this).parent("select");t && a[0] && "select-one" == a[0].type && a.find("option").selected(!1), this.selected = t;
        }
      });
    }, e.fn.ajaxSubmit.debug = !1;
  });
});

},{}],8:[function(require,module,exports){
'use strict';

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
    if (typeof define === "function" && define.amd) {
        define(['module', 'exports', 'jquery'], factory);
    } else if (typeof exports !== "undefined") {
        factory(module, exports, require('jquery'));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod, mod.exports, global.jquery);
        global.jqueryMask = mod.exports;
    }
})(undefined, function (module, exports) {
    'use strict';

    var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
    };

    /**
     * jquery.mask.js
     * @version: v1.14.15
     * @author: Igor Escobar
     *
     * Created by Igor Escobar on 2012-03-10. Please report any bug at github.com/igorescobar/jQuery-Mask-Plugin
     *
     * Copyright (c) 2012 Igor Escobar http://igorescobar.com
     *
     * The MIT License (http://www.opensource.org/licenses/mit-license.php)
     *
     * Permission is hereby granted, free of charge, to any person
     * obtaining a copy of this software and associated documentation
     * files (the "Software"), to deal in the Software without
     * restriction, including without limitation the rights to use,
     * copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following
     * conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
     * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
     * OTHER DEALINGS IN THE SOFTWARE.
     */

    /* jshint laxbreak: true */
    /* jshint maxcomplexity:17 */
    /* global define */

    // UMD (Universal Module Definition) patterns for JavaScript modules that work everywhere.
    // https://github.com/umdjs/umd/blob/master/templates/jqueryPlugin.js
    (function (factory, jQuery, Zepto) {

        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
            module.exports = factory();
        } else {
            factory(jQuery || Zepto);
        }
    })(function ($) {
        'use strict';

        var Mask = function Mask(el, mask, options) {

            var p = {
                invalid: [],
                getCaret: function getCaret() {
                    try {
                        var sel,
                            pos = 0,
                            ctrl = el.get(0),
                            dSel = document.selection,
                            cSelStart = ctrl.selectionStart;

                        // IE Support
                        if (dSel && navigator.appVersion.indexOf('MSIE 10') === -1) {
                            sel = dSel.createRange();
                            sel.moveStart('character', -p.val().length);
                            pos = sel.text.length;
                        }
                        // Firefox support
                        else if (cSelStart || cSelStart === '0') {
                                pos = cSelStart;
                            }

                        return pos;
                    } catch (e) {}
                },
                setCaret: function setCaret(pos) {
                    try {
                        if (el.is(':focus')) {
                            var range,
                                ctrl = el.get(0);

                            // Firefox, WebKit, etc..
                            if (ctrl.setSelectionRange) {
                                ctrl.setSelectionRange(pos, pos);
                            } else {
                                // IE
                                range = ctrl.createTextRange();
                                range.collapse(true);
                                range.moveEnd('character', pos);
                                range.moveStart('character', pos);
                                range.select();
                            }
                        }
                    } catch (e) {}
                },
                events: function events() {
                    el.on('keydown.mask', function (e) {
                        el.data('mask-keycode', e.keyCode || e.which);
                        el.data('mask-previus-value', el.val());
                        el.data('mask-previus-caret-pos', p.getCaret());
                        p.maskDigitPosMapOld = p.maskDigitPosMap;
                    }).on($.jMaskGlobals.useInput ? 'input.mask' : 'keyup.mask', p.behaviour).on('paste.mask drop.mask', function () {
                        setTimeout(function () {
                            el.keydown().keyup();
                        }, 100);
                    }).on('change.mask', function () {
                        el.data('changed', true);
                    }).on('blur.mask', function () {
                        if (oldValue !== p.val() && !el.data('changed')) {
                            el.trigger('change');
                        }
                        el.data('changed', false);
                    })
                    // it's very important that this callback remains in this position
                    // otherwhise oldValue it's going to work buggy
                    .on('blur.mask', function () {
                        oldValue = p.val();
                    })
                    // select all text on focus
                    .on('focus.mask', function (e) {
                        if (options.selectOnFocus === true) {
                            $(e.target).select();
                        }
                    })
                    // clear the value if it not complete the mask
                    .on('focusout.mask', function () {
                        if (options.clearIfNotMatch && !regexMask.test(p.val())) {
                            p.val('');
                        }
                    });
                },
                getRegexMask: function getRegexMask() {
                    var maskChunks = [],
                        translation,
                        pattern,
                        optional,
                        recursive,
                        oRecursive,
                        r;

                    for (var i = 0; i < mask.length; i++) {
                        translation = jMask.translation[mask.charAt(i)];

                        if (translation) {

                            pattern = translation.pattern.toString().replace(/.{1}$|^.{1}/g, '');
                            optional = translation.optional;
                            recursive = translation.recursive;

                            if (recursive) {
                                maskChunks.push(mask.charAt(i));
                                oRecursive = { digit: mask.charAt(i), pattern: pattern };
                            } else {
                                maskChunks.push(!optional && !recursive ? pattern : pattern + '?');
                            }
                        } else {
                            maskChunks.push(mask.charAt(i).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
                        }
                    }

                    r = maskChunks.join('');

                    if (oRecursive) {
                        r = r.replace(new RegExp('(' + oRecursive.digit + '(.*' + oRecursive.digit + ')?)'), '($1)?').replace(new RegExp(oRecursive.digit, 'g'), oRecursive.pattern);
                    }

                    return new RegExp(r);
                },
                destroyEvents: function destroyEvents() {
                    el.off(['input', 'keydown', 'keyup', 'paste', 'drop', 'blur', 'focusout', ''].join('.mask '));
                },
                val: function val(v) {
                    var isInput = el.is('input'),
                        method = isInput ? 'val' : 'text',
                        r;

                    if (arguments.length > 0) {
                        if (el[method]() !== v) {
                            el[method](v);
                        }
                        r = el;
                    } else {
                        r = el[method]();
                    }

                    return r;
                },
                calculateCaretPosition: function calculateCaretPosition() {
                    var oldVal = el.data('mask-previus-value') || '',
                        newVal = p.getMasked(),
                        caretPosNew = p.getCaret();
                    if (oldVal !== newVal) {
                        var caretPosOld = el.data('mask-previus-caret-pos') || 0,
                            newValL = newVal.length,
                            oldValL = oldVal.length,
                            maskDigitsBeforeCaret = 0,
                            maskDigitsAfterCaret = 0,
                            maskDigitsBeforeCaretAll = 0,
                            maskDigitsBeforeCaretAllOld = 0,
                            i = 0;

                        for (i = caretPosNew; i < newValL; i++) {
                            if (!p.maskDigitPosMap[i]) {
                                break;
                            }
                            maskDigitsAfterCaret++;
                        }

                        for (i = caretPosNew - 1; i >= 0; i--) {
                            if (!p.maskDigitPosMap[i]) {
                                break;
                            }
                            maskDigitsBeforeCaret++;
                        }

                        for (i = caretPosNew - 1; i >= 0; i--) {
                            if (p.maskDigitPosMap[i]) {
                                maskDigitsBeforeCaretAll++;
                            }
                        }

                        for (i = caretPosOld - 1; i >= 0; i--) {
                            if (p.maskDigitPosMapOld[i]) {
                                maskDigitsBeforeCaretAllOld++;
                            }
                        }

                        // if the cursor is at the end keep it there
                        if (caretPosNew > oldValL) {
                            caretPosNew = newValL * 10;
                        } else if (caretPosOld >= caretPosNew && caretPosOld !== oldValL) {
                            if (!p.maskDigitPosMapOld[caretPosNew]) {
                                var caretPos = caretPosNew;
                                caretPosNew -= maskDigitsBeforeCaretAllOld - maskDigitsBeforeCaretAll;
                                caretPosNew -= maskDigitsBeforeCaret;
                                if (p.maskDigitPosMap[caretPosNew]) {
                                    caretPosNew = caretPos;
                                }
                            }
                        } else if (caretPosNew > caretPosOld) {
                            caretPosNew += maskDigitsBeforeCaretAll - maskDigitsBeforeCaretAllOld;
                            caretPosNew += maskDigitsAfterCaret;
                        }
                    }
                    return caretPosNew;
                },
                behaviour: function behaviour(e) {
                    e = e || window.event;
                    p.invalid = [];

                    var keyCode = el.data('mask-keycode');

                    if ($.inArray(keyCode, jMask.byPassKeys) === -1) {
                        var newVal = p.getMasked(),
                            caretPos = p.getCaret();

                        // this is a compensation to devices/browsers that don't compensate
                        // caret positioning the right way
                        setTimeout(function () {
                            p.setCaret(p.calculateCaretPosition());
                        }, $.jMaskGlobals.keyStrokeCompensation);

                        p.val(newVal);
                        p.setCaret(caretPos);
                        return p.callbacks(e);
                    }
                },
                getMasked: function getMasked(skipMaskChars, val) {
                    var buf = [],
                        value = val === undefined ? p.val() : val + '',
                        m = 0,
                        maskLen = mask.length,
                        v = 0,
                        valLen = value.length,
                        offset = 1,
                        addMethod = 'push',
                        resetPos = -1,
                        maskDigitCount = 0,
                        maskDigitPosArr = [],
                        lastMaskChar,
                        check;

                    if (options.reverse) {
                        addMethod = 'unshift';
                        offset = -1;
                        lastMaskChar = 0;
                        m = maskLen - 1;
                        v = valLen - 1;
                        check = function check() {
                            return m > -1 && v > -1;
                        };
                    } else {
                        lastMaskChar = maskLen - 1;
                        check = function check() {
                            return m < maskLen && v < valLen;
                        };
                    }

                    var lastUntranslatedMaskChar;
                    while (check()) {
                        var maskDigit = mask.charAt(m),
                            valDigit = value.charAt(v),
                            translation = jMask.translation[maskDigit];

                        if (translation) {
                            if (valDigit.match(translation.pattern)) {
                                buf[addMethod](valDigit);
                                if (translation.recursive) {
                                    if (resetPos === -1) {
                                        resetPos = m;
                                    } else if (m === lastMaskChar && m !== resetPos) {
                                        m = resetPos - offset;
                                    }

                                    if (lastMaskChar === resetPos) {
                                        m -= offset;
                                    }
                                }
                                m += offset;
                            } else if (valDigit === lastUntranslatedMaskChar) {
                                // matched the last untranslated (raw) mask character that we encountered
                                // likely an insert offset the mask character from the last entry; fall
                                // through and only increment v
                                maskDigitCount--;
                                lastUntranslatedMaskChar = undefined;
                            } else if (translation.optional) {
                                m += offset;
                                v -= offset;
                            } else if (translation.fallback) {
                                buf[addMethod](translation.fallback);
                                m += offset;
                                v -= offset;
                            } else {
                                p.invalid.push({ p: v, v: valDigit, e: translation.pattern });
                            }
                            v += offset;
                        } else {
                            if (!skipMaskChars) {
                                buf[addMethod](maskDigit);
                            }

                            if (valDigit === maskDigit) {
                                maskDigitPosArr.push(v);
                                v += offset;
                            } else {
                                lastUntranslatedMaskChar = maskDigit;
                                maskDigitPosArr.push(v + maskDigitCount);
                                maskDigitCount++;
                            }

                            m += offset;
                        }
                    }

                    var lastMaskCharDigit = mask.charAt(lastMaskChar);
                    if (maskLen === valLen + 1 && !jMask.translation[lastMaskCharDigit]) {
                        buf.push(lastMaskCharDigit);
                    }

                    var newVal = buf.join('');
                    p.mapMaskdigitPositions(newVal, maskDigitPosArr, valLen);
                    return newVal;
                },
                mapMaskdigitPositions: function mapMaskdigitPositions(newVal, maskDigitPosArr, valLen) {
                    var maskDiff = options.reverse ? newVal.length - valLen : 0;
                    p.maskDigitPosMap = {};
                    for (var i = 0; i < maskDigitPosArr.length; i++) {
                        p.maskDigitPosMap[maskDigitPosArr[i] + maskDiff] = 1;
                    }
                },
                callbacks: function callbacks(e) {
                    var val = p.val(),
                        changed = val !== oldValue,
                        defaultArgs = [val, e, el, options],
                        callback = function callback(name, criteria, args) {
                        if (typeof options[name] === 'function' && criteria) {
                            options[name].apply(this, args);
                        }
                    };

                    callback('onChange', changed === true, defaultArgs);
                    callback('onKeyPress', changed === true, defaultArgs);
                    callback('onComplete', val.length === mask.length, defaultArgs);
                    callback('onInvalid', p.invalid.length > 0, [val, e, el, p.invalid, options]);
                }
            };

            el = $(el);
            var jMask = this,
                oldValue = p.val(),
                regexMask;

            mask = typeof mask === 'function' ? mask(p.val(), undefined, el, options) : mask;

            // public methods
            jMask.mask = mask;
            jMask.options = options;
            jMask.remove = function () {
                var caret = p.getCaret();
                if (jMask.options.placeholder) {
                    el.removeAttr('placeholder');
                }
                if (el.data('mask-maxlength')) {
                    el.removeAttr('maxlength');
                }
                p.destroyEvents();
                p.val(jMask.getCleanVal());
                p.setCaret(caret);
                return el;
            };

            // get value without mask
            jMask.getCleanVal = function () {
                return p.getMasked(true);
            };

            // get masked value without the value being in the input or element
            jMask.getMaskedVal = function (val) {
                return p.getMasked(false, val);
            };

            jMask.init = function (onlyMask) {
                onlyMask = onlyMask || false;
                options = options || {};

                jMask.clearIfNotMatch = $.jMaskGlobals.clearIfNotMatch;
                jMask.byPassKeys = $.jMaskGlobals.byPassKeys;
                jMask.translation = $.extend({}, $.jMaskGlobals.translation, options.translation);

                jMask = $.extend(true, {}, jMask, options);

                regexMask = p.getRegexMask();

                if (onlyMask) {
                    p.events();
                    p.val(p.getMasked());
                } else {
                    if (options.placeholder) {
                        el.attr('placeholder', options.placeholder);
                    }

                    // this is necessary, otherwise if the user submit the form
                    // and then press the "back" button, the autocomplete will erase
                    // the data. Works fine on IE9+, FF, Opera, Safari.
                    if (el.data('mask')) {
                        el.attr('autocomplete', 'off');
                    }

                    // detect if is necessary let the user type freely.
                    // for is a lot faster than forEach.
                    for (var i = 0, maxlength = true; i < mask.length; i++) {
                        var translation = jMask.translation[mask.charAt(i)];
                        if (translation && translation.recursive) {
                            maxlength = false;
                            break;
                        }
                    }

                    if (maxlength) {
                        el.attr('maxlength', mask.length).data('mask-maxlength', true);
                    }

                    p.destroyEvents();
                    p.events();

                    var caret = p.getCaret();
                    p.val(p.getMasked());
                    p.setCaret(caret);
                }
            };

            jMask.init(!el.is('input'));
        };

        $.maskWatchers = {};
        var HTMLAttributes = function HTMLAttributes() {
            var input = $(this),
                options = {},
                prefix = 'data-mask-',
                mask = input.attr('data-mask');

            if (input.attr(prefix + 'reverse')) {
                options.reverse = true;
            }

            if (input.attr(prefix + 'clearifnotmatch')) {
                options.clearIfNotMatch = true;
            }

            if (input.attr(prefix + 'selectonfocus') === 'true') {
                options.selectOnFocus = true;
            }

            if (notSameMaskObject(input, mask, options)) {
                return input.data('mask', new Mask(this, mask, options));
            }
        },
            notSameMaskObject = function notSameMaskObject(field, mask, options) {
            options = options || {};
            var maskObject = $(field).data('mask'),
                stringify = JSON.stringify,
                value = $(field).val() || $(field).text();
            try {
                if (typeof mask === 'function') {
                    mask = mask(value);
                }
                return (typeof maskObject === 'undefined' ? 'undefined' : _typeof(maskObject)) !== 'object' || stringify(maskObject.options) !== stringify(options) || maskObject.mask !== mask;
            } catch (e) {}
        },
            eventSupported = function eventSupported(eventName) {
            var el = document.createElement('div'),
                isSupported;

            eventName = 'on' + eventName;
            isSupported = eventName in el;

            if (!isSupported) {
                el.setAttribute(eventName, 'return;');
                isSupported = typeof el[eventName] === 'function';
            }
            el = null;

            return isSupported;
        };

        $.fn.mask = function (mask, options) {
            options = options || {};
            var selector = this.selector,
                globals = $.jMaskGlobals,
                interval = globals.watchInterval,
                watchInputs = options.watchInputs || globals.watchInputs,
                maskFunction = function maskFunction() {
                if (notSameMaskObject(this, mask, options)) {
                    return $(this).data('mask', new Mask(this, mask, options));
                }
            };

            $(this).each(maskFunction);

            if (selector && selector !== '' && watchInputs) {
                clearInterval($.maskWatchers[selector]);
                $.maskWatchers[selector] = setInterval(function () {
                    $(document).find(selector).each(maskFunction);
                }, interval);
            }
            return this;
        };

        $.fn.masked = function (val) {
            return this.data('mask').getMaskedVal(val);
        };

        $.fn.unmask = function () {
            clearInterval($.maskWatchers[this.selector]);
            delete $.maskWatchers[this.selector];
            return this.each(function () {
                var dataMask = $(this).data('mask');
                if (dataMask) {
                    dataMask.remove().removeData('mask');
                }
            });
        };

        $.fn.cleanVal = function () {
            return this.data('mask').getCleanVal();
        };

        $.applyDataMask = function (selector) {
            selector = selector || $.jMaskGlobals.maskElements;
            var $selector = selector instanceof $ ? selector : $(selector);
            $selector.filter($.jMaskGlobals.dataMaskAttr).each(HTMLAttributes);
        };

        var globals = {
            maskElements: 'input,td,span,div',
            dataMaskAttr: '*[data-mask]',
            dataMask: true,
            watchInterval: 300,
            watchInputs: true,
            keyStrokeCompensation: 10,
            // old versions of chrome dont work great with input event
            useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && eventSupported('input'),
            watchDataMask: false,
            byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91],
            translation: {
                '0': { pattern: /\d/ },
                '9': { pattern: /\d/, optional: true },
                '#': { pattern: /\d/, recursive: true },
                'A': { pattern: /[a-zA-Z0-9]/ },
                'S': { pattern: /[a-zA-Z]/ }
            }
        };

        $.jMaskGlobals = $.jMaskGlobals || {};
        globals = $.jMaskGlobals = $.extend(true, {}, globals, $.jMaskGlobals);

        // looking for inputs with data-mask attribute
        if (globals.dataMask) {
            $.applyDataMask();
        }

        setInterval(function () {
            if ($.jMaskGlobals.watchDataMask) {
                $.applyDataMask();
            }
        }, globals.watchInterval);
    }, window.jQuery, window.Zepto);
});

},{"jquery":1}],9:[function(require,module,exports){
(function (global){
'use strict';

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.popperMin = mod.exports;
  }
})(undefined, function (module, exports) {
  'use strict';

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
  };

  /*
   Copyright (C) Federico Zivolo 2018
   Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
   */(function (e, t) {
    'object' == (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) && 'undefined' != typeof module ? module.exports = t() : 'function' == typeof define && define.amd ? define(t) : e.Popper = t();
  })(undefined, function () {
    'use strict';

    function e(e) {
      return e && '[object Function]' === {}.toString.call(e);
    }function t(e, t) {
      if (1 !== e.nodeType) return [];var o = getComputedStyle(e, null);return t ? o[t] : o;
    }function o(e) {
      return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
    }function n(e) {
      if (!e) return document.body;switch (e.nodeName) {case 'HTML':case 'BODY':
          return e.ownerDocument.body;case '#document':
          return e.body;}var i = t(e),
          r = i.overflow,
          p = i.overflowX,
          s = i.overflowY;return (/(auto|scroll|overlay)/.test(r + s + p) ? e : n(o(e))
      );
    }function r(e) {
      return 11 === e ? re : 10 === e ? pe : re || pe;
    }function p(e) {
      if (!e) return document.documentElement;for (var o = r(10) ? document.body : null, n = e.offsetParent; n === o && e.nextElementSibling;) {
        n = (e = e.nextElementSibling).offsetParent;
      }var i = n && n.nodeName;return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(n.nodeName) && 'static' === t(n, 'position') ? p(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;
    }function s(e) {
      var t = e.nodeName;return 'BODY' !== t && ('HTML' === t || p(e.firstElementChild) === e);
    }function d(e) {
      return null === e.parentNode ? e : d(e.parentNode);
    }function a(e, t) {
      if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
          n = o ? e : t,
          i = o ? t : e,
          r = document.createRange();r.setStart(n, 0), r.setEnd(i, 0);var l = r.commonAncestorContainer;if (e !== l && t !== l || n.contains(i)) return s(l) ? l : p(l);var f = d(e);return f.host ? a(f.host, t) : a(e, d(t).host);
    }function l(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',
          o = 'top' === t ? 'scrollTop' : 'scrollLeft',
          n = e.nodeName;if ('BODY' === n || 'HTML' === n) {
        var i = e.ownerDocument.documentElement,
            r = e.ownerDocument.scrollingElement || i;return r[o];
      }return e[o];
    }function f(e, t) {
      var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
          n = l(t, 'top'),
          i = l(t, 'left'),
          r = o ? -1 : 1;return e.top += n * r, e.bottom += n * r, e.left += i * r, e.right += i * r, e;
    }function m(e, t) {
      var o = 'x' === t ? 'Left' : 'Top',
          n = 'Left' == o ? 'Right' : 'Bottom';return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + n + 'Width'], 10);
    }function h(e, t, o, n) {
      return $(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], r(10) ? o['offset' + e] + n['margin' + ('Height' === e ? 'Top' : 'Left')] + n['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);
    }function c() {
      var e = document.body,
          t = document.documentElement,
          o = r(10) && getComputedStyle(t);return { height: h('Height', e, t, o), width: h('Width', e, t, o) };
    }function g(e) {
      return le({}, e, { right: e.left + e.width, bottom: e.top + e.height });
    }function u(e) {
      var o = {};try {
        if (r(10)) {
          o = e.getBoundingClientRect();var n = l(e, 'top'),
              i = l(e, 'left');o.top += n, o.left += i, o.bottom += n, o.right += i;
        } else o = e.getBoundingClientRect();
      } catch (t) {}var p = { left: o.left, top: o.top, width: o.right - o.left, height: o.bottom - o.top },
          s = 'HTML' === e.nodeName ? c() : {},
          d = s.width || e.clientWidth || p.right - p.left,
          a = s.height || e.clientHeight || p.bottom - p.top,
          f = e.offsetWidth - d,
          h = e.offsetHeight - a;if (f || h) {
        var u = t(e);f -= m(u, 'x'), h -= m(u, 'y'), p.width -= f, p.height -= h;
      }return g(p);
    }function b(e, o) {
      var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
          p = r(10),
          s = 'HTML' === o.nodeName,
          d = u(e),
          a = u(o),
          l = n(e),
          m = t(o),
          h = parseFloat(m.borderTopWidth, 10),
          c = parseFloat(m.borderLeftWidth, 10);i && 'HTML' === o.nodeName && (a.top = $(a.top, 0), a.left = $(a.left, 0));var b = g({ top: d.top - a.top - h, left: d.left - a.left - c, width: d.width, height: d.height });if (b.marginTop = 0, b.marginLeft = 0, !p && s) {
        var y = parseFloat(m.marginTop, 10),
            w = parseFloat(m.marginLeft, 10);b.top -= h - y, b.bottom -= h - y, b.left -= c - w, b.right -= c - w, b.marginTop = y, b.marginLeft = w;
      }return (p && !i ? o.contains(l) : o === l && 'BODY' !== l.nodeName) && (b = f(b, o)), b;
    }function y(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          o = e.ownerDocument.documentElement,
          n = b(e, o),
          i = $(o.clientWidth, window.innerWidth || 0),
          r = $(o.clientHeight, window.innerHeight || 0),
          p = t ? 0 : l(o),
          s = t ? 0 : l(o, 'left'),
          d = { top: p - n.top + n.marginTop, left: s - n.left + n.marginLeft, width: i, height: r };return g(d);
    }function w(e) {
      var n = e.nodeName;return 'BODY' === n || 'HTML' === n ? !1 : 'fixed' === t(e, 'position') || w(o(e));
    }function E(e) {
      if (!e || !e.parentElement || r()) return document.documentElement;for (var o = e.parentElement; o && 'none' === t(o, 'transform');) {
        o = o.parentElement;
      }return o || document.documentElement;
    }function v(e, t, i, r) {
      var p = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],
          s = { top: 0, left: 0 },
          d = p ? E(e) : a(e, t);if ('viewport' === r) s = y(d, p);else {
        var l;'scrollParent' === r ? (l = n(o(t)), 'BODY' === l.nodeName && (l = e.ownerDocument.documentElement)) : 'window' === r ? l = e.ownerDocument.documentElement : l = r;var f = b(l, d, p);if ('HTML' === l.nodeName && !w(d)) {
          var m = c(),
              h = m.height,
              g = m.width;s.top += f.top - f.marginTop, s.bottom = h + f.top, s.left += f.left - f.marginLeft, s.right = g + f.left;
        } else s = f;
      }return s.left += i, s.top += i, s.right -= i, s.bottom -= i, s;
    }function x(e) {
      var t = e.width,
          o = e.height;return t * o;
    }function O(e, t, o, n, i) {
      var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;if (-1 === e.indexOf('auto')) return e;var p = v(o, n, r, i),
          s = { top: { width: p.width, height: t.top - p.top }, right: { width: p.right - t.right, height: p.height }, bottom: { width: p.width, height: p.bottom - t.bottom }, left: { width: t.left - p.left, height: p.height } },
          d = Object.keys(s).map(function (e) {
        return le({ key: e }, s[e], { area: x(s[e]) });
      }).sort(function (e, t) {
        return t.area - e.area;
      }),
          a = d.filter(function (e) {
        var t = e.width,
            n = e.height;return t >= o.clientWidth && n >= o.clientHeight;
      }),
          l = 0 < a.length ? a[0].key : d[0].key,
          f = e.split('-')[1];return l + (f ? '-' + f : '');
    }function L(e, t, o) {
      var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,
          i = n ? E(t) : a(t, o);return b(o, i, n);
    }function S(e) {
      var t = getComputedStyle(e),
          o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),
          n = parseFloat(t.marginLeft) + parseFloat(t.marginRight),
          i = { width: e.offsetWidth + n, height: e.offsetHeight + o };return i;
    }function T(e) {
      var t = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };return e.replace(/left|right|bottom|top/g, function (e) {
        return t[e];
      });
    }function C(e, t, o) {
      o = o.split('-')[0];var n = S(e),
          i = { width: n.width, height: n.height },
          r = -1 !== ['right', 'left'].indexOf(o),
          p = r ? 'top' : 'left',
          s = r ? 'left' : 'top',
          d = r ? 'height' : 'width',
          a = r ? 'width' : 'height';return i[p] = t[p] + t[d] / 2 - n[d] / 2, i[s] = o === s ? t[s] - n[a] : t[T(s)], i;
    }function D(e, t) {
      return Array.prototype.find ? e.find(t) : e.filter(t)[0];
    }function N(e, t, o) {
      if (Array.prototype.findIndex) return e.findIndex(function (e) {
        return e[t] === o;
      });var n = D(e, function (e) {
        return e[t] === o;
      });return e.indexOf(n);
    }function P(t, o, n) {
      var i = void 0 === n ? t : t.slice(0, N(t, 'name', n));return i.forEach(function (t) {
        t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var n = t['function'] || t.fn;t.enabled && e(n) && (o.offsets.popper = g(o.offsets.popper), o.offsets.reference = g(o.offsets.reference), o = n(o, t));
      }), o;
    }function k() {
      if (!this.state.isDestroyed) {
        var e = { instance: this, styles: {}, arrowStyles: {}, attributes: {}, flipped: !1, offsets: {} };e.offsets.reference = L(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = O(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = C(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute', e = P(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
      }
    }function W(e, t) {
      return e.some(function (e) {
        var o = e.name,
            n = e.enabled;return n && o === t;
      });
    }function B(e) {
      for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length; n++) {
        var i = t[n],
            r = i ? '' + i + o : e;if ('undefined' != typeof document.body.style[r]) return r;
      }return null;
    }function H() {
      return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.position = '', this.popper.style.top = '', this.popper.style.left = '', this.popper.style.right = '', this.popper.style.bottom = '', this.popper.style.willChange = '', this.popper.style[B('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
    }function A(e) {
      var t = e.ownerDocument;return t ? t.defaultView : window;
    }function M(e, t, o, i) {
      var r = 'BODY' === e.nodeName,
          p = r ? e.ownerDocument.defaultView : e;p.addEventListener(t, o, { passive: !0 }), r || M(n(p.parentNode), t, o, i), i.push(p);
    }function I(e, t, o, i) {
      o.updateBound = i, A(e).addEventListener('resize', o.updateBound, { passive: !0 });var r = n(e);return M(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;
    }function F() {
      this.state.eventsEnabled || (this.state = I(this.reference, this.options, this.state, this.scheduleUpdate));
    }function R(e, t) {
      return A(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {
        e.removeEventListener('scroll', t.updateBound);
      }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
    }function U() {
      this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = R(this.reference, this.state));
    }function Y(e) {
      return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);
    }function j(e, t) {
      Object.keys(t).forEach(function (o) {
        var n = '';-1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && Y(t[o]) && (n = 'px'), e.style[o] = t[o] + n;
      });
    }function K(e, t) {
      Object.keys(t).forEach(function (o) {
        var n = t[o];!1 === n ? e.removeAttribute(o) : e.setAttribute(o, t[o]);
      });
    }function q(e, t, o) {
      var n = D(e, function (e) {
        var o = e.name;return o === t;
      }),
          i = !!n && e.some(function (e) {
        return e.name === o && e.enabled && e.order < n.order;
      });if (!i) {
        var r = '`' + t + '`';console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');
      }return i;
    }function G(e) {
      return 'end' === e ? 'start' : 'start' === e ? 'end' : e;
    }function z(e) {
      var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          o = me.indexOf(e),
          n = me.slice(o + 1).concat(me.slice(0, o));return t ? n.reverse() : n;
    }function V(e, t, o, n) {
      var i = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
          r = +i[1],
          p = i[2];if (!r) return e;if (0 === p.indexOf('%')) {
        var s;switch (p) {case '%p':
            s = o;break;case '%':case '%r':default:
            s = n;}var d = g(s);return d[t] / 100 * r;
      }if ('vh' === p || 'vw' === p) {
        var a;return a = 'vh' === p ? $(document.documentElement.clientHeight, window.innerHeight || 0) : $(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;
      }return r;
    }function _(e, t, o, n) {
      var i = [0, 0],
          r = -1 !== ['right', 'left'].indexOf(n),
          p = e.split(/(\+|\-)/).map(function (e) {
        return e.trim();
      }),
          s = p.indexOf(D(p, function (e) {
        return -1 !== e.search(/,|\s/);
      }));p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var d = /\s*,\s*|\s+/,
          a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];return a = a.map(function (e, n) {
        var i = (1 === n ? !r : r) ? 'height' : 'width',
            p = !1;return e.reduce(function (e, t) {
          return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);
        }, []).map(function (e) {
          return V(e, i, t, o);
        });
      }), a.forEach(function (e, t) {
        e.forEach(function (o, n) {
          Y(o) && (i[t] += o * ('-' === e[n - 1] ? -1 : 1));
        });
      }), i;
    }function X(e, t) {
      var o,
          n = t.offset,
          i = e.placement,
          r = e.offsets,
          p = r.popper,
          s = r.reference,
          d = i.split('-')[0];return o = Y(+n) ? [+n, 0] : _(n, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;
    }for (var J = Math.min, Q = Math.round, Z = Math.floor, $ = Math.max, ee = 'undefined' != typeof window && 'undefined' != typeof document, te = ['Edge', 'Trident', 'Firefox'], oe = 0, ne = 0; ne < te.length; ne += 1) {
      if (ee && 0 <= navigator.userAgent.indexOf(te[ne])) {
        oe = 1;break;
      }
    }var i = ee && window.Promise,
        ie = i ? function (e) {
      var t = !1;return function () {
        t || (t = !0, window.Promise.resolve().then(function () {
          t = !1, e();
        }));
      };
    } : function (e) {
      var t = !1;return function () {
        t || (t = !0, setTimeout(function () {
          t = !1, e();
        }, oe));
      };
    },
        re = ee && !!(window.MSInputMethodContext && document.documentMode),
        pe = ee && /MSIE 10/.test(navigator.userAgent),
        se = function se(e, t) {
      if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
    },
        de = function () {
      function e(e, t) {
        for (var o, n = 0; n < t.length; n++) {
          o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
        }
      }return function (t, o, n) {
        return o && e(t.prototype, o), n && e(t, n), t;
      };
    }(),
        ae = function ae(e, t, o) {
      return t in e ? Object.defineProperty(e, t, { value: o, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = o, e;
    },
        le = Object.assign || function (e) {
      for (var t, o = 1; o < arguments.length; o++) {
        for (var n in t = arguments[o], t) {
          Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        }
      }return e;
    },
        fe = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],
        me = fe.slice(3),
        he = { FLIP: 'flip', CLOCKWISE: 'clockwise', COUNTERCLOCKWISE: 'counterclockwise' },
        ce = function () {
      function t(o, n) {
        var i = this,
            r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};se(this, t), this.scheduleUpdate = function () {
          return requestAnimationFrame(i.update);
        }, this.update = ie(this.update.bind(this)), this.options = le({}, t.Defaults, r), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = o && o.jquery ? o[0] : o, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(le({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {
          i.options.modifiers[e] = le({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});
        }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
          return le({ name: e }, i.options.modifiers[e]);
        }).sort(function (e, t) {
          return e.order - t.order;
        }), this.modifiers.forEach(function (t) {
          t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);
        }), this.update();var p = this.options.eventsEnabled;p && this.enableEventListeners(), this.state.eventsEnabled = p;
      }return de(t, [{ key: 'update', value: function value() {
          return k.call(this);
        } }, { key: 'destroy', value: function value() {
          return H.call(this);
        } }, { key: 'enableEventListeners', value: function value() {
          return F.call(this);
        } }, { key: 'disableEventListeners', value: function value() {
          return U.call(this);
        } }]), t;
    }();return ce.Utils = ('undefined' == typeof window ? global : window).PopperUtils, ce.placements = fe, ce.Defaults = { placement: 'bottom', positionFixed: !1, eventsEnabled: !0, removeOnDestroy: !1, onCreate: function onCreate() {}, onUpdate: function onUpdate() {}, modifiers: { shift: { order: 100, enabled: !0, fn: function fn(e) {
            var t = e.placement,
                o = t.split('-')[0],
                n = t.split('-')[1];if (n) {
              var i = e.offsets,
                  r = i.reference,
                  p = i.popper,
                  s = -1 !== ['bottom', 'top'].indexOf(o),
                  d = s ? 'left' : 'top',
                  a = s ? 'width' : 'height',
                  l = { start: ae({}, d, r[d]), end: ae({}, d, r[d] + r[a] - p[a]) };e.offsets.popper = le({}, p, l[n]);
            }return e;
          } }, offset: { order: 200, enabled: !0, fn: X, offset: 0 }, preventOverflow: { order: 300, enabled: !0, fn: function fn(e, t) {
            var o = t.boundariesElement || p(e.instance.popper);e.instance.reference === o && (o = p(o));var n = B('transform'),
                i = e.instance.popper.style,
                r = i.top,
                s = i.left,
                d = i[n];i.top = '', i.left = '', i[n] = '';var a = v(e.instance.popper, e.instance.reference, t.padding, o, e.positionFixed);i.top = r, i.left = s, i[n] = d, t.boundaries = a;var l = t.priority,
                f = e.offsets.popper,
                m = { primary: function primary(e) {
                var o = f[e];return f[e] < a[e] && !t.escapeWithReference && (o = $(f[e], a[e])), ae({}, e, o);
              }, secondary: function secondary(e) {
                var o = 'right' === e ? 'left' : 'top',
                    n = f[o];return f[e] > a[e] && !t.escapeWithReference && (n = J(f[o], a[e] - ('right' === e ? f.width : f.height))), ae({}, o, n);
              } };return l.forEach(function (e) {
              var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';f = le({}, f, m[t](e));
            }), e.offsets.popper = f, e;
          }, priority: ['left', 'right', 'top', 'bottom'], padding: 5, boundariesElement: 'scrollParent' }, keepTogether: { order: 400, enabled: !0, fn: function fn(e) {
            var t = e.offsets,
                o = t.popper,
                n = t.reference,
                i = e.placement.split('-')[0],
                r = Z,
                p = -1 !== ['top', 'bottom'].indexOf(i),
                s = p ? 'right' : 'bottom',
                d = p ? 'left' : 'top',
                a = p ? 'width' : 'height';return o[s] < r(n[d]) && (e.offsets.popper[d] = r(n[d]) - o[a]), o[d] > r(n[s]) && (e.offsets.popper[d] = r(n[s])), e;
          } }, arrow: { order: 500, enabled: !0, fn: function fn(e, o) {
            var n;if (!q(e.instance.modifiers, 'arrow', 'keepTogether')) return e;var i = o.element;if ('string' == typeof i) {
              if (i = e.instance.popper.querySelector(i), !i) return e;
            } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;var r = e.placement.split('-')[0],
                p = e.offsets,
                s = p.popper,
                d = p.reference,
                a = -1 !== ['left', 'right'].indexOf(r),
                l = a ? 'height' : 'width',
                f = a ? 'Top' : 'Left',
                m = f.toLowerCase(),
                h = a ? 'left' : 'top',
                c = a ? 'bottom' : 'right',
                u = S(i)[l];d[c] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[c] - u)), d[m] + u > s[c] && (e.offsets.popper[m] += d[m] + u - s[c]), e.offsets.popper = g(e.offsets.popper);var b = d[m] + d[l] / 2 - u / 2,
                y = t(e.instance.popper),
                w = parseFloat(y['margin' + f], 10),
                E = parseFloat(y['border' + f + 'Width'], 10),
                v = b - e.offsets.popper[m] - w - E;return v = $(J(s[l] - u, v), 0), e.arrowElement = i, e.offsets.arrow = (n = {}, ae(n, m, Q(v)), ae(n, h, ''), n), e;
          }, element: '[x-arrow]' }, flip: { order: 600, enabled: !0, fn: function fn(e, t) {
            if (W(e.instance.modifiers, 'inner')) return e;if (e.flipped && e.placement === e.originalPlacement) return e;var o = v(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),
                n = e.placement.split('-')[0],
                i = T(n),
                r = e.placement.split('-')[1] || '',
                p = [];switch (t.behavior) {case he.FLIP:
                p = [n, i];break;case he.CLOCKWISE:
                p = z(n);break;case he.COUNTERCLOCKWISE:
                p = z(n, !0);break;default:
                p = t.behavior;}return p.forEach(function (s, d) {
              if (n !== s || p.length === d + 1) return e;n = e.placement.split('-')[0], i = T(n);var a = e.offsets.popper,
                  l = e.offsets.reference,
                  f = Z,
                  m = 'left' === n && f(a.right) > f(l.left) || 'right' === n && f(a.left) < f(l.right) || 'top' === n && f(a.bottom) > f(l.top) || 'bottom' === n && f(a.top) < f(l.bottom),
                  h = f(a.left) < f(o.left),
                  c = f(a.right) > f(o.right),
                  g = f(a.top) < f(o.top),
                  u = f(a.bottom) > f(o.bottom),
                  b = 'left' === n && h || 'right' === n && c || 'top' === n && g || 'bottom' === n && u,
                  y = -1 !== ['top', 'bottom'].indexOf(n),
                  w = !!t.flipVariations && (y && 'start' === r && h || y && 'end' === r && c || !y && 'start' === r && g || !y && 'end' === r && u);(m || b || w) && (e.flipped = !0, (m || b) && (n = p[d + 1]), w && (r = G(r)), e.placement = n + (r ? '-' + r : ''), e.offsets.popper = le({}, e.offsets.popper, C(e.instance.popper, e.offsets.reference, e.placement)), e = P(e.instance.modifiers, e, 'flip'));
            }), e;
          }, behavior: 'flip', padding: 5, boundariesElement: 'viewport' }, inner: { order: 700, enabled: !1, fn: function fn(e) {
            var t = e.placement,
                o = t.split('-')[0],
                n = e.offsets,
                i = n.popper,
                r = n.reference,
                p = -1 !== ['left', 'right'].indexOf(o),
                s = -1 === ['top', 'left'].indexOf(o);return i[p ? 'left' : 'top'] = r[o] - (s ? i[p ? 'width' : 'height'] : 0), e.placement = T(t), e.offsets.popper = g(i), e;
          } }, hide: { order: 800, enabled: !0, fn: function fn(e) {
            if (!q(e.instance.modifiers, 'hide', 'preventOverflow')) return e;var t = e.offsets.reference,
                o = D(e.instance.modifiers, function (e) {
              return 'preventOverflow' === e.name;
            }).boundaries;if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {
              if (!0 === e.hide) return e;e.hide = !0, e.attributes['x-out-of-boundaries'] = '';
            } else {
              if (!1 === e.hide) return e;e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;
            }return e;
          } }, computeStyle: { order: 850, enabled: !0, fn: function fn(e, t) {
            var o = t.x,
                n = t.y,
                i = e.offsets.popper,
                r = D(e.instance.modifiers, function (e) {
              return 'applyStyle' === e.name;
            }).gpuAcceleration;void 0 !== r && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var s,
                d,
                a = void 0 === r ? t.gpuAcceleration : r,
                l = p(e.instance.popper),
                f = u(l),
                m = { position: i.position },
                h = { left: Z(i.left), top: Q(i.top), bottom: Q(i.bottom), right: Z(i.right) },
                c = 'bottom' === o ? 'top' : 'bottom',
                g = 'right' === n ? 'left' : 'right',
                b = B('transform');if (d = 'bottom' == c ? -f.height + h.bottom : h.top, s = 'right' == g ? -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[g] = 0, m.willChange = 'transform';else {
              var y = 'bottom' == c ? -1 : 1,
                  w = 'right' == g ? -1 : 1;m[c] = d * y, m[g] = s * w, m.willChange = c + ', ' + g;
            }var E = { "x-placement": e.placement };return e.attributes = le({}, E, e.attributes), e.styles = le({}, m, e.styles), e.arrowStyles = le({}, e.offsets.arrow, e.arrowStyles), e;
          }, gpuAcceleration: !0, x: 'bottom', y: 'right' }, applyStyle: { order: 900, enabled: !0, fn: function fn(e) {
            return j(e.instance.popper, e.styles), K(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && j(e.arrowElement, e.arrowStyles), e;
          }, onLoad: function onLoad(e, t, o, n, i) {
            var r = L(i, t, e, o.positionFixed),
                p = O(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);return t.setAttribute('x-placement', p), j(t, { position: o.positionFixed ? 'fixed' : 'absolute' }), o;
          }, gpuAcceleration: void 0 } } }, ce;
  });
  
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.sweetalertMin = mod.exports;
  }
})(undefined, function (module) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  !function (e, t, n) {
    "use strict";

    !function o(e, t, n) {
      function a(s, l) {
        if (!t[s]) {
          if (!e[s]) {
            var i = "function" == typeof require && require;if (!l && i) return i(s, !0);if (r) return r(s, !0);var u = new Error("Cannot find module '" + s + "'");throw u.code = "MODULE_NOT_FOUND", u;
          }var c = t[s] = { exports: {} };e[s][0].call(c.exports, function (t) {
            var n = e[s][1][t];return a(n ? n : t);
          }, c, c.exports, o, e, t, n);
        }return t[s].exports;
      }for (var r = "function" == typeof require && require, s = 0; s < n.length; s++) {
        a(n[s]);
      }return a;
    }({ 1: [function (o, a, r) {
        var s = function s(e) {
          return e && e.__esModule ? e : { "default": e };
        };Object.defineProperty(r, "__esModule", { value: !0 });var l,
            i,
            u,
            _c,
            d = o("./modules/handle-dom"),
            f = o("./modules/utils"),
            p = o("./modules/handle-swal-dom"),
            m = o("./modules/handle-click"),
            v = o("./modules/handle-key"),
            y = s(v),
            h = o("./modules/default-params"),
            b = s(h),
            g = o("./modules/set-params"),
            w = s(g);r["default"] = u = _c = function c() {
          function o(e) {
            var t = a;return t[e] === n ? b["default"][e] : t[e];
          }var a = arguments[0];if (d.addClass(t.body, "stop-scrolling"), p.resetInput(), a === n) return f.logStr("SweetAlert expects at least 1 attribute!"), !1;var r = f.extend({}, b["default"]);switch (typeof a === "undefined" ? "undefined" : _typeof(a)) {case "string":
              r.title = a, r.text = arguments[1] || "", r.type = arguments[2] || "";break;case "object":
              if (a.title === n) return f.logStr('Missing "title" argument!'), !1;r.title = a.title;for (var s in b["default"]) {
                r[s] = o(s);
              }r.confirmButtonText = r.showCancelButton ? "Confirm" : b["default"].confirmButtonText, r.confirmButtonText = o("confirmButtonText"), r.doneFunction = arguments[1] || null;break;default:
              return f.logStr('Unexpected type of argument! Expected "string" or "object", got ' + (typeof a === "undefined" ? "undefined" : _typeof(a))), !1;}w["default"](r), p.fixVerticalPosition(), p.openModal(arguments[1]);for (var u = p.getModal(), v = u.querySelectorAll("button"), h = ["onclick", "onmouseover", "onmouseout", "onmousedown", "onmouseup", "onfocus"], g = function g(e) {
            return m.handleButton(e, r, u);
          }, C = 0; C < v.length; C++) {
            for (var S = 0; S < h.length; S++) {
              var x = h[S];v[C][x] = g;
            }
          }p.getOverlay().onclick = g, l = e.onkeydown;var k = function k(e) {
            return y["default"](e, r, u);
          };e.onkeydown = k, e.onfocus = function () {
            setTimeout(function () {
              i !== n && (i.focus(), i = n);
            }, 0);
          }, _c.enableButtons();
        }, u.setDefaults = _c.setDefaults = function (e) {
          if (!e) throw new Error("userParams is required");if ("object" != (typeof e === "undefined" ? "undefined" : _typeof(e))) throw new Error("userParams has to be a object");f.extend(b["default"], e);
        }, u.close = _c.close = function () {
          var o = p.getModal();d.fadeOut(p.getOverlay(), 5), d.fadeOut(o, 5), d.removeClass(o, "showSweetAlert"), d.addClass(o, "hideSweetAlert"), d.removeClass(o, "visible");var a = o.querySelector(".sa-icon.sa-success");d.removeClass(a, "animate"), d.removeClass(a.querySelector(".sa-tip"), "animateSuccessTip"), d.removeClass(a.querySelector(".sa-long"), "animateSuccessLong");var r = o.querySelector(".sa-icon.sa-error");d.removeClass(r, "animateErrorIcon"), d.removeClass(r.querySelector(".sa-x-mark"), "animateXMark");var s = o.querySelector(".sa-icon.sa-warning");return d.removeClass(s, "pulseWarning"), d.removeClass(s.querySelector(".sa-body"), "pulseWarningIns"), d.removeClass(s.querySelector(".sa-dot"), "pulseWarningIns"), setTimeout(function () {
            var e = o.getAttribute("data-custom-class");d.removeClass(o, e);
          }, 300), d.removeClass(t.body, "stop-scrolling"), e.onkeydown = l, e.previousActiveElement && e.previousActiveElement.focus(), i = n, clearTimeout(o.timeout), !0;
        }, u.showInputError = _c.showInputError = function (e) {
          var t = p.getModal(),
              n = t.querySelector(".sa-input-error");d.addClass(n, "show");var o = t.querySelector(".sa-error-container");d.addClass(o, "show"), o.querySelector("p").innerHTML = e, setTimeout(function () {
            u.enableButtons();
          }, 1), t.querySelector("input").focus();
        }, u.resetInputError = _c.resetInputError = function (e) {
          if (e && 13 === e.keyCode) return !1;var t = p.getModal(),
              n = t.querySelector(".sa-input-error");d.removeClass(n, "show");var o = t.querySelector(".sa-error-container");d.removeClass(o, "show");
        }, u.disableButtons = _c.disableButtons = function () {
          var e = p.getModal(),
              t = e.querySelector("button.confirm"),
              n = e.querySelector("button.cancel");t.disabled = !0, n.disabled = !0;
        }, u.enableButtons = _c.enableButtons = function () {
          var e = p.getModal(),
              t = e.querySelector("button.confirm"),
              n = e.querySelector("button.cancel");t.disabled = !1, n.disabled = !1;
        }, "undefined" != typeof e ? e.sweetAlert = e.swal = u : f.logStr("SweetAlert is a frontend module!"), a.exports = r["default"];
      }, { "./modules/default-params": 2, "./modules/handle-click": 3, "./modules/handle-dom": 4, "./modules/handle-key": 5, "./modules/handle-swal-dom": 6, "./modules/set-params": 8, "./modules/utils": 9 }], 2: [function (e, t, n) {
        Object.defineProperty(n, "__esModule", { value: !0 });var o = { title: "", text: "", type: null, allowOutsideClick: !1, showConfirmButton: !0, showCancelButton: !1, closeOnConfirm: !0, closeOnCancel: !0, confirmButtonText: "OK", confirmButtonColor: "#8CD4F5", cancelButtonText: "Cancel", imageUrl: null, imageSize: null, timer: null, customClass: "", html: !1, animation: !0, allowEscapeKey: !0, inputType: "text", inputPlaceholder: "", inputValue: "", showLoaderOnConfirm: !1 };n["default"] = o, t.exports = n["default"];
      }, {}], 3: [function (t, n, o) {
        Object.defineProperty(o, "__esModule", { value: !0 });var a = t("./utils"),
            r = (t("./handle-swal-dom"), t("./handle-dom")),
            s = function s(t, n, o) {
          function s(e) {
            m && n.confirmButtonColor && (p.style.backgroundColor = e);
          }var u,
              c,
              d,
              f = t || e.event,
              p = f.target || f.srcElement,
              m = -1 !== p.className.indexOf("confirm"),
              v = -1 !== p.className.indexOf("sweet-overlay"),
              y = r.hasClass(o, "visible"),
              h = n.doneFunction && "true" === o.getAttribute("data-has-done-function");switch (m && n.confirmButtonColor && (u = n.confirmButtonColor, c = a.colorLuminance(u, -.04), d = a.colorLuminance(u, -.14)), f.type) {case "mouseover":
              s(c);break;case "mouseout":
              s(u);break;case "mousedown":
              s(d);break;case "mouseup":
              s(c);break;case "focus":
              var b = o.querySelector("button.confirm"),
                  g = o.querySelector("button.cancel");m ? g.style.boxShadow = "none" : b.style.boxShadow = "none";break;case "click":
              var w = o === p,
                  C = r.isDescendant(o, p);if (!w && !C && y && !n.allowOutsideClick) break;m && h && y ? l(o, n) : h && y || v ? i(o, n) : r.isDescendant(o, p) && "BUTTON" === p.tagName && sweetAlert.close();}
        },
            l = function l(e, t) {
          var n = !0;r.hasClass(e, "show-input") && (n = e.querySelector("input").value, n || (n = "")), t.doneFunction(n), t.closeOnConfirm && sweetAlert.close(), t.showLoaderOnConfirm && sweetAlert.disableButtons();
        },
            i = function i(e, t) {
          var n = String(t.doneFunction).replace(/\s/g, ""),
              o = "function(" === n.substring(0, 9) && ")" !== n.substring(9, 10);o && t.doneFunction(!1), t.closeOnCancel && sweetAlert.close();
        };o["default"] = { handleButton: s, handleConfirm: l, handleCancel: i }, n.exports = o["default"];
      }, { "./handle-dom": 4, "./handle-swal-dom": 6, "./utils": 9 }], 4: [function (n, o, a) {
        Object.defineProperty(a, "__esModule", { value: !0 });var r = function r(e, t) {
          return new RegExp(" " + t + " ").test(" " + e.className + " ");
        },
            s = function s(e, t) {
          r(e, t) || (e.className += " " + t);
        },
            l = function l(e, t) {
          var n = " " + e.className.replace(/[\t\r\n]/g, " ") + " ";if (r(e, t)) {
            for (; n.indexOf(" " + t + " ") >= 0;) {
              n = n.replace(" " + t + " ", " ");
            }e.className = n.replace(/^\s+|\s+$/g, "");
          }
        },
            i = function i(e) {
          var n = t.createElement("div");return n.appendChild(t.createTextNode(e)), n.innerHTML;
        },
            u = function u(e) {
          e.style.opacity = "", e.style.display = "block";
        },
            c = function c(e) {
          if (e && !e.length) return u(e);for (var t = 0; t < e.length; ++t) {
            u(e[t]);
          }
        },
            d = function d(e) {
          e.style.opacity = "", e.style.display = "none";
        },
            f = function f(e) {
          if (e && !e.length) return d(e);for (var t = 0; t < e.length; ++t) {
            d(e[t]);
          }
        },
            p = function p(e, t) {
          for (var n = t.parentNode; null !== n;) {
            if (n === e) return !0;n = n.parentNode;
          }return !1;
        },
            m = function m(e) {
          e.style.left = "-9999px", e.style.display = "block";var t,
              n = e.clientHeight;return t = "undefined" != typeof getComputedStyle ? parseInt(getComputedStyle(e).getPropertyValue("padding-top"), 10) : parseInt(e.currentStyle.padding), e.style.left = "", e.style.display = "none", "-" + parseInt((n + t) / 2) + "px";
        },
            v = function v(e, t) {
          if (+e.style.opacity < 1) {
            t = t || 16, e.style.opacity = 0, e.style.display = "block";var n = +new Date(),
                o = function (e) {
              function t() {
                return e.apply(this, arguments);
              }return t.toString = function () {
                return e.toString();
              }, t;
            }(function () {
              e.style.opacity = +e.style.opacity + (new Date() - n) / 100, n = +new Date(), +e.style.opacity < 1 && setTimeout(o, t);
            });o();
          }e.style.display = "block";
        },
            y = function y(e, t) {
          t = t || 16, e.style.opacity = 1;var n = +new Date(),
              o = function (e) {
            function t() {
              return e.apply(this, arguments);
            }return t.toString = function () {
              return e.toString();
            }, t;
          }(function () {
            e.style.opacity = +e.style.opacity - (new Date() - n) / 100, n = +new Date(), +e.style.opacity > 0 ? setTimeout(o, t) : e.style.display = "none";
          });o();
        },
            h = function h(n) {
          if ("function" == typeof MouseEvent) {
            var o = new MouseEvent("click", { view: e, bubbles: !1, cancelable: !0 });n.dispatchEvent(o);
          } else if (t.createEvent) {
            var a = t.createEvent("MouseEvents");a.initEvent("click", !1, !1), n.dispatchEvent(a);
          } else t.createEventObject ? n.fireEvent("onclick") : "function" == typeof n.onclick && n.onclick();
        },
            b = function b(t) {
          "function" == typeof t.stopPropagation ? (t.stopPropagation(), t.preventDefault()) : e.event && e.event.hasOwnProperty("cancelBubble") && (e.event.cancelBubble = !0);
        };a.hasClass = r, a.addClass = s, a.removeClass = l, a.escapeHtml = i, a._show = u, a.show = c, a._hide = d, a.hide = f, a.isDescendant = p, a.getTopMargin = m, a.fadeIn = v, a.fadeOut = y, a.fireClick = h, a.stopEventPropagation = b;
      }, {}], 5: [function (t, o, a) {
        Object.defineProperty(a, "__esModule", { value: !0 });var r = t("./handle-dom"),
            s = t("./handle-swal-dom"),
            l = function l(t, o, a) {
          var l = t || e.event,
              i = l.keyCode || l.which,
              u = a.querySelector("button.confirm"),
              c = a.querySelector("button.cancel"),
              d = a.querySelectorAll("button[tabindex]");if (-1 !== [9, 13, 32, 27].indexOf(i)) {
            for (var f = l.target || l.srcElement, p = -1, m = 0; m < d.length; m++) {
              if (f === d[m]) {
                p = m;break;
              }
            }9 === i ? (f = -1 === p ? u : p === d.length - 1 ? d[0] : d[p + 1], r.stopEventPropagation(l), f.focus(), o.confirmButtonColor && s.setFocusStyle(f, o.confirmButtonColor)) : 13 === i ? ("INPUT" === f.tagName && (f = u, u.focus()), f = -1 === p ? u : n) : 27 === i && o.allowEscapeKey === !0 ? (f = c, r.fireClick(f, l)) : f = n;
          }
        };a["default"] = l, o.exports = a["default"];
      }, { "./handle-dom": 4, "./handle-swal-dom": 6 }], 6: [function (n, o, a) {
        var r = function r(e) {
          return e && e.__esModule ? e : { "default": e };
        };Object.defineProperty(a, "__esModule", { value: !0 });var s = n("./utils"),
            l = n("./handle-dom"),
            i = n("./default-params"),
            u = r(i),
            c = n("./injected-html"),
            d = r(c),
            f = ".sweet-alert",
            p = ".sweet-overlay",
            m = function m() {
          var e = t.createElement("div");for (e.innerHTML = d["default"]; e.firstChild;) {
            t.body.appendChild(e.firstChild);
          }
        },
            v = function (e) {
          function t() {
            return e.apply(this, arguments);
          }return t.toString = function () {
            return e.toString();
          }, t;
        }(function () {
          var e = t.querySelector(f);return e || (m(), e = v()), e;
        }),
            y = function y() {
          var e = v();return e ? e.querySelector("input") : void 0;
        },
            h = function h() {
          return t.querySelector(p);
        },
            b = function b(e, t) {
          var n = s.hexToRgb(t);e.style.boxShadow = "0 0 2px rgba(" + n + ", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)";
        },
            g = function g(n) {
          var o = v();l.fadeIn(h(), 10), l.show(o), l.addClass(o, "showSweetAlert"), l.removeClass(o, "hideSweetAlert"), e.previousActiveElement = t.activeElement;var a = o.querySelector("button.confirm");a.focus(), setTimeout(function () {
            l.addClass(o, "visible");
          }, 500);var r = o.getAttribute("data-timer");if ("null" !== r && "" !== r) {
            var s = n;o.timeout = setTimeout(function () {
              var e = (s || null) && "true" === o.getAttribute("data-has-done-function");e ? s(null) : sweetAlert.close();
            }, r);
          }
        },
            w = function w() {
          var e = v(),
              t = y();l.removeClass(e, "show-input"), t.value = u["default"].inputValue, t.setAttribute("type", u["default"].inputType), t.setAttribute("placeholder", u["default"].inputPlaceholder), C();
        },
            C = function C(e) {
          if (e && 13 === e.keyCode) return !1;var t = v(),
              n = t.querySelector(".sa-input-error");l.removeClass(n, "show");var o = t.querySelector(".sa-error-container");l.removeClass(o, "show");
        },
            S = function S() {
          var e = v();e.style.marginTop = l.getTopMargin(v());
        };a.sweetAlertInitialize = m, a.getModal = v, a.getOverlay = h, a.getInput = y, a.setFocusStyle = b, a.openModal = g, a.resetInput = w, a.resetInputError = C, a.fixVerticalPosition = S;
      }, { "./default-params": 2, "./handle-dom": 4, "./injected-html": 7, "./utils": 9 }], 7: [function (e, t, n) {
        Object.defineProperty(n, "__esModule", { value: !0 });var o = '<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"] = o, t.exports = n["default"];
      }, {}], 8: [function (e, t, o) {
        Object.defineProperty(o, "__esModule", { value: !0 });var a = e("./utils"),
            r = e("./handle-swal-dom"),
            s = e("./handle-dom"),
            l = ["error", "warning", "info", "success", "input", "prompt"],
            i = function i(e) {
          var t = r.getModal(),
              o = t.querySelector("h2"),
              i = t.querySelector("p"),
              u = t.querySelector("button.cancel"),
              c = t.querySelector("button.confirm");if (o.innerHTML = e.html ? e.title : s.escapeHtml(e.title).split("\n").join("<br>"), i.innerHTML = e.html ? e.text : s.escapeHtml(e.text || "").split("\n").join("<br>"), e.text && s.show(i), e.customClass) s.addClass(t, e.customClass), t.setAttribute("data-custom-class", e.customClass);else {
            var d = t.getAttribute("data-custom-class");s.removeClass(t, d), t.setAttribute("data-custom-class", "");
          }if (s.hide(t.querySelectorAll(".sa-icon")), e.type && !a.isIE8()) {
            var f = function () {
              for (var o = !1, a = 0; a < l.length; a++) {
                if (e.type === l[a]) {
                  o = !0;break;
                }
              }if (!o) return logStr("Unknown alert type: " + e.type), { v: !1 };var i = ["success", "error", "warning", "info"],
                  u = n;-1 !== i.indexOf(e.type) && (u = t.querySelector(".sa-icon.sa-" + e.type), s.show(u));var c = r.getInput();switch (e.type) {case "success":
                  s.addClass(u, "animate"), s.addClass(u.querySelector(".sa-tip"), "animateSuccessTip"), s.addClass(u.querySelector(".sa-long"), "animateSuccessLong");break;case "error":
                  s.addClass(u, "animateErrorIcon"), s.addClass(u.querySelector(".sa-x-mark"), "animateXMark");break;case "warning":
                  s.addClass(u, "pulseWarning"), s.addClass(u.querySelector(".sa-body"), "pulseWarningIns"), s.addClass(u.querySelector(".sa-dot"), "pulseWarningIns");break;case "input":case "prompt":
                  c.setAttribute("type", e.inputType), c.value = e.inputValue, c.setAttribute("placeholder", e.inputPlaceholder), s.addClass(t, "show-input"), setTimeout(function () {
                    c.focus(), c.addEventListener("keyup", swal.resetInputError);
                  }, 400);}
            }();if ("object" == (typeof f === "undefined" ? "undefined" : _typeof(f))) return f.v;
          }if (e.imageUrl) {
            var p = t.querySelector(".sa-icon.sa-custom");p.style.backgroundImage = "url(" + e.imageUrl + ")", s.show(p);var m = 80,
                v = 80;if (e.imageSize) {
              var y = e.imageSize.toString().split("x"),
                  h = y[0],
                  b = y[1];h && b ? (m = h, v = b) : logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got " + e.imageSize);
            }p.setAttribute("style", p.getAttribute("style") + "width:" + m + "px; height:" + v + "px");
          }t.setAttribute("data-has-cancel-button", e.showCancelButton), e.showCancelButton ? u.style.display = "inline-block" : s.hide(u), t.setAttribute("data-has-confirm-button", e.showConfirmButton), e.showConfirmButton ? c.style.display = "inline-block" : s.hide(c), e.cancelButtonText && (u.innerHTML = s.escapeHtml(e.cancelButtonText)), e.confirmButtonText && (c.innerHTML = s.escapeHtml(e.confirmButtonText)), e.confirmButtonColor && (c.style.backgroundColor = e.confirmButtonColor, c.style.borderLeftColor = e.confirmLoadingButtonColor, c.style.borderRightColor = e.confirmLoadingButtonColor, r.setFocusStyle(c, e.confirmButtonColor)), t.setAttribute("data-allow-outside-click", e.allowOutsideClick);var g = e.doneFunction ? !0 : !1;t.setAttribute("data-has-done-function", g), e.animation ? "string" == typeof e.animation ? t.setAttribute("data-animation", e.animation) : t.setAttribute("data-animation", "pop") : t.setAttribute("data-animation", "none"), t.setAttribute("data-timer", e.timer);
        };o["default"] = i, t.exports = o["default"];
      }, { "./handle-dom": 4, "./handle-swal-dom": 6, "./utils": 9 }], 9: [function (t, n, o) {
        Object.defineProperty(o, "__esModule", { value: !0 });var a = function a(e, t) {
          for (var n in t) {
            t.hasOwnProperty(n) && (e[n] = t[n]);
          }return e;
        },
            r = function r(e) {
          var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t ? parseInt(t[1], 16) + ", " + parseInt(t[2], 16) + ", " + parseInt(t[3], 16) : null;
        },
            s = function s() {
          return e.attachEvent && !e.addEventListener;
        },
            l = function l(t) {
          e.console && e.console.log("SweetAlert: " + t);
        },
            i = function i(e, t) {
          e = String(e).replace(/[^0-9a-f]/gi, ""), e.length < 6 && (e = e[0] + e[0] + e[1] + e[1] + e[2] + e[2]), t = t || 0;var n,
              o,
              a = "#";for (o = 0; 3 > o; o++) {
            n = parseInt(e.substr(2 * o, 2), 16), n = Math.round(Math.min(Math.max(0, n + n * t), 255)).toString(16), a += ("00" + n).substr(n.length);
          }return a;
        };o.extend = a, o.hexToRgb = r, o.isIE8 = s, o.logStr = l, o.colorLuminance = i;
      }, {}] }, {}, [1]), "function" == typeof define && define.amd ? define(function () {
      return sweetAlert;
    }) : "undefined" != typeof module && module.exports && (module.exports = sweetAlert);
  }(window, document);
});

},{}],11:[function(require,module,exports){
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.swiperMin = mod.exports;
  }
})(undefined, function (module, exports) {
  "use strict";

  var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
  };

  /**
   * Swiper 4.4.6
   * Most modern mobile touch slider and framework with hardware accelerated transitions
   * http://www.idangero.us/swiper/
   *
   * Copyright 2014-2018 Vladimir Kharlampidi
   *
   * Released under the MIT License
   *
   * Released on: December 19, 2018
   */
  !function (e, t) {
    "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : e.Swiper = t();
  }(undefined, function () {
    "use strict";

    var f = "undefined" == typeof document ? { body: {}, addEventListener: function addEventListener() {}, removeEventListener: function removeEventListener() {}, activeElement: { blur: function blur() {}, nodeName: "" }, querySelector: function querySelector() {
        return null;
      }, querySelectorAll: function querySelectorAll() {
        return [];
      }, getElementById: function getElementById() {
        return null;
      }, createEvent: function createEvent() {
        return { initEvent: function initEvent() {} };
      }, createElement: function createElement() {
        return { children: [], childNodes: [], style: {}, setAttribute: function setAttribute() {}, getElementsByTagName: function getElementsByTagName() {
            return [];
          } };
      }, location: { hash: "" } } : document,
        J = "undefined" == typeof window ? { document: f, navigator: { userAgent: "" }, location: {}, history: {}, CustomEvent: function CustomEvent() {
        return this;
      }, addEventListener: function addEventListener() {}, removeEventListener: function removeEventListener() {}, getComputedStyle: function getComputedStyle() {
        return { getPropertyValue: function getPropertyValue() {
            return "";
          } };
      }, Image: function Image() {}, Date: function Date() {}, screen: {}, setTimeout: function setTimeout() {}, clearTimeout: function clearTimeout() {} } : window,
        l = function l(e) {
      for (var t = 0; t < e.length; t += 1) {
        this[t] = e[t];
      }return this.length = e.length, this;
    };function L(e, t) {
      var a = [],
          i = 0;if (e && !t && e instanceof l) return e;if (e) if ("string" == typeof e) {
        var s,
            r,
            n = e.trim();if (0 <= n.indexOf("<") && 0 <= n.indexOf(">")) {
          var o = "div";for (0 === n.indexOf("<li") && (o = "ul"), 0 === n.indexOf("<tr") && (o = "tbody"), 0 !== n.indexOf("<td") && 0 !== n.indexOf("<th") || (o = "tr"), 0 === n.indexOf("<tbody") && (o = "table"), 0 === n.indexOf("<option") && (o = "select"), (r = f.createElement(o)).innerHTML = n, i = 0; i < r.childNodes.length; i += 1) {
            a.push(r.childNodes[i]);
          }
        } else for (s = t || "#" !== e[0] || e.match(/[ .<>:~]/) ? (t || f).querySelectorAll(e.trim()) : [f.getElementById(e.trim().split("#")[1])], i = 0; i < s.length; i += 1) {
          s[i] && a.push(s[i]);
        }
      } else if (e.nodeType || e === J || e === f) a.push(e);else if (0 < e.length && e[0].nodeType) for (i = 0; i < e.length; i += 1) {
        a.push(e[i]);
      }return new l(a);
    }function r(e) {
      for (var t = [], a = 0; a < e.length; a += 1) {
        -1 === t.indexOf(e[a]) && t.push(e[a]);
      }return t;
    }L.fn = l.prototype, L.Class = l, L.Dom7 = l;var t = { addClass: function addClass(e) {
        if (void 0 === e) return this;for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
          for (var i = 0; i < this.length; i += 1) {
            void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.add(t[a]);
          }
        }return this;
      }, removeClass: function removeClass(e) {
        for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
          for (var i = 0; i < this.length; i += 1) {
            void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.remove(t[a]);
          }
        }return this;
      }, hasClass: function hasClass(e) {
        return !!this[0] && this[0].classList.contains(e);
      }, toggleClass: function toggleClass(e) {
        for (var t = e.split(" "), a = 0; a < t.length; a += 1) {
          for (var i = 0; i < this.length; i += 1) {
            void 0 !== this[i] && void 0 !== this[i].classList && this[i].classList.toggle(t[a]);
          }
        }return this;
      }, attr: function attr(e, t) {
        var a = arguments;if (1 === arguments.length && "string" == typeof e) return this[0] ? this[0].getAttribute(e) : void 0;for (var i = 0; i < this.length; i += 1) {
          if (2 === a.length) this[i].setAttribute(e, t);else for (var s in e) {
            this[i][s] = e[s], this[i].setAttribute(s, e[s]);
          }
        }return this;
      }, removeAttr: function removeAttr(e) {
        for (var t = 0; t < this.length; t += 1) {
          this[t].removeAttribute(e);
        }return this;
      }, data: function data(e, t) {
        var a;if (void 0 !== t) {
          for (var i = 0; i < this.length; i += 1) {
            (a = this[i]).dom7ElementDataStorage || (a.dom7ElementDataStorage = {}), a.dom7ElementDataStorage[e] = t;
          }return this;
        }if (a = this[0]) {
          if (a.dom7ElementDataStorage && e in a.dom7ElementDataStorage) return a.dom7ElementDataStorage[e];var s = a.getAttribute("data-" + e);return s || void 0;
        }
      }, transform: function transform(e) {
        for (var t = 0; t < this.length; t += 1) {
          var a = this[t].style;a.webkitTransform = e, a.transform = e;
        }return this;
      }, transition: function transition(e) {
        "string" != typeof e && (e += "ms");for (var t = 0; t < this.length; t += 1) {
          var a = this[t].style;a.webkitTransitionDuration = e, a.transitionDuration = e;
        }return this;
      }, on: function on() {
        for (var e, t = [], a = arguments.length; a--;) {
          t[a] = arguments[a];
        }var i = t[0],
            r = t[1],
            n = t[2],
            s = t[3];function o(e) {
          var t = e.target;if (t) {
            var a = e.target.dom7EventData || [];if (a.indexOf(e) < 0 && a.unshift(e), L(t).is(r)) n.apply(t, a);else for (var i = L(t).parents(), s = 0; s < i.length; s += 1) {
              L(i[s]).is(r) && n.apply(i[s], a);
            }
          }
        }function l(e) {
          var t = e && e.target && e.target.dom7EventData || [];t.indexOf(e) < 0 && t.unshift(e), n.apply(this, t);
        }"function" == typeof t[1] && (i = (e = t)[0], n = e[1], s = e[2], r = void 0), s || (s = !1);for (var d, p = i.split(" "), c = 0; c < this.length; c += 1) {
          var u = this[c];if (r) for (d = 0; d < p.length; d += 1) {
            var h = p[d];u.dom7LiveListeners || (u.dom7LiveListeners = {}), u.dom7LiveListeners[h] || (u.dom7LiveListeners[h] = []), u.dom7LiveListeners[h].push({ listener: n, proxyListener: o }), u.addEventListener(h, o, s);
          } else for (d = 0; d < p.length; d += 1) {
            var v = p[d];u.dom7Listeners || (u.dom7Listeners = {}), u.dom7Listeners[v] || (u.dom7Listeners[v] = []), u.dom7Listeners[v].push({ listener: n, proxyListener: l }), u.addEventListener(v, l, s);
          }
        }return this;
      }, off: function off() {
        for (var e, t = [], a = arguments.length; a--;) {
          t[a] = arguments[a];
        }var i = t[0],
            s = t[1],
            r = t[2],
            n = t[3];"function" == typeof t[1] && (i = (e = t)[0], r = e[1], n = e[2], s = void 0), n || (n = !1);for (var o = i.split(" "), l = 0; l < o.length; l += 1) {
          for (var d = o[l], p = 0; p < this.length; p += 1) {
            var c = this[p],
                u = void 0;if (!s && c.dom7Listeners ? u = c.dom7Listeners[d] : s && c.dom7LiveListeners && (u = c.dom7LiveListeners[d]), u && u.length) for (var h = u.length - 1; 0 <= h; h -= 1) {
              var v = u[h];r && v.listener === r ? (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1)) : r || (c.removeEventListener(d, v.proxyListener, n), u.splice(h, 1));
            }
          }
        }return this;
      }, trigger: function trigger() {
        for (var e = [], t = arguments.length; t--;) {
          e[t] = arguments[t];
        }for (var a = e[0].split(" "), i = e[1], s = 0; s < a.length; s += 1) {
          for (var r = a[s], n = 0; n < this.length; n += 1) {
            var o = this[n],
                l = void 0;try {
              l = new J.CustomEvent(r, { detail: i, bubbles: !0, cancelable: !0 });
            } catch (e) {
              (l = f.createEvent("Event")).initEvent(r, !0, !0), l.detail = i;
            }o.dom7EventData = e.filter(function (e, t) {
              return 0 < t;
            }), o.dispatchEvent(l), o.dom7EventData = [], delete o.dom7EventData;
          }
        }return this;
      }, transitionEnd: function transitionEnd(t) {
        var a,
            i = ["webkitTransitionEnd", "transitionend"],
            s = this;function r(e) {
          if (e.target === this) for (t.call(this, e), a = 0; a < i.length; a += 1) {
            s.off(i[a], r);
          }
        }if (t) for (a = 0; a < i.length; a += 1) {
          s.on(i[a], r);
        }return this;
      }, outerWidth: function outerWidth(e) {
        if (0 < this.length) {
          if (e) {
            var t = this.styles();return this[0].offsetWidth + parseFloat(t.getPropertyValue("margin-right")) + parseFloat(t.getPropertyValue("margin-left"));
          }return this[0].offsetWidth;
        }return null;
      }, outerHeight: function outerHeight(e) {
        if (0 < this.length) {
          if (e) {
            var t = this.styles();return this[0].offsetHeight + parseFloat(t.getPropertyValue("margin-top")) + parseFloat(t.getPropertyValue("margin-bottom"));
          }return this[0].offsetHeight;
        }return null;
      }, offset: function offset() {
        if (0 < this.length) {
          var e = this[0],
              t = e.getBoundingClientRect(),
              a = f.body,
              i = e.clientTop || a.clientTop || 0,
              s = e.clientLeft || a.clientLeft || 0,
              r = e === J ? J.scrollY : e.scrollTop,
              n = e === J ? J.scrollX : e.scrollLeft;return { top: t.top + r - i, left: t.left + n - s };
        }return null;
      }, css: function css(e, t) {
        var a;if (1 === arguments.length) {
          if ("string" != typeof e) {
            for (a = 0; a < this.length; a += 1) {
              for (var i in e) {
                this[a].style[i] = e[i];
              }
            }return this;
          }if (this[0]) return J.getComputedStyle(this[0], null).getPropertyValue(e);
        }if (2 === arguments.length && "string" == typeof e) {
          for (a = 0; a < this.length; a += 1) {
            this[a].style[e] = t;
          }return this;
        }return this;
      }, each: function each(e) {
        if (!e) return this;for (var t = 0; t < this.length; t += 1) {
          if (!1 === e.call(this[t], t, this[t])) return this;
        }return this;
      }, html: function html(e) {
        if (void 0 === e) return this[0] ? this[0].innerHTML : void 0;for (var t = 0; t < this.length; t += 1) {
          this[t].innerHTML = e;
        }return this;
      }, text: function text(e) {
        if (void 0 === e) return this[0] ? this[0].textContent.trim() : null;for (var t = 0; t < this.length; t += 1) {
          this[t].textContent = e;
        }return this;
      }, is: function is(e) {
        var t,
            a,
            i = this[0];if (!i || void 0 === e) return !1;if ("string" == typeof e) {
          if (i.matches) return i.matches(e);if (i.webkitMatchesSelector) return i.webkitMatchesSelector(e);if (i.msMatchesSelector) return i.msMatchesSelector(e);for (t = L(e), a = 0; a < t.length; a += 1) {
            if (t[a] === i) return !0;
          }return !1;
        }if (e === f) return i === f;if (e === J) return i === J;if (e.nodeType || e instanceof l) {
          for (t = e.nodeType ? [e] : e, a = 0; a < t.length; a += 1) {
            if (t[a] === i) return !0;
          }return !1;
        }return !1;
      }, index: function index() {
        var e,
            t = this[0];if (t) {
          for (e = 0; null !== (t = t.previousSibling);) {
            1 === t.nodeType && (e += 1);
          }return e;
        }
      }, eq: function eq(e) {
        if (void 0 === e) return this;var t,
            a = this.length;return new l(a - 1 < e ? [] : e < 0 ? (t = a + e) < 0 ? [] : [this[t]] : [this[e]]);
      }, append: function append() {
        for (var e, t = [], a = arguments.length; a--;) {
          t[a] = arguments[a];
        }for (var i = 0; i < t.length; i += 1) {
          e = t[i];for (var s = 0; s < this.length; s += 1) {
            if ("string" == typeof e) {
              var r = f.createElement("div");for (r.innerHTML = e; r.firstChild;) {
                this[s].appendChild(r.firstChild);
              }
            } else if (e instanceof l) for (var n = 0; n < e.length; n += 1) {
              this[s].appendChild(e[n]);
            } else this[s].appendChild(e);
          }
        }return this;
      }, prepend: function prepend(e) {
        var t, a;for (t = 0; t < this.length; t += 1) {
          if ("string" == typeof e) {
            var i = f.createElement("div");for (i.innerHTML = e, a = i.childNodes.length - 1; 0 <= a; a -= 1) {
              this[t].insertBefore(i.childNodes[a], this[t].childNodes[0]);
            }
          } else if (e instanceof l) for (a = 0; a < e.length; a += 1) {
            this[t].insertBefore(e[a], this[t].childNodes[0]);
          } else this[t].insertBefore(e, this[t].childNodes[0]);
        }return this;
      }, next: function next(e) {
        return 0 < this.length ? e ? this[0].nextElementSibling && L(this[0].nextElementSibling).is(e) ? new l([this[0].nextElementSibling]) : new l([]) : this[0].nextElementSibling ? new l([this[0].nextElementSibling]) : new l([]) : new l([]);
      }, nextAll: function nextAll(e) {
        var t = [],
            a = this[0];if (!a) return new l([]);for (; a.nextElementSibling;) {
          var i = a.nextElementSibling;e ? L(i).is(e) && t.push(i) : t.push(i), a = i;
        }return new l(t);
      }, prev: function prev(e) {
        if (0 < this.length) {
          var t = this[0];return e ? t.previousElementSibling && L(t.previousElementSibling).is(e) ? new l([t.previousElementSibling]) : new l([]) : t.previousElementSibling ? new l([t.previousElementSibling]) : new l([]);
        }return new l([]);
      }, prevAll: function prevAll(e) {
        var t = [],
            a = this[0];if (!a) return new l([]);for (; a.previousElementSibling;) {
          var i = a.previousElementSibling;e ? L(i).is(e) && t.push(i) : t.push(i), a = i;
        }return new l(t);
      }, parent: function parent(e) {
        for (var t = [], a = 0; a < this.length; a += 1) {
          null !== this[a].parentNode && (e ? L(this[a].parentNode).is(e) && t.push(this[a].parentNode) : t.push(this[a].parentNode));
        }return L(r(t));
      }, parents: function parents(e) {
        for (var t = [], a = 0; a < this.length; a += 1) {
          for (var i = this[a].parentNode; i;) {
            e ? L(i).is(e) && t.push(i) : t.push(i), i = i.parentNode;
          }
        }return L(r(t));
      }, closest: function closest(e) {
        var t = this;return void 0 === e ? new l([]) : (t.is(e) || (t = t.parents(e).eq(0)), t);
      }, find: function find(e) {
        for (var t = [], a = 0; a < this.length; a += 1) {
          for (var i = this[a].querySelectorAll(e), s = 0; s < i.length; s += 1) {
            t.push(i[s]);
          }
        }return new l(t);
      }, children: function children(e) {
        for (var t = [], a = 0; a < this.length; a += 1) {
          for (var i = this[a].childNodes, s = 0; s < i.length; s += 1) {
            e ? 1 === i[s].nodeType && L(i[s]).is(e) && t.push(i[s]) : 1 === i[s].nodeType && t.push(i[s]);
          }
        }return new l(r(t));
      }, remove: function remove() {
        for (var e = 0; e < this.length; e += 1) {
          this[e].parentNode && this[e].parentNode.removeChild(this[e]);
        }return this;
      }, add: function add() {
        for (var e = [], t = arguments.length; t--;) {
          e[t] = arguments[t];
        }var a, i;for (a = 0; a < e.length; a += 1) {
          var s = L(e[a]);for (i = 0; i < s.length; i += 1) {
            this[this.length] = s[i], this.length += 1;
          }
        }return this;
      }, styles: function styles() {
        return this[0] ? J.getComputedStyle(this[0], null) : {};
      } };Object.keys(t).forEach(function (e) {
      L.fn[e] = t[e];
    });var e,
        a,
        i,
        ee = { deleteProps: function deleteProps(e) {
        var t = e;Object.keys(t).forEach(function (e) {
          try {
            t[e] = null;
          } catch (e) {}try {
            delete t[e];
          } catch (e) {}
        });
      }, nextTick: function nextTick(e, t) {
        return void 0 === t && (t = 0), setTimeout(e, t);
      }, now: function now() {
        return Date.now();
      }, getTranslate: function getTranslate(e, t) {
        var a, i, s;void 0 === t && (t = "x");var r = J.getComputedStyle(e, null);return J.WebKitCSSMatrix ? (6 < (i = r.transform || r.webkitTransform).split(",").length && (i = i.split(", ").map(function (e) {
          return e.replace(",", ".");
        }).join(", ")), s = new J.WebKitCSSMatrix("none" === i ? "" : i)) : a = (s = r.MozTransform || r.OTransform || r.MsTransform || r.msTransform || r.transform || r.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,")).toString().split(","), "x" === t && (i = J.WebKitCSSMatrix ? s.m41 : 16 === a.length ? parseFloat(a[12]) : parseFloat(a[4])), "y" === t && (i = J.WebKitCSSMatrix ? s.m42 : 16 === a.length ? parseFloat(a[13]) : parseFloat(a[5])), i || 0;
      }, parseUrlQuery: function parseUrlQuery(e) {
        var t,
            a,
            i,
            s,
            r = {},
            n = e || J.location.href;if ("string" == typeof n && n.length) for (s = (a = (n = -1 < n.indexOf("?") ? n.replace(/\S*\?/, "") : "").split("&").filter(function (e) {
          return "" !== e;
        })).length, t = 0; t < s; t += 1) {
          i = a[t].replace(/#\S+/g, "").split("="), r[decodeURIComponent(i[0])] = void 0 === i[1] ? void 0 : decodeURIComponent(i[1]) || "";
        }return r;
      }, isObject: function isObject(e) {
        return "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && null !== e && e.constructor && e.constructor === Object;
      }, extend: function extend() {
        for (var e = [], t = arguments.length; t--;) {
          e[t] = arguments[t];
        }for (var a = Object(e[0]), i = 1; i < e.length; i += 1) {
          var s = e[i];if (null != s) for (var r = Object.keys(Object(s)), n = 0, o = r.length; n < o; n += 1) {
            var l = r[n],
                d = Object.getOwnPropertyDescriptor(s, l);void 0 !== d && d.enumerable && (ee.isObject(a[l]) && ee.isObject(s[l]) ? ee.extend(a[l], s[l]) : !ee.isObject(a[l]) && ee.isObject(s[l]) ? (a[l] = {}, ee.extend(a[l], s[l])) : a[l] = s[l]);
          }
        }return a;
      } },
        te = (i = f.createElement("div"), { touch: J.Modernizr && !0 === J.Modernizr.touch || !!(0 < J.navigator.maxTouchPoints || "ontouchstart" in J || J.DocumentTouch && f instanceof J.DocumentTouch), pointerEvents: !!(J.navigator.pointerEnabled || J.PointerEvent || "maxTouchPoints" in J.navigator), prefixedPointerEvents: !!J.navigator.msPointerEnabled, transition: (a = i.style, "transition" in a || "webkitTransition" in a || "MozTransition" in a), transforms3d: J.Modernizr && !0 === J.Modernizr.csstransforms3d || (e = i.style, "webkitPerspective" in e || "MozPerspective" in e || "OPerspective" in e || "MsPerspective" in e || "perspective" in e), flexbox: function () {
        for (var e = i.style, t = "alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "), a = 0; a < t.length; a += 1) {
          if (t[a] in e) return !0;
        }return !1;
      }(), observer: "MutationObserver" in J || "WebkitMutationObserver" in J, passiveListener: function () {
        var e = !1;try {
          var t = Object.defineProperty({}, "passive", { get: function get() {
              e = !0;
            } });J.addEventListener("testPassiveListener", null, t);
        } catch (e) {}return e;
      }(), gestures: "ongesturestart" in J }),
        s = function s(e) {
      void 0 === e && (e = {});var t = this;t.params = e, t.eventsListeners = {}, t.params && t.params.on && Object.keys(t.params.on).forEach(function (e) {
        t.on(e, t.params.on[e]);
      });
    },
        n = { components: { configurable: !0 } };s.prototype.on = function (e, t, a) {
      var i = this;if ("function" != typeof t) return i;var s = a ? "unshift" : "push";return e.split(" ").forEach(function (e) {
        i.eventsListeners[e] || (i.eventsListeners[e] = []), i.eventsListeners[e][s](t);
      }), i;
    }, s.prototype.once = function (i, s, e) {
      var r = this;if ("function" != typeof s) return r;return r.on(i, function e() {
        for (var t = [], a = arguments.length; a--;) {
          t[a] = arguments[a];
        }s.apply(r, t), r.off(i, e);
      }, e);
    }, s.prototype.off = function (e, i) {
      var s = this;return s.eventsListeners && e.split(" ").forEach(function (a) {
        void 0 === i ? s.eventsListeners[a] = [] : s.eventsListeners[a] && s.eventsListeners[a].length && s.eventsListeners[a].forEach(function (e, t) {
          e === i && s.eventsListeners[a].splice(t, 1);
        });
      }), s;
    }, s.prototype.emit = function () {
      for (var e = [], t = arguments.length; t--;) {
        e[t] = arguments[t];
      }var a,
          i,
          s,
          r = this;return r.eventsListeners && ("string" == typeof e[0] || Array.isArray(e[0]) ? (a = e[0], i = e.slice(1, e.length), s = r) : (a = e[0].events, i = e[0].data, s = e[0].context || r), (Array.isArray(a) ? a : a.split(" ")).forEach(function (e) {
        if (r.eventsListeners && r.eventsListeners[e]) {
          var t = [];r.eventsListeners[e].forEach(function (e) {
            t.push(e);
          }), t.forEach(function (e) {
            e.apply(s, i);
          });
        }
      })), r;
    }, s.prototype.useModulesParams = function (a) {
      var i = this;i.modules && Object.keys(i.modules).forEach(function (e) {
        var t = i.modules[e];t.params && ee.extend(a, t.params);
      });
    }, s.prototype.useModules = function (i) {
      void 0 === i && (i = {});var s = this;s.modules && Object.keys(s.modules).forEach(function (e) {
        var a = s.modules[e],
            t = i[e] || {};a.instance && Object.keys(a.instance).forEach(function (e) {
          var t = a.instance[e];s[e] = "function" == typeof t ? t.bind(s) : t;
        }), a.on && s.on && Object.keys(a.on).forEach(function (e) {
          s.on(e, a.on[e]);
        }), a.create && a.create.bind(s)(t);
      });
    }, n.components.set = function (e) {
      this.use && this.use(e);
    }, s.installModule = function (t) {
      for (var e = [], a = arguments.length - 1; 0 < a--;) {
        e[a] = arguments[a + 1];
      }var i = this;i.prototype.modules || (i.prototype.modules = {});var s = t.name || Object.keys(i.prototype.modules).length + "_" + ee.now();return (i.prototype.modules[s] = t).proto && Object.keys(t.proto).forEach(function (e) {
        i.prototype[e] = t.proto[e];
      }), t.static && Object.keys(t.static).forEach(function (e) {
        i[e] = t.static[e];
      }), t.install && t.install.apply(i, e), i;
    }, s.use = function (e) {
      for (var t = [], a = arguments.length - 1; 0 < a--;) {
        t[a] = arguments[a + 1];
      }var i = this;return Array.isArray(e) ? (e.forEach(function (e) {
        return i.installModule(e);
      }), i) : i.installModule.apply(i, [e].concat(t));
    }, Object.defineProperties(s, n);var o = { updateSize: function updateSize() {
        var e,
            t,
            a = this,
            i = a.$el;e = void 0 !== a.params.width ? a.params.width : i[0].clientWidth, t = void 0 !== a.params.height ? a.params.height : i[0].clientHeight, 0 === e && a.isHorizontal() || 0 === t && a.isVertical() || (e = e - parseInt(i.css("padding-left"), 10) - parseInt(i.css("padding-right"), 10), t = t - parseInt(i.css("padding-top"), 10) - parseInt(i.css("padding-bottom"), 10), ee.extend(a, { width: e, height: t, size: a.isHorizontal() ? e : t }));
      }, updateSlides: function updateSlides() {
        var e = this,
            t = e.params,
            a = e.$wrapperEl,
            i = e.size,
            s = e.rtlTranslate,
            r = e.wrongRTL,
            n = e.virtual && t.virtual.enabled,
            o = n ? e.virtual.slides.length : e.slides.length,
            l = a.children("." + e.params.slideClass),
            d = n ? e.virtual.slides.length : l.length,
            p = [],
            c = [],
            u = [],
            h = t.slidesOffsetBefore;"function" == typeof h && (h = t.slidesOffsetBefore.call(e));var v = t.slidesOffsetAfter;"function" == typeof v && (v = t.slidesOffsetAfter.call(e));var f = e.snapGrid.length,
            m = e.snapGrid.length,
            g = t.spaceBetween,
            b = -h,
            w = 0,
            y = 0;if (void 0 !== i) {
          var x, T;"string" == typeof g && 0 <= g.indexOf("%") && (g = parseFloat(g.replace("%", "")) / 100 * i), e.virtualSize = -g, s ? l.css({ marginLeft: "", marginTop: "" }) : l.css({ marginRight: "", marginBottom: "" }), 1 < t.slidesPerColumn && (x = Math.floor(d / t.slidesPerColumn) === d / e.params.slidesPerColumn ? d : Math.ceil(d / t.slidesPerColumn) * t.slidesPerColumn, "auto" !== t.slidesPerView && "row" === t.slidesPerColumnFill && (x = Math.max(x, t.slidesPerView * t.slidesPerColumn)));for (var E, S = t.slidesPerColumn, C = x / S, M = Math.floor(d / t.slidesPerColumn), k = 0; k < d; k += 1) {
            T = 0;var P = l.eq(k);if (1 < t.slidesPerColumn) {
              var z = void 0,
                  $ = void 0,
                  L = void 0;"column" === t.slidesPerColumnFill ? (L = k - ($ = Math.floor(k / S)) * S, (M < $ || $ === M && L === S - 1) && S <= (L += 1) && (L = 0, $ += 1), z = $ + L * x / S, P.css({ "-webkit-box-ordinal-group": z, "-moz-box-ordinal-group": z, "-ms-flex-order": z, "-webkit-order": z, order: z })) : $ = k - (L = Math.floor(k / C)) * C, P.css("margin-" + (e.isHorizontal() ? "top" : "left"), 0 !== L && t.spaceBetween && t.spaceBetween + "px").attr("data-swiper-column", $).attr("data-swiper-row", L);
            }if ("none" !== P.css("display")) {
              if ("auto" === t.slidesPerView) {
                var I = J.getComputedStyle(P[0], null),
                    D = P[0].style.transform,
                    O = P[0].style.webkitTransform;if (D && (P[0].style.transform = "none"), O && (P[0].style.webkitTransform = "none"), t.roundLengths) T = e.isHorizontal() ? P.outerWidth(!0) : P.outerHeight(!0);else if (e.isHorizontal()) {
                  var A = parseFloat(I.getPropertyValue("width")),
                      N = parseFloat(I.getPropertyValue("padding-left")),
                      H = parseFloat(I.getPropertyValue("padding-right")),
                      G = parseFloat(I.getPropertyValue("margin-left")),
                      B = parseFloat(I.getPropertyValue("margin-right")),
                      X = I.getPropertyValue("box-sizing");T = X && "border-box" === X ? A + G + B : A + N + H + G + B;
                } else {
                  var Y = parseFloat(I.getPropertyValue("height")),
                      V = parseFloat(I.getPropertyValue("padding-top")),
                      F = parseFloat(I.getPropertyValue("padding-bottom")),
                      R = parseFloat(I.getPropertyValue("margin-top")),
                      q = parseFloat(I.getPropertyValue("margin-bottom")),
                      W = I.getPropertyValue("box-sizing");T = W && "border-box" === W ? Y + R + q : Y + V + F + R + q;
                }D && (P[0].style.transform = D), O && (P[0].style.webkitTransform = O), t.roundLengths && (T = Math.floor(T));
              } else T = (i - (t.slidesPerView - 1) * g) / t.slidesPerView, t.roundLengths && (T = Math.floor(T)), l[k] && (e.isHorizontal() ? l[k].style.width = T + "px" : l[k].style.height = T + "px");l[k] && (l[k].swiperSlideSize = T), u.push(T), t.centeredSlides ? (b = b + T / 2 + w / 2 + g, 0 === w && 0 !== k && (b = b - i / 2 - g), 0 === k && (b = b - i / 2 - g), Math.abs(b) < .001 && (b = 0), t.roundLengths && (b = Math.floor(b)), y % t.slidesPerGroup == 0 && p.push(b), c.push(b)) : (t.roundLengths && (b = Math.floor(b)), y % t.slidesPerGroup == 0 && p.push(b), c.push(b), b = b + T + g), e.virtualSize += T + g, w = T, y += 1;
            }
          }if (e.virtualSize = Math.max(e.virtualSize, i) + v, s && r && ("slide" === t.effect || "coverflow" === t.effect) && a.css({ width: e.virtualSize + t.spaceBetween + "px" }), te.flexbox && !t.setWrapperSize || (e.isHorizontal() ? a.css({ width: e.virtualSize + t.spaceBetween + "px" }) : a.css({ height: e.virtualSize + t.spaceBetween + "px" })), 1 < t.slidesPerColumn && (e.virtualSize = (T + t.spaceBetween) * x, e.virtualSize = Math.ceil(e.virtualSize / t.slidesPerColumn) - t.spaceBetween, e.isHorizontal() ? a.css({ width: e.virtualSize + t.spaceBetween + "px" }) : a.css({ height: e.virtualSize + t.spaceBetween + "px" }), t.centeredSlides)) {
            E = [];for (var j = 0; j < p.length; j += 1) {
              var U = p[j];t.roundLengths && (U = Math.floor(U)), p[j] < e.virtualSize + p[0] && E.push(U);
            }p = E;
          }if (!t.centeredSlides) {
            E = [];for (var K = 0; K < p.length; K += 1) {
              var _ = p[K];t.roundLengths && (_ = Math.floor(_)), p[K] <= e.virtualSize - i && E.push(_);
            }p = E, 1 < Math.floor(e.virtualSize - i) - Math.floor(p[p.length - 1]) && p.push(e.virtualSize - i);
          }if (0 === p.length && (p = [0]), 0 !== t.spaceBetween && (e.isHorizontal() ? s ? l.css({ marginLeft: g + "px" }) : l.css({ marginRight: g + "px" }) : l.css({ marginBottom: g + "px" })), t.centerInsufficientSlides) {
            var Z = 0;if (u.forEach(function (e) {
              Z += e + (t.spaceBetween ? t.spaceBetween : 0);
            }), (Z -= t.spaceBetween) < i) {
              var Q = (i - Z) / 2;p.forEach(function (e, t) {
                p[t] = e - Q;
              }), c.forEach(function (e, t) {
                c[t] = e + Q;
              });
            }
          }ee.extend(e, { slides: l, snapGrid: p, slidesGrid: c, slidesSizesGrid: u }), d !== o && e.emit("slidesLengthChange"), p.length !== f && (e.params.watchOverflow && e.checkOverflow(), e.emit("snapGridLengthChange")), c.length !== m && e.emit("slidesGridLengthChange"), (t.watchSlidesProgress || t.watchSlidesVisibility) && e.updateSlidesOffset();
        }
      }, updateAutoHeight: function updateAutoHeight(e) {
        var t,
            a = this,
            i = [],
            s = 0;if ("number" == typeof e ? a.setTransition(e) : !0 === e && a.setTransition(a.params.speed), "auto" !== a.params.slidesPerView && 1 < a.params.slidesPerView) for (t = 0; t < Math.ceil(a.params.slidesPerView); t += 1) {
          var r = a.activeIndex + t;if (r > a.slides.length) break;i.push(a.slides.eq(r)[0]);
        } else i.push(a.slides.eq(a.activeIndex)[0]);for (t = 0; t < i.length; t += 1) {
          if (void 0 !== i[t]) {
            var n = i[t].offsetHeight;s = s < n ? n : s;
          }
        }s && a.$wrapperEl.css("height", s + "px");
      }, updateSlidesOffset: function updateSlidesOffset() {
        for (var e = this.slides, t = 0; t < e.length; t += 1) {
          e[t].swiperSlideOffset = this.isHorizontal() ? e[t].offsetLeft : e[t].offsetTop;
        }
      }, updateSlidesProgress: function updateSlidesProgress(e) {
        void 0 === e && (e = this && this.translate || 0);var t = this,
            a = t.params,
            i = t.slides,
            s = t.rtlTranslate;if (0 !== i.length) {
          void 0 === i[0].swiperSlideOffset && t.updateSlidesOffset();var r = -e;s && (r = e), i.removeClass(a.slideVisibleClass), t.visibleSlidesIndexes = [], t.visibleSlides = [];for (var n = 0; n < i.length; n += 1) {
            var o = i[n],
                l = (r + (a.centeredSlides ? t.minTranslate() : 0) - o.swiperSlideOffset) / (o.swiperSlideSize + a.spaceBetween);if (a.watchSlidesVisibility) {
              var d = -(r - o.swiperSlideOffset),
                  p = d + t.slidesSizesGrid[n];(0 <= d && d < t.size || 0 < p && p <= t.size || d <= 0 && p >= t.size) && (t.visibleSlides.push(o), t.visibleSlidesIndexes.push(n), i.eq(n).addClass(a.slideVisibleClass));
            }o.progress = s ? -l : l;
          }t.visibleSlides = L(t.visibleSlides);
        }
      }, updateProgress: function updateProgress(e) {
        void 0 === e && (e = this && this.translate || 0);var t = this,
            a = t.params,
            i = t.maxTranslate() - t.minTranslate(),
            s = t.progress,
            r = t.isBeginning,
            n = t.isEnd,
            o = r,
            l = n;0 === i ? n = r = !(s = 0) : (r = (s = (e - t.minTranslate()) / i) <= 0, n = 1 <= s), ee.extend(t, { progress: s, isBeginning: r, isEnd: n }), (a.watchSlidesProgress || a.watchSlidesVisibility) && t.updateSlidesProgress(e), r && !o && t.emit("reachBeginning toEdge"), n && !l && t.emit("reachEnd toEdge"), (o && !r || l && !n) && t.emit("fromEdge"), t.emit("progress", s);
      }, updateSlidesClasses: function updateSlidesClasses() {
        var e,
            t = this,
            a = t.slides,
            i = t.params,
            s = t.$wrapperEl,
            r = t.activeIndex,
            n = t.realIndex,
            o = t.virtual && i.virtual.enabled;a.removeClass(i.slideActiveClass + " " + i.slideNextClass + " " + i.slidePrevClass + " " + i.slideDuplicateActiveClass + " " + i.slideDuplicateNextClass + " " + i.slideDuplicatePrevClass), (e = o ? t.$wrapperEl.find("." + i.slideClass + '[data-swiper-slide-index="' + r + '"]') : a.eq(r)).addClass(i.slideActiveClass), i.loop && (e.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + n + '"]').addClass(i.slideDuplicateActiveClass));var l = e.nextAll("." + i.slideClass).eq(0).addClass(i.slideNextClass);i.loop && 0 === l.length && (l = a.eq(0)).addClass(i.slideNextClass);var d = e.prevAll("." + i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop && 0 === d.length && (d = a.eq(-1)).addClass(i.slidePrevClass), i.loop && (l.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + l.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicateNextClass), d.hasClass(i.slideDuplicateClass) ? s.children("." + i.slideClass + ":not(." + i.slideDuplicateClass + ')[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass) : s.children("." + i.slideClass + "." + i.slideDuplicateClass + '[data-swiper-slide-index="' + d.attr("data-swiper-slide-index") + '"]').addClass(i.slideDuplicatePrevClass));
      }, updateActiveIndex: function updateActiveIndex(e) {
        var t,
            a = this,
            i = a.rtlTranslate ? a.translate : -a.translate,
            s = a.slidesGrid,
            r = a.snapGrid,
            n = a.params,
            o = a.activeIndex,
            l = a.realIndex,
            d = a.snapIndex,
            p = e;if (void 0 === p) {
          for (var c = 0; c < s.length; c += 1) {
            void 0 !== s[c + 1] ? i >= s[c] && i < s[c + 1] - (s[c + 1] - s[c]) / 2 ? p = c : i >= s[c] && i < s[c + 1] && (p = c + 1) : i >= s[c] && (p = c);
          }n.normalizeSlideIndex && (p < 0 || void 0 === p) && (p = 0);
        }if ((t = 0 <= r.indexOf(i) ? r.indexOf(i) : Math.floor(p / n.slidesPerGroup)) >= r.length && (t = r.length - 1), p !== o) {
          var u = parseInt(a.slides.eq(p).attr("data-swiper-slide-index") || p, 10);ee.extend(a, { snapIndex: t, realIndex: u, previousIndex: o, activeIndex: p }), a.emit("activeIndexChange"), a.emit("snapIndexChange"), l !== u && a.emit("realIndexChange"), a.emit("slideChange");
        } else t !== d && (a.snapIndex = t, a.emit("snapIndexChange"));
      }, updateClickedSlide: function updateClickedSlide(e) {
        var t = this,
            a = t.params,
            i = L(e.target).closest("." + a.slideClass)[0],
            s = !1;if (i) for (var r = 0; r < t.slides.length; r += 1) {
          t.slides[r] === i && (s = !0);
        }if (!i || !s) return t.clickedSlide = void 0, void (t.clickedIndex = void 0);t.clickedSlide = i, t.virtual && t.params.virtual.enabled ? t.clickedIndex = parseInt(L(i).attr("data-swiper-slide-index"), 10) : t.clickedIndex = L(i).index(), a.slideToClickedSlide && void 0 !== t.clickedIndex && t.clickedIndex !== t.activeIndex && t.slideToClickedSlide();
      } };var d = { getTranslate: function getTranslate(e) {
        void 0 === e && (e = this.isHorizontal() ? "x" : "y");var t = this.params,
            a = this.rtlTranslate,
            i = this.translate,
            s = this.$wrapperEl;if (t.virtualTranslate) return a ? -i : i;var r = ee.getTranslate(s[0], e);return a && (r = -r), r || 0;
      }, setTranslate: function setTranslate(e, t) {
        var a = this,
            i = a.rtlTranslate,
            s = a.params,
            r = a.$wrapperEl,
            n = a.progress,
            o = 0,
            l = 0;a.isHorizontal() ? o = i ? -e : e : l = e, s.roundLengths && (o = Math.floor(o), l = Math.floor(l)), s.virtualTranslate || (te.transforms3d ? r.transform("translate3d(" + o + "px, " + l + "px, 0px)") : r.transform("translate(" + o + "px, " + l + "px)")), a.previousTranslate = a.translate, a.translate = a.isHorizontal() ? o : l;var d = a.maxTranslate() - a.minTranslate();(0 === d ? 0 : (e - a.minTranslate()) / d) !== n && a.updateProgress(e), a.emit("setTranslate", a.translate, t);
      }, minTranslate: function minTranslate() {
        return -this.snapGrid[0];
      }, maxTranslate: function maxTranslate() {
        return -this.snapGrid[this.snapGrid.length - 1];
      } };var p = { setTransition: function setTransition(e, t) {
        this.$wrapperEl.transition(e), this.emit("setTransition", e, t);
      }, transitionStart: function transitionStart(e, t) {
        void 0 === e && (e = !0);var a = this,
            i = a.activeIndex,
            s = a.params,
            r = a.previousIndex;s.autoHeight && a.updateAutoHeight();var n = t;if (n || (n = r < i ? "next" : i < r ? "prev" : "reset"), a.emit("transitionStart"), e && i !== r) {
          if ("reset" === n) return void a.emit("slideResetTransitionStart");a.emit("slideChangeTransitionStart"), "next" === n ? a.emit("slideNextTransitionStart") : a.emit("slidePrevTransitionStart");
        }
      }, transitionEnd: function transitionEnd(e, t) {
        void 0 === e && (e = !0);var a = this,
            i = a.activeIndex,
            s = a.previousIndex;a.animating = !1, a.setTransition(0);var r = t;if (r || (r = s < i ? "next" : i < s ? "prev" : "reset"), a.emit("transitionEnd"), e && i !== s) {
          if ("reset" === r) return void a.emit("slideResetTransitionEnd");a.emit("slideChangeTransitionEnd"), "next" === r ? a.emit("slideNextTransitionEnd") : a.emit("slidePrevTransitionEnd");
        }
      } };var c = { slideTo: function slideTo(e, t, a, i) {
        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0);var s = this,
            r = e;r < 0 && (r = 0);var n = s.params,
            o = s.snapGrid,
            l = s.slidesGrid,
            d = s.previousIndex,
            p = s.activeIndex,
            c = s.rtlTranslate;if (s.animating && n.preventInteractionOnTransition) return !1;var u = Math.floor(r / n.slidesPerGroup);u >= o.length && (u = o.length - 1), (p || n.initialSlide || 0) === (d || 0) && a && s.emit("beforeSlideChangeStart");var h,
            v = -o[u];if (s.updateProgress(v), n.normalizeSlideIndex) for (var f = 0; f < l.length; f += 1) {
          -Math.floor(100 * v) >= Math.floor(100 * l[f]) && (r = f);
        }if (s.initialized && r !== p) {
          if (!s.allowSlideNext && v < s.translate && v < s.minTranslate()) return !1;if (!s.allowSlidePrev && v > s.translate && v > s.maxTranslate() && (p || 0) !== r) return !1;
        }return h = p < r ? "next" : r < p ? "prev" : "reset", c && -v === s.translate || !c && v === s.translate ? (s.updateActiveIndex(r), n.autoHeight && s.updateAutoHeight(), s.updateSlidesClasses(), "slide" !== n.effect && s.setTranslate(v), "reset" !== h && (s.transitionStart(a, h), s.transitionEnd(a, h)), !1) : (0 !== t && te.transition ? (s.setTransition(t), s.setTranslate(v), s.updateActiveIndex(r), s.updateSlidesClasses(), s.emit("beforeTransitionStart", t, i), s.transitionStart(a, h), s.animating || (s.animating = !0, s.onSlideToWrapperTransitionEnd || (s.onSlideToWrapperTransitionEnd = function (e) {
          s && !s.destroyed && e.target === this && (s.$wrapperEl[0].removeEventListener("transitionend", s.onSlideToWrapperTransitionEnd), s.$wrapperEl[0].removeEventListener("webkitTransitionEnd", s.onSlideToWrapperTransitionEnd), s.onSlideToWrapperTransitionEnd = null, delete s.onSlideToWrapperTransitionEnd, s.transitionEnd(a, h));
        }), s.$wrapperEl[0].addEventListener("transitionend", s.onSlideToWrapperTransitionEnd), s.$wrapperEl[0].addEventListener("webkitTransitionEnd", s.onSlideToWrapperTransitionEnd))) : (s.setTransition(0), s.setTranslate(v), s.updateActiveIndex(r), s.updateSlidesClasses(), s.emit("beforeTransitionStart", t, i), s.transitionStart(a, h), s.transitionEnd(a, h)), !0);
      }, slideToLoop: function slideToLoop(e, t, a, i) {
        void 0 === e && (e = 0), void 0 === t && (t = this.params.speed), void 0 === a && (a = !0);var s = e;return this.params.loop && (s += this.loopedSlides), this.slideTo(s, t, a, i);
      }, slideNext: function slideNext(e, t, a) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);var i = this,
            s = i.params,
            r = i.animating;return s.loop ? !r && (i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft, i.slideTo(i.activeIndex + s.slidesPerGroup, e, t, a)) : i.slideTo(i.activeIndex + s.slidesPerGroup, e, t, a);
      }, slidePrev: function slidePrev(e, t, a) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);var i = this,
            s = i.params,
            r = i.animating,
            n = i.snapGrid,
            o = i.slidesGrid,
            l = i.rtlTranslate;if (s.loop) {
          if (r) return !1;i.loopFix(), i._clientLeft = i.$wrapperEl[0].clientLeft;
        }function d(e) {
          return e < 0 ? -Math.floor(Math.abs(e)) : Math.floor(e);
        }var p,
            c = d(l ? i.translate : -i.translate),
            u = n.map(function (e) {
          return d(e);
        }),
            h = (o.map(function (e) {
          return d(e);
        }), n[u.indexOf(c)], n[u.indexOf(c) - 1]);return void 0 !== h && (p = o.indexOf(h)) < 0 && (p = i.activeIndex - 1), i.slideTo(p, e, t, a);
      }, slideReset: function slideReset(e, t, a) {
        return void 0 === e && (e = this.params.speed), void 0 === t && (t = !0), this.slideTo(this.activeIndex, e, t, a);
      }, slideToClosest: function slideToClosest(e, t, a) {
        void 0 === e && (e = this.params.speed), void 0 === t && (t = !0);var i = this,
            s = i.activeIndex,
            r = Math.floor(s / i.params.slidesPerGroup);if (r < i.snapGrid.length - 1) {
          var n = i.rtlTranslate ? i.translate : -i.translate,
              o = i.snapGrid[r];(i.snapGrid[r + 1] - o) / 2 < n - o && (s = i.params.slidesPerGroup);
        }return i.slideTo(s, e, t, a);
      }, slideToClickedSlide: function slideToClickedSlide() {
        var e,
            t = this,
            a = t.params,
            i = t.$wrapperEl,
            s = "auto" === a.slidesPerView ? t.slidesPerViewDynamic() : a.slidesPerView,
            r = t.clickedIndex;if (a.loop) {
          if (t.animating) return;e = parseInt(L(t.clickedSlide).attr("data-swiper-slide-index"), 10), a.centeredSlides ? r < t.loopedSlides - s / 2 || r > t.slides.length - t.loopedSlides + s / 2 ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), ee.nextTick(function () {
            t.slideTo(r);
          })) : t.slideTo(r) : r > t.slides.length - s ? (t.loopFix(), r = i.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]:not(.' + a.slideDuplicateClass + ")").eq(0).index(), ee.nextTick(function () {
            t.slideTo(r);
          })) : t.slideTo(r);
        } else t.slideTo(r);
      } };var u = { loopCreate: function loopCreate() {
        var i = this,
            e = i.params,
            t = i.$wrapperEl;t.children("." + e.slideClass + "." + e.slideDuplicateClass).remove();var s = t.children("." + e.slideClass);if (e.loopFillGroupWithBlank) {
          var a = e.slidesPerGroup - s.length % e.slidesPerGroup;if (a !== e.slidesPerGroup) {
            for (var r = 0; r < a; r += 1) {
              var n = L(f.createElement("div")).addClass(e.slideClass + " " + e.slideBlankClass);t.append(n);
            }s = t.children("." + e.slideClass);
          }
        }"auto" !== e.slidesPerView || e.loopedSlides || (e.loopedSlides = s.length), i.loopedSlides = parseInt(e.loopedSlides || e.slidesPerView, 10), i.loopedSlides += e.loopAdditionalSlides, i.loopedSlides > s.length && (i.loopedSlides = s.length);var o = [],
            l = [];s.each(function (e, t) {
          var a = L(t);e < i.loopedSlides && l.push(t), e < s.length && e >= s.length - i.loopedSlides && o.push(t), a.attr("data-swiper-slide-index", e);
        });for (var d = 0; d < l.length; d += 1) {
          t.append(L(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));
        }for (var p = o.length - 1; 0 <= p; p -= 1) {
          t.prepend(L(o[p].cloneNode(!0)).addClass(e.slideDuplicateClass));
        }
      }, loopFix: function loopFix() {
        var e,
            t = this,
            a = t.params,
            i = t.activeIndex,
            s = t.slides,
            r = t.loopedSlides,
            n = t.allowSlidePrev,
            o = t.allowSlideNext,
            l = t.snapGrid,
            d = t.rtlTranslate;t.allowSlidePrev = !0, t.allowSlideNext = !0;var p = -l[i] - t.getTranslate();i < r ? (e = s.length - 3 * r + i, e += r, t.slideTo(e, 0, !1, !0) && 0 !== p && t.setTranslate((d ? -t.translate : t.translate) - p)) : ("auto" === a.slidesPerView && 2 * r <= i || i >= s.length - r) && (e = -s.length + i + r, e += r, t.slideTo(e, 0, !1, !0) && 0 !== p && t.setTranslate((d ? -t.translate : t.translate) - p));t.allowSlidePrev = n, t.allowSlideNext = o;
      }, loopDestroy: function loopDestroy() {
        var e = this.$wrapperEl,
            t = this.params,
            a = this.slides;e.children("." + t.slideClass + "." + t.slideDuplicateClass + ",." + t.slideClass + "." + t.slideBlankClass).remove(), a.removeAttr("data-swiper-slide-index");
      } };var h = { setGrabCursor: function setGrabCursor(e) {
        if (!(te.touch || !this.params.simulateTouch || this.params.watchOverflow && this.isLocked)) {
          var t = this.el;t.style.cursor = "move", t.style.cursor = e ? "-webkit-grabbing" : "-webkit-grab", t.style.cursor = e ? "-moz-grabbin" : "-moz-grab", t.style.cursor = e ? "grabbing" : "grab";
        }
      }, unsetGrabCursor: function unsetGrabCursor() {
        te.touch || this.params.watchOverflow && this.isLocked || (this.el.style.cursor = "");
      } };var v = { appendSlide: function appendSlide(e) {
        var t = this,
            a = t.$wrapperEl,
            i = t.params;if (i.loop && t.loopDestroy(), "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) for (var s = 0; s < e.length; s += 1) {
          e[s] && a.append(e[s]);
        } else a.append(e);i.loop && t.loopCreate(), i.observer && te.observer || t.update();
      }, prependSlide: function prependSlide(e) {
        var t = this,
            a = t.params,
            i = t.$wrapperEl,
            s = t.activeIndex;a.loop && t.loopDestroy();var r = s + 1;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) {
          for (var n = 0; n < e.length; n += 1) {
            e[n] && i.prepend(e[n]);
          }r = s + e.length;
        } else i.prepend(e);a.loop && t.loopCreate(), a.observer && te.observer || t.update(), t.slideTo(r, 0, !1);
      }, addSlide: function addSlide(e, t) {
        var a = this,
            i = a.$wrapperEl,
            s = a.params,
            r = a.activeIndex;s.loop && (r -= a.loopedSlides, a.loopDestroy(), a.slides = i.children("." + s.slideClass));var n = a.slides.length;if (e <= 0) a.prependSlide(t);else if (n <= e) a.appendSlide(t);else {
          for (var o = e < r ? r + 1 : r, l = [], d = n - 1; e <= d; d -= 1) {
            var p = a.slides.eq(d);p.remove(), l.unshift(p);
          }if ("object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && "length" in t) {
            for (var c = 0; c < t.length; c += 1) {
              t[c] && i.append(t[c]);
            }o = e < r ? r + t.length : r;
          } else i.append(t);for (var u = 0; u < l.length; u += 1) {
            i.append(l[u]);
          }s.loop && a.loopCreate(), s.observer && te.observer || a.update(), s.loop ? a.slideTo(o + a.loopedSlides, 0, !1) : a.slideTo(o, 0, !1);
        }
      }, removeSlide: function removeSlide(e) {
        var t = this,
            a = t.params,
            i = t.$wrapperEl,
            s = t.activeIndex;a.loop && (s -= t.loopedSlides, t.loopDestroy(), t.slides = i.children("." + a.slideClass));var r,
            n = s;if ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) && "length" in e) {
          for (var o = 0; o < e.length; o += 1) {
            r = e[o], t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1);
          }n = Math.max(n, 0);
        } else r = e, t.slides[r] && t.slides.eq(r).remove(), r < n && (n -= 1), n = Math.max(n, 0);a.loop && t.loopCreate(), a.observer && te.observer || t.update(), a.loop ? t.slideTo(n + t.loopedSlides, 0, !1) : t.slideTo(n, 0, !1);
      }, removeAllSlides: function removeAllSlides() {
        for (var e = [], t = 0; t < this.slides.length; t += 1) {
          e.push(t);
        }this.removeSlide(e);
      } },
        m = function () {
      var e = J.navigator.userAgent,
          t = { ios: !1, android: !1, androidChrome: !1, desktop: !1, windows: !1, iphone: !1, ipod: !1, ipad: !1, cordova: J.cordova || J.phonegap, phonegap: J.cordova || J.phonegap },
          a = e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),
          i = e.match(/(Android);?[\s\/]+([\d.]+)?/),
          s = e.match(/(iPad).*OS\s([\d_]+)/),
          r = e.match(/(iPod)(.*OS\s([\d_]+))?/),
          n = !s && e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if (a && (t.os = "windows", t.osVersion = a[2], t.windows = !0), i && !a && (t.os = "android", t.osVersion = i[2], t.android = !0, t.androidChrome = 0 <= e.toLowerCase().indexOf("chrome")), (s || n || r) && (t.os = "ios", t.ios = !0), n && !r && (t.osVersion = n[2].replace(/_/g, "."), t.iphone = !0), s && (t.osVersion = s[2].replace(/_/g, "."), t.ipad = !0), r && (t.osVersion = r[3] ? r[3].replace(/_/g, ".") : null, t.iphone = !0), t.ios && t.osVersion && 0 <= e.indexOf("Version/") && "10" === t.osVersion.split(".")[0] && (t.osVersion = e.toLowerCase().split("version/")[1].split(" ")[0]), t.desktop = !(t.os || t.android || t.webView), t.webView = (n || s || r) && e.match(/.*AppleWebKit(?!.*Safari)/i), t.os && "ios" === t.os) {
        var o = t.osVersion.split("."),
            l = f.querySelector('meta[name="viewport"]');t.minimalUi = !t.webView && (r || n) && (1 * o[0] == 7 ? 1 <= 1 * o[1] : 7 < 1 * o[0]) && l && 0 <= l.getAttribute("content").indexOf("minimal-ui");
      }return t.pixelRatio = J.devicePixelRatio || 1, t;
    }();function g() {
      var e = this,
          t = e.params,
          a = e.el;if (!a || 0 !== a.offsetWidth) {
        t.breakpoints && e.setBreakpoint();var i = e.allowSlideNext,
            s = e.allowSlidePrev,
            r = e.snapGrid;if (e.allowSlideNext = !0, e.allowSlidePrev = !0, e.updateSize(), e.updateSlides(), t.freeMode) {
          var n = Math.min(Math.max(e.translate, e.maxTranslate()), e.minTranslate());e.setTranslate(n), e.updateActiveIndex(), e.updateSlidesClasses(), t.autoHeight && e.updateAutoHeight();
        } else e.updateSlidesClasses(), ("auto" === t.slidesPerView || 1 < t.slidesPerView) && e.isEnd && !e.params.centeredSlides ? e.slideTo(e.slides.length - 1, 0, !1, !0) : e.slideTo(e.activeIndex, 0, !1, !0);e.allowSlidePrev = s, e.allowSlideNext = i, e.params.watchOverflow && r !== e.snapGrid && e.checkOverflow();
      }
    }var b = { attachEvents: function attachEvents() {
        var e = this,
            t = e.params,
            a = e.touchEvents,
            i = e.el,
            s = e.wrapperEl;e.onTouchStart = function (e) {
          var t = this,
              a = t.touchEventsData,
              i = t.params,
              s = t.touches;if (!t.animating || !i.preventInteractionOnTransition) {
            var r = e;if (r.originalEvent && (r = r.originalEvent), a.isTouchEvent = "touchstart" === r.type, (a.isTouchEvent || !("which" in r) || 3 !== r.which) && !(!a.isTouchEvent && "button" in r && 0 < r.button || a.isTouched && a.isMoved)) if (i.noSwiping && L(r.target).closest(i.noSwipingSelector ? i.noSwipingSelector : "." + i.noSwipingClass)[0]) t.allowClick = !0;else if (!i.swipeHandler || L(r).closest(i.swipeHandler)[0]) {
              s.currentX = "touchstart" === r.type ? r.targetTouches[0].pageX : r.pageX, s.currentY = "touchstart" === r.type ? r.targetTouches[0].pageY : r.pageY;var n = s.currentX,
                  o = s.currentY,
                  l = i.edgeSwipeDetection || i.iOSEdgeSwipeDetection,
                  d = i.edgeSwipeThreshold || i.iOSEdgeSwipeThreshold;if (!l || !(n <= d || n >= J.screen.width - d)) {
                if (ee.extend(a, { isTouched: !0, isMoved: !1, allowTouchCallbacks: !0, isScrolling: void 0, startMoving: void 0 }), s.startX = n, s.startY = o, a.touchStartTime = ee.now(), t.allowClick = !0, t.updateSize(), t.swipeDirection = void 0, 0 < i.threshold && (a.allowThresholdMove = !1), "touchstart" !== r.type) {
                  var p = !0;L(r.target).is(a.formElements) && (p = !1), f.activeElement && L(f.activeElement).is(a.formElements) && f.activeElement !== r.target && f.activeElement.blur();var c = p && t.allowTouchMove && i.touchStartPreventDefault;(i.touchStartForcePreventDefault || c) && r.preventDefault();
                }t.emit("touchStart", r);
              }
            }
          }
        }.bind(e), e.onTouchMove = function (e) {
          var t = this,
              a = t.touchEventsData,
              i = t.params,
              s = t.touches,
              r = t.rtlTranslate,
              n = e;if (n.originalEvent && (n = n.originalEvent), a.isTouched) {
            if (!a.isTouchEvent || "mousemove" !== n.type) {
              var o = "touchmove" === n.type ? n.targetTouches[0].pageX : n.pageX,
                  l = "touchmove" === n.type ? n.targetTouches[0].pageY : n.pageY;if (n.preventedByNestedSwiper) return s.startX = o, void (s.startY = l);if (!t.allowTouchMove) return t.allowClick = !1, void (a.isTouched && (ee.extend(s, { startX: o, startY: l, currentX: o, currentY: l }), a.touchStartTime = ee.now()));if (a.isTouchEvent && i.touchReleaseOnEdges && !i.loop) if (t.isVertical()) {
                if (l < s.startY && t.translate <= t.maxTranslate() || l > s.startY && t.translate >= t.minTranslate()) return a.isTouched = !1, void (a.isMoved = !1);
              } else if (o < s.startX && t.translate <= t.maxTranslate() || o > s.startX && t.translate >= t.minTranslate()) return;if (a.isTouchEvent && f.activeElement && n.target === f.activeElement && L(n.target).is(a.formElements)) return a.isMoved = !0, void (t.allowClick = !1);if (a.allowTouchCallbacks && t.emit("touchMove", n), !(n.targetTouches && 1 < n.targetTouches.length)) {
                s.currentX = o, s.currentY = l;var d,
                    p = s.currentX - s.startX,
                    c = s.currentY - s.startY;if (!(t.params.threshold && Math.sqrt(Math.pow(p, 2) + Math.pow(c, 2)) < t.params.threshold)) if (void 0 === a.isScrolling && (t.isHorizontal() && s.currentY === s.startY || t.isVertical() && s.currentX === s.startX ? a.isScrolling = !1 : 25 <= p * p + c * c && (d = 180 * Math.atan2(Math.abs(c), Math.abs(p)) / Math.PI, a.isScrolling = t.isHorizontal() ? d > i.touchAngle : 90 - d > i.touchAngle)), a.isScrolling && t.emit("touchMoveOpposite", n), void 0 === a.startMoving && (s.currentX === s.startX && s.currentY === s.startY || (a.startMoving = !0)), a.isScrolling) a.isTouched = !1;else if (a.startMoving) {
                  t.allowClick = !1, n.preventDefault(), i.touchMoveStopPropagation && !i.nested && n.stopPropagation(), a.isMoved || (i.loop && t.loopFix(), a.startTranslate = t.getTranslate(), t.setTransition(0), t.animating && t.$wrapperEl.trigger("webkitTransitionEnd transitionend"), a.allowMomentumBounce = !1, !i.grabCursor || !0 !== t.allowSlideNext && !0 !== t.allowSlidePrev || t.setGrabCursor(!0), t.emit("sliderFirstMove", n)), t.emit("sliderMove", n), a.isMoved = !0;var u = t.isHorizontal() ? p : c;s.diff = u, u *= i.touchRatio, r && (u = -u), t.swipeDirection = 0 < u ? "prev" : "next", a.currentTranslate = u + a.startTranslate;var h = !0,
                      v = i.resistanceRatio;if (i.touchReleaseOnEdges && (v = 0), 0 < u && a.currentTranslate > t.minTranslate() ? (h = !1, i.resistance && (a.currentTranslate = t.minTranslate() - 1 + Math.pow(-t.minTranslate() + a.startTranslate + u, v))) : u < 0 && a.currentTranslate < t.maxTranslate() && (h = !1, i.resistance && (a.currentTranslate = t.maxTranslate() + 1 - Math.pow(t.maxTranslate() - a.startTranslate - u, v))), h && (n.preventedByNestedSwiper = !0), !t.allowSlideNext && "next" === t.swipeDirection && a.currentTranslate < a.startTranslate && (a.currentTranslate = a.startTranslate), !t.allowSlidePrev && "prev" === t.swipeDirection && a.currentTranslate > a.startTranslate && (a.currentTranslate = a.startTranslate), 0 < i.threshold) {
                    if (!(Math.abs(u) > i.threshold || a.allowThresholdMove)) return void (a.currentTranslate = a.startTranslate);if (!a.allowThresholdMove) return a.allowThresholdMove = !0, s.startX = s.currentX, s.startY = s.currentY, a.currentTranslate = a.startTranslate, void (s.diff = t.isHorizontal() ? s.currentX - s.startX : s.currentY - s.startY);
                  }i.followFinger && ((i.freeMode || i.watchSlidesProgress || i.watchSlidesVisibility) && (t.updateActiveIndex(), t.updateSlidesClasses()), i.freeMode && (0 === a.velocities.length && a.velocities.push({ position: s[t.isHorizontal() ? "startX" : "startY"], time: a.touchStartTime }), a.velocities.push({ position: s[t.isHorizontal() ? "currentX" : "currentY"], time: ee.now() })), t.updateProgress(a.currentTranslate), t.setTranslate(a.currentTranslate));
                }
              }
            }
          } else a.startMoving && a.isScrolling && t.emit("touchMoveOpposite", n);
        }.bind(e), e.onTouchEnd = function (e) {
          var t = this,
              a = t.touchEventsData,
              i = t.params,
              s = t.touches,
              r = t.rtlTranslate,
              n = t.$wrapperEl,
              o = t.slidesGrid,
              l = t.snapGrid,
              d = e;if (d.originalEvent && (d = d.originalEvent), a.allowTouchCallbacks && t.emit("touchEnd", d), a.allowTouchCallbacks = !1, !a.isTouched) return a.isMoved && i.grabCursor && t.setGrabCursor(!1), a.isMoved = !1, void (a.startMoving = !1);i.grabCursor && a.isMoved && a.isTouched && (!0 === t.allowSlideNext || !0 === t.allowSlidePrev) && t.setGrabCursor(!1);var p,
              c = ee.now(),
              u = c - a.touchStartTime;if (t.allowClick && (t.updateClickedSlide(d), t.emit("tap", d), u < 300 && 300 < c - a.lastClickTime && (a.clickTimeout && clearTimeout(a.clickTimeout), a.clickTimeout = ee.nextTick(function () {
            t && !t.destroyed && t.emit("click", d);
          }, 300)), u < 300 && c - a.lastClickTime < 300 && (a.clickTimeout && clearTimeout(a.clickTimeout), t.emit("doubleTap", d))), a.lastClickTime = ee.now(), ee.nextTick(function () {
            t.destroyed || (t.allowClick = !0);
          }), !a.isTouched || !a.isMoved || !t.swipeDirection || 0 === s.diff || a.currentTranslate === a.startTranslate) return a.isTouched = !1, a.isMoved = !1, void (a.startMoving = !1);if (a.isTouched = !1, a.isMoved = !1, a.startMoving = !1, p = i.followFinger ? r ? t.translate : -t.translate : -a.currentTranslate, i.freeMode) {
            if (p < -t.minTranslate()) return void t.slideTo(t.activeIndex);if (p > -t.maxTranslate()) return void (t.slides.length < l.length ? t.slideTo(l.length - 1) : t.slideTo(t.slides.length - 1));if (i.freeModeMomentum) {
              if (1 < a.velocities.length) {
                var h = a.velocities.pop(),
                    v = a.velocities.pop(),
                    f = h.position - v.position,
                    m = h.time - v.time;t.velocity = f / m, t.velocity /= 2, Math.abs(t.velocity) < i.freeModeMinimumVelocity && (t.velocity = 0), (150 < m || 300 < ee.now() - h.time) && (t.velocity = 0);
              } else t.velocity = 0;t.velocity *= i.freeModeMomentumVelocityRatio, a.velocities.length = 0;var g = 1e3 * i.freeModeMomentumRatio,
                  b = t.velocity * g,
                  w = t.translate + b;r && (w = -w);var y,
                  x,
                  T = !1,
                  E = 20 * Math.abs(t.velocity) * i.freeModeMomentumBounceRatio;if (w < t.maxTranslate()) i.freeModeMomentumBounce ? (w + t.maxTranslate() < -E && (w = t.maxTranslate() - E), y = t.maxTranslate(), T = !0, a.allowMomentumBounce = !0) : w = t.maxTranslate(), i.loop && i.centeredSlides && (x = !0);else if (w > t.minTranslate()) i.freeModeMomentumBounce ? (w - t.minTranslate() > E && (w = t.minTranslate() + E), y = t.minTranslate(), T = !0, a.allowMomentumBounce = !0) : w = t.minTranslate(), i.loop && i.centeredSlides && (x = !0);else if (i.freeModeSticky) {
                for (var S, C = 0; C < l.length; C += 1) {
                  if (l[C] > -w) {
                    S = C;break;
                  }
                }w = -(w = Math.abs(l[S] - w) < Math.abs(l[S - 1] - w) || "next" === t.swipeDirection ? l[S] : l[S - 1]);
              }if (x && t.once("transitionEnd", function () {
                t.loopFix();
              }), 0 !== t.velocity) g = r ? Math.abs((-w - t.translate) / t.velocity) : Math.abs((w - t.translate) / t.velocity);else if (i.freeModeSticky) return void t.slideToClosest();i.freeModeMomentumBounce && T ? (t.updateProgress(y), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating = !0, n.transitionEnd(function () {
                t && !t.destroyed && a.allowMomentumBounce && (t.emit("momentumBounce"), t.setTransition(i.speed), t.setTranslate(y), n.transitionEnd(function () {
                  t && !t.destroyed && t.transitionEnd();
                }));
              })) : t.velocity ? (t.updateProgress(w), t.setTransition(g), t.setTranslate(w), t.transitionStart(!0, t.swipeDirection), t.animating || (t.animating = !0, n.transitionEnd(function () {
                t && !t.destroyed && t.transitionEnd();
              }))) : t.updateProgress(w), t.updateActiveIndex(), t.updateSlidesClasses();
            } else if (i.freeModeSticky) return void t.slideToClosest();(!i.freeModeMomentum || u >= i.longSwipesMs) && (t.updateProgress(), t.updateActiveIndex(), t.updateSlidesClasses());
          } else {
            for (var M = 0, k = t.slidesSizesGrid[0], P = 0; P < o.length; P += i.slidesPerGroup) {
              void 0 !== o[P + i.slidesPerGroup] ? p >= o[P] && p < o[P + i.slidesPerGroup] && (k = o[(M = P) + i.slidesPerGroup] - o[P]) : p >= o[P] && (M = P, k = o[o.length - 1] - o[o.length - 2]);
            }var z = (p - o[M]) / k;if (u > i.longSwipesMs) {
              if (!i.longSwipes) return void t.slideTo(t.activeIndex);"next" === t.swipeDirection && (z >= i.longSwipesRatio ? t.slideTo(M + i.slidesPerGroup) : t.slideTo(M)), "prev" === t.swipeDirection && (z > 1 - i.longSwipesRatio ? t.slideTo(M + i.slidesPerGroup) : t.slideTo(M));
            } else {
              if (!i.shortSwipes) return void t.slideTo(t.activeIndex);"next" === t.swipeDirection && t.slideTo(M + i.slidesPerGroup), "prev" === t.swipeDirection && t.slideTo(M);
            }
          }
        }.bind(e), e.onClick = function (e) {
          this.allowClick || (this.params.preventClicks && e.preventDefault(), this.params.preventClicksPropagation && this.animating && (e.stopPropagation(), e.stopImmediatePropagation()));
        }.bind(e);var r = "container" === t.touchEventsTarget ? i : s,
            n = !!t.nested;if (te.touch || !te.pointerEvents && !te.prefixedPointerEvents) {
          if (te.touch) {
            var o = !("touchstart" !== a.start || !te.passiveListener || !t.passiveListeners) && { passive: !0, capture: !1 };r.addEventListener(a.start, e.onTouchStart, o), r.addEventListener(a.move, e.onTouchMove, te.passiveListener ? { passive: !1, capture: n } : n), r.addEventListener(a.end, e.onTouchEnd, o);
          }(t.simulateTouch && !m.ios && !m.android || t.simulateTouch && !te.touch && m.ios) && (r.addEventListener("mousedown", e.onTouchStart, !1), f.addEventListener("mousemove", e.onTouchMove, n), f.addEventListener("mouseup", e.onTouchEnd, !1));
        } else r.addEventListener(a.start, e.onTouchStart, !1), f.addEventListener(a.move, e.onTouchMove, n), f.addEventListener(a.end, e.onTouchEnd, !1);(t.preventClicks || t.preventClicksPropagation) && r.addEventListener("click", e.onClick, !0), e.on(m.ios || m.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", g, !0);
      }, detachEvents: function detachEvents() {
        var e = this,
            t = e.params,
            a = e.touchEvents,
            i = e.el,
            s = e.wrapperEl,
            r = "container" === t.touchEventsTarget ? i : s,
            n = !!t.nested;if (te.touch || !te.pointerEvents && !te.prefixedPointerEvents) {
          if (te.touch) {
            var o = !("onTouchStart" !== a.start || !te.passiveListener || !t.passiveListeners) && { passive: !0, capture: !1 };r.removeEventListener(a.start, e.onTouchStart, o), r.removeEventListener(a.move, e.onTouchMove, n), r.removeEventListener(a.end, e.onTouchEnd, o);
          }(t.simulateTouch && !m.ios && !m.android || t.simulateTouch && !te.touch && m.ios) && (r.removeEventListener("mousedown", e.onTouchStart, !1), f.removeEventListener("mousemove", e.onTouchMove, n), f.removeEventListener("mouseup", e.onTouchEnd, !1));
        } else r.removeEventListener(a.start, e.onTouchStart, !1), f.removeEventListener(a.move, e.onTouchMove, n), f.removeEventListener(a.end, e.onTouchEnd, !1);(t.preventClicks || t.preventClicksPropagation) && r.removeEventListener("click", e.onClick, !0), e.off(m.ios || m.android ? "resize orientationchange observerUpdate" : "resize observerUpdate", g);
      } };var w,
        y = { setBreakpoint: function setBreakpoint() {
        var e = this,
            t = e.activeIndex,
            a = e.initialized,
            i = e.loopedSlides;void 0 === i && (i = 0);var s = e.params,
            r = s.breakpoints;if (r && (!r || 0 !== Object.keys(r).length)) {
          var n = e.getBreakpoint(r);if (n && e.currentBreakpoint !== n) {
            var o = n in r ? r[n] : void 0;o && ["slidesPerView", "spaceBetween", "slidesPerGroup"].forEach(function (e) {
              var t = o[e];void 0 !== t && (o[e] = "slidesPerView" !== e || "AUTO" !== t && "auto" !== t ? "slidesPerView" === e ? parseFloat(t) : parseInt(t, 10) : "auto");
            });var l = o || e.originalParams,
                d = s.loop && l.slidesPerView !== s.slidesPerView;ee.extend(e.params, l), ee.extend(e, { allowTouchMove: e.params.allowTouchMove, allowSlideNext: e.params.allowSlideNext, allowSlidePrev: e.params.allowSlidePrev }), e.currentBreakpoint = n, d && a && (e.loopDestroy(), e.loopCreate(), e.updateSlides(), e.slideTo(t - i + e.loopedSlides, 0, !1)), e.emit("breakpoint", l);
          }
        }
      }, getBreakpoint: function getBreakpoint(e) {
        if (e) {
          var t = !1,
              a = [];Object.keys(e).forEach(function (e) {
            a.push(e);
          }), a.sort(function (e, t) {
            return parseInt(e, 10) - parseInt(t, 10);
          });for (var i = 0; i < a.length; i += 1) {
            var s = a[i];this.params.breakpointsInverse ? s <= J.innerWidth && (t = s) : s >= J.innerWidth && !t && (t = s);
          }return t || "max";
        }
      } },
        I = { isIE: !!J.navigator.userAgent.match(/Trident/g) || !!J.navigator.userAgent.match(/MSIE/g), isEdge: !!J.navigator.userAgent.match(/Edge/g), isSafari: (w = J.navigator.userAgent.toLowerCase(), 0 <= w.indexOf("safari") && w.indexOf("chrome") < 0 && w.indexOf("android") < 0), isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(J.navigator.userAgent) };var x = { init: !0, direction: "horizontal", touchEventsTarget: "container", initialSlide: 0, speed: 300, preventInteractionOnTransition: !1, edgeSwipeDetection: !1, edgeSwipeThreshold: 20, freeMode: !1, freeModeMomentum: !0, freeModeMomentumRatio: 1, freeModeMomentumBounce: !0, freeModeMomentumBounceRatio: 1, freeModeMomentumVelocityRatio: 1, freeModeSticky: !1, freeModeMinimumVelocity: .02, autoHeight: !1, setWrapperSize: !1, virtualTranslate: !1, effect: "slide", breakpoints: void 0, breakpointsInverse: !1, spaceBetween: 0, slidesPerView: 1, slidesPerColumn: 1, slidesPerColumnFill: "column", slidesPerGroup: 1, centeredSlides: !1, slidesOffsetBefore: 0, slidesOffsetAfter: 0, normalizeSlideIndex: !0, centerInsufficientSlides: !1, watchOverflow: !1, roundLengths: !1, touchRatio: 1, touchAngle: 45, simulateTouch: !0, shortSwipes: !0, longSwipes: !0, longSwipesRatio: .5, longSwipesMs: 300, followFinger: !0, allowTouchMove: !0, threshold: 0, touchMoveStopPropagation: !0, touchStartPreventDefault: !0, touchStartForcePreventDefault: !1, touchReleaseOnEdges: !1, uniqueNavElements: !0, resistance: !0, resistanceRatio: .85, watchSlidesProgress: !1, watchSlidesVisibility: !1, grabCursor: !1, preventClicks: !0, preventClicksPropagation: !0, slideToClickedSlide: !1, preloadImages: !0, updateOnImagesReady: !0, loop: !1, loopAdditionalSlides: 0, loopedSlides: null, loopFillGroupWithBlank: !1, allowSlidePrev: !0, allowSlideNext: !0, swipeHandler: null, noSwiping: !0, noSwipingClass: "swiper-no-swiping", noSwipingSelector: null, passiveListeners: !0, containerModifierClass: "swiper-container-", slideClass: "swiper-slide", slideBlankClass: "swiper-slide-invisible-blank", slideActiveClass: "swiper-slide-active", slideDuplicateActiveClass: "swiper-slide-duplicate-active", slideVisibleClass: "swiper-slide-visible", slideDuplicateClass: "swiper-slide-duplicate", slideNextClass: "swiper-slide-next", slideDuplicateNextClass: "swiper-slide-duplicate-next", slidePrevClass: "swiper-slide-prev", slideDuplicatePrevClass: "swiper-slide-duplicate-prev", wrapperClass: "swiper-wrapper", runCallbacksOnInit: !0 },
        T = { update: o, translate: d, transition: p, slide: c, loop: u, grabCursor: h, manipulation: v, events: b, breakpoints: y, checkOverflow: { checkOverflow: function checkOverflow() {
          var e = this,
              t = e.isLocked;e.isLocked = 1 === e.snapGrid.length, e.allowSlideNext = !e.isLocked, e.allowSlidePrev = !e.isLocked, t !== e.isLocked && e.emit(e.isLocked ? "lock" : "unlock"), t && t !== e.isLocked && (e.isEnd = !1, e.navigation.update());
        } }, classes: { addClasses: function addClasses() {
          var t = this.classNames,
              a = this.params,
              e = this.rtl,
              i = this.$el,
              s = [];s.push(a.direction), a.freeMode && s.push("free-mode"), te.flexbox || s.push("no-flexbox"), a.autoHeight && s.push("autoheight"), e && s.push("rtl"), 1 < a.slidesPerColumn && s.push("multirow"), m.android && s.push("android"), m.ios && s.push("ios"), (I.isIE || I.isEdge) && (te.pointerEvents || te.prefixedPointerEvents) && s.push("wp8-" + a.direction), s.forEach(function (e) {
            t.push(a.containerModifierClass + e);
          }), i.addClass(t.join(" "));
        }, removeClasses: function removeClasses() {
          var e = this.$el,
              t = this.classNames;e.removeClass(t.join(" "));
        } }, images: { loadImage: function loadImage(e, t, a, i, s, r) {
          var n;function o() {
            r && r();
          }e.complete && s ? o() : t ? ((n = new J.Image()).onload = o, n.onerror = o, i && (n.sizes = i), a && (n.srcset = a), t && (n.src = t)) : o();
        }, preloadImages: function preloadImages() {
          var e = this;function t() {
            null != e && e && !e.destroyed && (void 0 !== e.imagesLoaded && (e.imagesLoaded += 1), e.imagesLoaded === e.imagesToLoad.length && (e.params.updateOnImagesReady && e.update(), e.emit("imagesReady")));
          }e.imagesToLoad = e.$el.find("img");for (var a = 0; a < e.imagesToLoad.length; a += 1) {
            var i = e.imagesToLoad[a];e.loadImage(i, i.currentSrc || i.getAttribute("src"), i.srcset || i.getAttribute("srcset"), i.sizes || i.getAttribute("sizes"), !0, t);
          }
        } } },
        E = {},
        S = function (u) {
      function h() {
        for (var e, t, s, a = [], i = arguments.length; i--;) {
          a[i] = arguments[i];
        }1 === a.length && a[0].constructor && a[0].constructor === Object ? s = a[0] : (t = (e = a)[0], s = e[1]), s || (s = {}), s = ee.extend({}, s), t && !s.el && (s.el = t), u.call(this, s), Object.keys(T).forEach(function (t) {
          Object.keys(T[t]).forEach(function (e) {
            h.prototype[e] || (h.prototype[e] = T[t][e]);
          });
        });var r = this;void 0 === r.modules && (r.modules = {}), Object.keys(r.modules).forEach(function (e) {
          var t = r.modules[e];if (t.params) {
            var a = Object.keys(t.params)[0],
                i = t.params[a];if ("object" != (typeof i === "undefined" ? "undefined" : _typeof(i)) || null === i) return;if (!(a in s && "enabled" in i)) return;!0 === s[a] && (s[a] = { enabled: !0 }), "object" != _typeof(s[a]) || "enabled" in s[a] || (s[a].enabled = !0), s[a] || (s[a] = { enabled: !1 });
          }
        });var n = ee.extend({}, x);r.useModulesParams(n), r.params = ee.extend({}, n, E, s), r.originalParams = ee.extend({}, r.params), r.passedParams = ee.extend({}, s);var o = (r.$ = L)(r.params.el);if (t = o[0]) {
          if (1 < o.length) {
            var l = [];return o.each(function (e, t) {
              var a = ee.extend({}, s, { el: t });l.push(new h(a));
            }), l;
          }t.swiper = r, o.data("swiper", r);var d,
              p,
              c = o.children("." + r.params.wrapperClass);return ee.extend(r, { $el: o, el: t, $wrapperEl: c, wrapperEl: c[0], classNames: [], slides: L(), slidesGrid: [], snapGrid: [], slidesSizesGrid: [], isHorizontal: function isHorizontal() {
              return "horizontal" === r.params.direction;
            }, isVertical: function isVertical() {
              return "vertical" === r.params.direction;
            }, rtl: "rtl" === t.dir.toLowerCase() || "rtl" === o.css("direction"), rtlTranslate: "horizontal" === r.params.direction && ("rtl" === t.dir.toLowerCase() || "rtl" === o.css("direction")), wrongRTL: "-webkit-box" === c.css("display"), activeIndex: 0, realIndex: 0, isBeginning: !0, isEnd: !1, translate: 0, previousTranslate: 0, progress: 0, velocity: 0, animating: !1, allowSlideNext: r.params.allowSlideNext, allowSlidePrev: r.params.allowSlidePrev, touchEvents: (d = ["touchstart", "touchmove", "touchend"], p = ["mousedown", "mousemove", "mouseup"], te.pointerEvents ? p = ["pointerdown", "pointermove", "pointerup"] : te.prefixedPointerEvents && (p = ["MSPointerDown", "MSPointerMove", "MSPointerUp"]), r.touchEventsTouch = { start: d[0], move: d[1], end: d[2] }, r.touchEventsDesktop = { start: p[0], move: p[1], end: p[2] }, te.touch || !r.params.simulateTouch ? r.touchEventsTouch : r.touchEventsDesktop), touchEventsData: { isTouched: void 0, isMoved: void 0, allowTouchCallbacks: void 0, touchStartTime: void 0, isScrolling: void 0, currentTranslate: void 0, startTranslate: void 0, allowThresholdMove: void 0, formElements: "input, select, option, textarea, button, video", lastClickTime: ee.now(), clickTimeout: void 0, velocities: [], allowMomentumBounce: void 0, isTouchEvent: void 0, startMoving: void 0 }, allowClick: !0, allowTouchMove: r.params.allowTouchMove, touches: { startX: 0, startY: 0, currentX: 0, currentY: 0, diff: 0 }, imagesToLoad: [], imagesLoaded: 0 }), r.useModules(), r.params.init && r.init(), r;
        }
      }u && (h.__proto__ = u);var e = { extendedDefaults: { configurable: !0 }, defaults: { configurable: !0 }, Class: { configurable: !0 }, $: { configurable: !0 } };return ((h.prototype = Object.create(u && u.prototype)).constructor = h).prototype.slidesPerViewDynamic = function () {
        var e = this,
            t = e.params,
            a = e.slides,
            i = e.slidesGrid,
            s = e.size,
            r = e.activeIndex,
            n = 1;if (t.centeredSlides) {
          for (var o, l = a[r].swiperSlideSize, d = r + 1; d < a.length; d += 1) {
            a[d] && !o && (n += 1, s < (l += a[d].swiperSlideSize) && (o = !0));
          }for (var p = r - 1; 0 <= p; p -= 1) {
            a[p] && !o && (n += 1, s < (l += a[p].swiperSlideSize) && (o = !0));
          }
        } else for (var c = r + 1; c < a.length; c += 1) {
          i[c] - i[r] < s && (n += 1);
        }return n;
      }, h.prototype.update = function () {
        var a = this;if (a && !a.destroyed) {
          var e = a.snapGrid,
              t = a.params;t.breakpoints && a.setBreakpoint(), a.updateSize(), a.updateSlides(), a.updateProgress(), a.updateSlidesClasses(), a.params.freeMode ? (i(), a.params.autoHeight && a.updateAutoHeight()) : (("auto" === a.params.slidesPerView || 1 < a.params.slidesPerView) && a.isEnd && !a.params.centeredSlides ? a.slideTo(a.slides.length - 1, 0, !1, !0) : a.slideTo(a.activeIndex, 0, !1, !0)) || i(), t.watchOverflow && e !== a.snapGrid && a.checkOverflow(), a.emit("update");
        }function i() {
          var e = a.rtlTranslate ? -1 * a.translate : a.translate,
              t = Math.min(Math.max(e, a.maxTranslate()), a.minTranslate());a.setTranslate(t), a.updateActiveIndex(), a.updateSlidesClasses();
        }
      }, h.prototype.init = function () {
        var e = this;e.initialized || (e.emit("beforeInit"), e.params.breakpoints && e.setBreakpoint(), e.addClasses(), e.params.loop && e.loopCreate(), e.updateSize(), e.updateSlides(), e.params.watchOverflow && e.checkOverflow(), e.params.grabCursor && e.setGrabCursor(), e.params.preloadImages && e.preloadImages(), e.params.loop ? e.slideTo(e.params.initialSlide + e.loopedSlides, 0, e.params.runCallbacksOnInit) : e.slideTo(e.params.initialSlide, 0, e.params.runCallbacksOnInit), e.attachEvents(), e.initialized = !0, e.emit("init"));
      }, h.prototype.destroy = function (e, t) {
        void 0 === e && (e = !0), void 0 === t && (t = !0);var a = this,
            i = a.params,
            s = a.$el,
            r = a.$wrapperEl,
            n = a.slides;return void 0 === a.params || a.destroyed || (a.emit("beforeDestroy"), a.initialized = !1, a.detachEvents(), i.loop && a.loopDestroy(), t && (a.removeClasses(), s.removeAttr("style"), r.removeAttr("style"), n && n.length && n.removeClass([i.slideVisibleClass, i.slideActiveClass, i.slideNextClass, i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")), a.emit("destroy"), Object.keys(a.eventsListeners).forEach(function (e) {
          a.off(e);
        }), !1 !== e && (a.$el[0].swiper = null, a.$el.data("swiper", null), ee.deleteProps(a)), a.destroyed = !0), null;
      }, h.extendDefaults = function (e) {
        ee.extend(E, e);
      }, e.extendedDefaults.get = function () {
        return E;
      }, e.defaults.get = function () {
        return x;
      }, e.Class.get = function () {
        return u;
      }, e.$.get = function () {
        return L;
      }, Object.defineProperties(h, e), h;
    }(s),
        C = { name: "device", proto: { device: m }, static: { device: m } },
        M = { name: "support", proto: { support: te }, static: { support: te } },
        k = { name: "browser", proto: { browser: I }, static: { browser: I } },
        P = { name: "resize", create: function create() {
        var e = this;ee.extend(e, { resize: { resizeHandler: function resizeHandler() {
              e && !e.destroyed && e.initialized && (e.emit("beforeResize"), e.emit("resize"));
            }, orientationChangeHandler: function orientationChangeHandler() {
              e && !e.destroyed && e.initialized && e.emit("orientationchange");
            } } });
      }, on: { init: function init() {
          J.addEventListener("resize", this.resize.resizeHandler), J.addEventListener("orientationchange", this.resize.orientationChangeHandler);
        }, destroy: function destroy() {
          J.removeEventListener("resize", this.resize.resizeHandler), J.removeEventListener("orientationchange", this.resize.orientationChangeHandler);
        } } },
        z = { func: J.MutationObserver || J.WebkitMutationObserver, attach: function attach(e, t) {
        void 0 === t && (t = {});var a = this,
            i = new z.func(function (e) {
          if (1 !== e.length) {
            var t = function t() {
              a.emit("observerUpdate", e[0]);
            };J.requestAnimationFrame ? J.requestAnimationFrame(t) : J.setTimeout(t, 0);
          } else a.emit("observerUpdate", e[0]);
        });i.observe(e, { attributes: void 0 === t.attributes || t.attributes, childList: void 0 === t.childList || t.childList, characterData: void 0 === t.characterData || t.characterData }), a.observer.observers.push(i);
      }, init: function init() {
        var e = this;if (te.observer && e.params.observer) {
          if (e.params.observeParents) for (var t = e.$el.parents(), a = 0; a < t.length; a += 1) {
            e.observer.attach(t[a]);
          }e.observer.attach(e.$el[0], { childList: e.params.observeSlideChildren }), e.observer.attach(e.$wrapperEl[0], { attributes: !1 });
        }
      }, destroy: function destroy() {
        this.observer.observers.forEach(function (e) {
          e.disconnect();
        }), this.observer.observers = [];
      } },
        $ = { name: "observer", params: { observer: !1, observeParents: !1, observeSlideChildren: !1 }, create: function create() {
        ee.extend(this, { observer: { init: z.init.bind(this), attach: z.attach.bind(this), destroy: z.destroy.bind(this), observers: [] } });
      }, on: { init: function init() {
          this.observer.init();
        }, destroy: function destroy() {
          this.observer.destroy();
        } } },
        D = { update: function update(e) {
        var t = this,
            a = t.params,
            i = a.slidesPerView,
            s = a.slidesPerGroup,
            r = a.centeredSlides,
            n = t.params.virtual,
            o = n.addSlidesBefore,
            l = n.addSlidesAfter,
            d = t.virtual,
            p = d.from,
            c = d.to,
            u = d.slides,
            h = d.slidesGrid,
            v = d.renderSlide,
            f = d.offset;t.updateActiveIndex();var m,
            g,
            b,
            w = t.activeIndex || 0;m = t.rtlTranslate ? "right" : t.isHorizontal() ? "left" : "top", r ? (g = Math.floor(i / 2) + s + o, b = Math.floor(i / 2) + s + l) : (g = i + (s - 1) + o, b = s + l);var y = Math.max((w || 0) - b, 0),
            x = Math.min((w || 0) + g, u.length - 1),
            T = (t.slidesGrid[y] || 0) - (t.slidesGrid[0] || 0);function E() {
          t.updateSlides(), t.updateProgress(), t.updateSlidesClasses(), t.lazy && t.params.lazy.enabled && t.lazy.load();
        }if (ee.extend(t.virtual, { from: y, to: x, offset: T, slidesGrid: t.slidesGrid }), p === y && c === x && !e) return t.slidesGrid !== h && T !== f && t.slides.css(m, T + "px"), void t.updateProgress();if (t.params.virtual.renderExternal) return t.params.virtual.renderExternal.call(t, { offset: T, from: y, to: x, slides: function () {
            for (var e = [], t = y; t <= x; t += 1) {
              e.push(u[t]);
            }return e;
          }() }), void E();var S = [],
            C = [];if (e) t.$wrapperEl.find("." + t.params.slideClass).remove();else for (var M = p; M <= c; M += 1) {
          (M < y || x < M) && t.$wrapperEl.find("." + t.params.slideClass + '[data-swiper-slide-index="' + M + '"]').remove();
        }for (var k = 0; k < u.length; k += 1) {
          y <= k && k <= x && (void 0 === c || e ? C.push(k) : (c < k && C.push(k), k < p && S.push(k)));
        }C.forEach(function (e) {
          t.$wrapperEl.append(v(u[e], e));
        }), S.sort(function (e, t) {
          return t - e;
        }).forEach(function (e) {
          t.$wrapperEl.prepend(v(u[e], e));
        }), t.$wrapperEl.children(".swiper-slide").css(m, T + "px"), E();
      }, renderSlide: function renderSlide(e, t) {
        var a = this,
            i = a.params.virtual;if (i.cache && a.virtual.cache[t]) return a.virtual.cache[t];var s = i.renderSlide ? L(i.renderSlide.call(a, e, t)) : L('<div class="' + a.params.slideClass + '" data-swiper-slide-index="' + t + '">' + e + "</div>");return s.attr("data-swiper-slide-index") || s.attr("data-swiper-slide-index", t), i.cache && (a.virtual.cache[t] = s), s;
      }, appendSlide: function appendSlide(e) {
        this.virtual.slides.push(e), this.virtual.update(!0);
      }, prependSlide: function prependSlide(e) {
        var t = this;if (t.virtual.slides.unshift(e), t.params.virtual.cache) {
          var a = t.virtual.cache,
              i = {};Object.keys(a).forEach(function (e) {
            i[e + 1] = a[e];
          }), t.virtual.cache = i;
        }t.virtual.update(!0), t.slideNext(0);
      } },
        O = { name: "virtual", params: { virtual: { enabled: !1, slides: [], cache: !0, renderSlide: null, renderExternal: null, addSlidesBefore: 0, addSlidesAfter: 0 } }, create: function create() {
        var e = this;ee.extend(e, { virtual: { update: D.update.bind(e), appendSlide: D.appendSlide.bind(e), prependSlide: D.prependSlide.bind(e), renderSlide: D.renderSlide.bind(e), slides: e.params.virtual.slides, cache: {} } });
      }, on: { beforeInit: function beforeInit() {
          var e = this;if (e.params.virtual.enabled) {
            e.classNames.push(e.params.containerModifierClass + "virtual");var t = { watchSlidesProgress: !0 };ee.extend(e.params, t), ee.extend(e.originalParams, t), e.params.initialSlide || e.virtual.update();
          }
        }, setTranslate: function setTranslate() {
          this.params.virtual.enabled && this.virtual.update();
        } } },
        A = { handle: function handle(e) {
        var t = this,
            a = t.rtlTranslate,
            i = e;i.originalEvent && (i = i.originalEvent);var s = i.keyCode || i.charCode;if (!t.allowSlideNext && (t.isHorizontal() && 39 === s || t.isVertical() && 40 === s)) return !1;if (!t.allowSlidePrev && (t.isHorizontal() && 37 === s || t.isVertical() && 38 === s)) return !1;if (!(i.shiftKey || i.altKey || i.ctrlKey || i.metaKey || f.activeElement && f.activeElement.nodeName && ("input" === f.activeElement.nodeName.toLowerCase() || "textarea" === f.activeElement.nodeName.toLowerCase()))) {
          if (t.params.keyboard.onlyInViewport && (37 === s || 39 === s || 38 === s || 40 === s)) {
            var r = !1;if (0 < t.$el.parents("." + t.params.slideClass).length && 0 === t.$el.parents("." + t.params.slideActiveClass).length) return;var n = J.innerWidth,
                o = J.innerHeight,
                l = t.$el.offset();a && (l.left -= t.$el[0].scrollLeft);for (var d = [[l.left, l.top], [l.left + t.width, l.top], [l.left, l.top + t.height], [l.left + t.width, l.top + t.height]], p = 0; p < d.length; p += 1) {
              var c = d[p];0 <= c[0] && c[0] <= n && 0 <= c[1] && c[1] <= o && (r = !0);
            }if (!r) return;
          }t.isHorizontal() ? (37 !== s && 39 !== s || (i.preventDefault ? i.preventDefault() : i.returnValue = !1), (39 === s && !a || 37 === s && a) && t.slideNext(), (37 === s && !a || 39 === s && a) && t.slidePrev()) : (38 !== s && 40 !== s || (i.preventDefault ? i.preventDefault() : i.returnValue = !1), 40 === s && t.slideNext(), 38 === s && t.slidePrev()), t.emit("keyPress", s);
        }
      }, enable: function enable() {
        this.keyboard.enabled || (L(f).on("keydown", this.keyboard.handle), this.keyboard.enabled = !0);
      }, disable: function disable() {
        this.keyboard.enabled && (L(f).off("keydown", this.keyboard.handle), this.keyboard.enabled = !1);
      } },
        N = { name: "keyboard", params: { keyboard: { enabled: !1, onlyInViewport: !0 } }, create: function create() {
        ee.extend(this, { keyboard: { enabled: !1, enable: A.enable.bind(this), disable: A.disable.bind(this), handle: A.handle.bind(this) } });
      }, on: { init: function init() {
          this.params.keyboard.enabled && this.keyboard.enable();
        }, destroy: function destroy() {
          this.keyboard.enabled && this.keyboard.disable();
        } } };var H = { lastScrollTime: ee.now(), event: -1 < J.navigator.userAgent.indexOf("firefox") ? "DOMMouseScroll" : function () {
        var e = "onwheel",
            t = e in f;if (!t) {
          var a = f.createElement("div");a.setAttribute(e, "return;"), t = "function" == typeof a[e];
        }return !t && f.implementation && f.implementation.hasFeature && !0 !== f.implementation.hasFeature("", "") && (t = f.implementation.hasFeature("Events.wheel", "3.0")), t;
      }() ? "wheel" : "mousewheel", normalize: function normalize(e) {
        var t = 0,
            a = 0,
            i = 0,
            s = 0;return "detail" in e && (a = e.detail), "wheelDelta" in e && (a = -e.wheelDelta / 120), "wheelDeltaY" in e && (a = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (t = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (t = a, a = 0), i = 10 * t, s = 10 * a, "deltaY" in e && (s = e.deltaY), "deltaX" in e && (i = e.deltaX), (i || s) && e.deltaMode && (1 === e.deltaMode ? (i *= 40, s *= 40) : (i *= 800, s *= 800)), i && !t && (t = i < 1 ? -1 : 1), s && !a && (a = s < 1 ? -1 : 1), { spinX: t, spinY: a, pixelX: i, pixelY: s };
      }, handleMouseEnter: function handleMouseEnter() {
        this.mouseEntered = !0;
      }, handleMouseLeave: function handleMouseLeave() {
        this.mouseEntered = !1;
      }, handle: function handle(e) {
        var t = e,
            a = this,
            i = a.params.mousewheel;if (!a.mouseEntered && !i.releaseOnEdges) return !0;t.originalEvent && (t = t.originalEvent);var s = 0,
            r = a.rtlTranslate ? -1 : 1,
            n = H.normalize(t);if (i.forceToAxis) {
          if (a.isHorizontal()) {
            if (!(Math.abs(n.pixelX) > Math.abs(n.pixelY))) return !0;s = n.pixelX * r;
          } else {
            if (!(Math.abs(n.pixelY) > Math.abs(n.pixelX))) return !0;s = n.pixelY;
          }
        } else s = Math.abs(n.pixelX) > Math.abs(n.pixelY) ? -n.pixelX * r : -n.pixelY;if (0 === s) return !0;if (i.invert && (s = -s), a.params.freeMode) {
          a.params.loop && a.loopFix();var o = a.getTranslate() + s * i.sensitivity,
              l = a.isBeginning,
              d = a.isEnd;if (o >= a.minTranslate() && (o = a.minTranslate()), o <= a.maxTranslate() && (o = a.maxTranslate()), a.setTransition(0), a.setTranslate(o), a.updateProgress(), a.updateActiveIndex(), a.updateSlidesClasses(), (!l && a.isBeginning || !d && a.isEnd) && a.updateSlidesClasses(), a.params.freeModeSticky && (clearTimeout(a.mousewheel.timeout), a.mousewheel.timeout = ee.nextTick(function () {
            a.slideToClosest();
          }, 300)), a.emit("scroll", t), a.params.autoplay && a.params.autoplayDisableOnInteraction && a.autoplay.stop(), o === a.minTranslate() || o === a.maxTranslate()) return !0;
        } else {
          if (60 < ee.now() - a.mousewheel.lastScrollTime) if (s < 0) {
            if (a.isEnd && !a.params.loop || a.animating) {
              if (i.releaseOnEdges) return !0;
            } else a.slideNext(), a.emit("scroll", t);
          } else if (a.isBeginning && !a.params.loop || a.animating) {
            if (i.releaseOnEdges) return !0;
          } else a.slidePrev(), a.emit("scroll", t);a.mousewheel.lastScrollTime = new J.Date().getTime();
        }return t.preventDefault ? t.preventDefault() : t.returnValue = !1, !1;
      }, enable: function enable() {
        var e = this;if (!H.event) return !1;if (e.mousewheel.enabled) return !1;var t = e.$el;return "container" !== e.params.mousewheel.eventsTarged && (t = L(e.params.mousewheel.eventsTarged)), t.on("mouseenter", e.mousewheel.handleMouseEnter), t.on("mouseleave", e.mousewheel.handleMouseLeave), t.on(H.event, e.mousewheel.handle), e.mousewheel.enabled = !0;
      }, disable: function disable() {
        var e = this;if (!H.event) return !1;if (!e.mousewheel.enabled) return !1;var t = e.$el;return "container" !== e.params.mousewheel.eventsTarged && (t = L(e.params.mousewheel.eventsTarged)), t.off(H.event, e.mousewheel.handle), !(e.mousewheel.enabled = !1);
      } },
        G = { update: function update() {
        var e = this,
            t = e.params.navigation;if (!e.params.loop) {
          var a = e.navigation,
              i = a.$nextEl,
              s = a.$prevEl;s && 0 < s.length && (e.isBeginning ? s.addClass(t.disabledClass) : s.removeClass(t.disabledClass), s[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass)), i && 0 < i.length && (e.isEnd ? i.addClass(t.disabledClass) : i.removeClass(t.disabledClass), i[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](t.lockClass));
        }
      }, onPrevClick: function onPrevClick(e) {
        e.preventDefault(), this.isBeginning && !this.params.loop || this.slidePrev();
      }, onNextClick: function onNextClick(e) {
        e.preventDefault(), this.isEnd && !this.params.loop || this.slideNext();
      }, init: function init() {
        var e,
            t,
            a = this,
            i = a.params.navigation;(i.nextEl || i.prevEl) && (i.nextEl && (e = L(i.nextEl), a.params.uniqueNavElements && "string" == typeof i.nextEl && 1 < e.length && 1 === a.$el.find(i.nextEl).length && (e = a.$el.find(i.nextEl))), i.prevEl && (t = L(i.prevEl), a.params.uniqueNavElements && "string" == typeof i.prevEl && 1 < t.length && 1 === a.$el.find(i.prevEl).length && (t = a.$el.find(i.prevEl))), e && 0 < e.length && e.on("click", a.navigation.onNextClick), t && 0 < t.length && t.on("click", a.navigation.onPrevClick), ee.extend(a.navigation, { $nextEl: e, nextEl: e && e[0], $prevEl: t, prevEl: t && t[0] }));
      }, destroy: function destroy() {
        var e = this,
            t = e.navigation,
            a = t.$nextEl,
            i = t.$prevEl;a && a.length && (a.off("click", e.navigation.onNextClick), a.removeClass(e.params.navigation.disabledClass)), i && i.length && (i.off("click", e.navigation.onPrevClick), i.removeClass(e.params.navigation.disabledClass));
      } },
        B = { update: function update() {
        var e = this,
            t = e.rtl,
            s = e.params.pagination;if (s.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
          var r,
              a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,
              i = e.pagination.$el,
              n = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length;if (e.params.loop ? ((r = Math.ceil((e.activeIndex - e.loopedSlides) / e.params.slidesPerGroup)) > a - 1 - 2 * e.loopedSlides && (r -= a - 2 * e.loopedSlides), n - 1 < r && (r -= n), r < 0 && "bullets" !== e.params.paginationType && (r = n + r)) : r = void 0 !== e.snapIndex ? e.snapIndex : e.activeIndex || 0, "bullets" === s.type && e.pagination.bullets && 0 < e.pagination.bullets.length) {
            var o,
                l,
                d,
                p = e.pagination.bullets;if (s.dynamicBullets && (e.pagination.bulletSize = p.eq(0)[e.isHorizontal() ? "outerWidth" : "outerHeight"](!0), i.css(e.isHorizontal() ? "width" : "height", e.pagination.bulletSize * (s.dynamicMainBullets + 4) + "px"), 1 < s.dynamicMainBullets && void 0 !== e.previousIndex && (e.pagination.dynamicBulletIndex += r - e.previousIndex, e.pagination.dynamicBulletIndex > s.dynamicMainBullets - 1 ? e.pagination.dynamicBulletIndex = s.dynamicMainBullets - 1 : e.pagination.dynamicBulletIndex < 0 && (e.pagination.dynamicBulletIndex = 0)), o = r - e.pagination.dynamicBulletIndex, d = ((l = o + (Math.min(p.length, s.dynamicMainBullets) - 1)) + o) / 2), p.removeClass(s.bulletActiveClass + " " + s.bulletActiveClass + "-next " + s.bulletActiveClass + "-next-next " + s.bulletActiveClass + "-prev " + s.bulletActiveClass + "-prev-prev " + s.bulletActiveClass + "-main"), 1 < i.length) p.each(function (e, t) {
              var a = L(t),
                  i = a.index();i === r && a.addClass(s.bulletActiveClass), s.dynamicBullets && (o <= i && i <= l && a.addClass(s.bulletActiveClass + "-main"), i === o && a.prev().addClass(s.bulletActiveClass + "-prev").prev().addClass(s.bulletActiveClass + "-prev-prev"), i === l && a.next().addClass(s.bulletActiveClass + "-next").next().addClass(s.bulletActiveClass + "-next-next"));
            });else if (p.eq(r).addClass(s.bulletActiveClass), s.dynamicBullets) {
              for (var c = p.eq(o), u = p.eq(l), h = o; h <= l; h += 1) {
                p.eq(h).addClass(s.bulletActiveClass + "-main");
              }c.prev().addClass(s.bulletActiveClass + "-prev").prev().addClass(s.bulletActiveClass + "-prev-prev"), u.next().addClass(s.bulletActiveClass + "-next").next().addClass(s.bulletActiveClass + "-next-next");
            }if (s.dynamicBullets) {
              var v = Math.min(p.length, s.dynamicMainBullets + 4),
                  f = (e.pagination.bulletSize * v - e.pagination.bulletSize) / 2 - d * e.pagination.bulletSize,
                  m = t ? "right" : "left";p.css(e.isHorizontal() ? m : "top", f + "px");
            }
          }if ("fraction" === s.type && (i.find("." + s.currentClass).text(s.formatFractionCurrent(r + 1)), i.find("." + s.totalClass).text(s.formatFractionTotal(n))), "progressbar" === s.type) {
            var g;g = s.progressbarOpposite ? e.isHorizontal() ? "vertical" : "horizontal" : e.isHorizontal() ? "horizontal" : "vertical";var b = (r + 1) / n,
                w = 1,
                y = 1;"horizontal" === g ? w = b : y = b, i.find("." + s.progressbarFillClass).transform("translate3d(0,0,0) scaleX(" + w + ") scaleY(" + y + ")").transition(e.params.speed);
          }"custom" === s.type && s.renderCustom ? (i.html(s.renderCustom(e, r + 1, n)), e.emit("paginationRender", e, i[0])) : e.emit("paginationUpdate", e, i[0]), i[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](s.lockClass);
        }
      }, render: function render() {
        var e = this,
            t = e.params.pagination;if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
          var a = e.virtual && e.params.virtual.enabled ? e.virtual.slides.length : e.slides.length,
              i = e.pagination.$el,
              s = "";if ("bullets" === t.type) {
            for (var r = e.params.loop ? Math.ceil((a - 2 * e.loopedSlides) / e.params.slidesPerGroup) : e.snapGrid.length, n = 0; n < r; n += 1) {
              t.renderBullet ? s += t.renderBullet.call(e, n, t.bulletClass) : s += "<" + t.bulletElement + ' class="' + t.bulletClass + '"></' + t.bulletElement + ">";
            }i.html(s), e.pagination.bullets = i.find("." + t.bulletClass);
          }"fraction" === t.type && (s = t.renderFraction ? t.renderFraction.call(e, t.currentClass, t.totalClass) : '<span class="' + t.currentClass + '"></span> / <span class="' + t.totalClass + '"></span>', i.html(s)), "progressbar" === t.type && (s = t.renderProgressbar ? t.renderProgressbar.call(e, t.progressbarFillClass) : '<span class="' + t.progressbarFillClass + '"></span>', i.html(s)), "custom" !== t.type && e.emit("paginationRender", e.pagination.$el[0]);
        }
      }, init: function init() {
        var a = this,
            e = a.params.pagination;if (e.el) {
          var t = L(e.el);0 !== t.length && (a.params.uniqueNavElements && "string" == typeof e.el && 1 < t.length && 1 === a.$el.find(e.el).length && (t = a.$el.find(e.el)), "bullets" === e.type && e.clickable && t.addClass(e.clickableClass), t.addClass(e.modifierClass + e.type), "bullets" === e.type && e.dynamicBullets && (t.addClass("" + e.modifierClass + e.type + "-dynamic"), a.pagination.dynamicBulletIndex = 0, e.dynamicMainBullets < 1 && (e.dynamicMainBullets = 1)), "progressbar" === e.type && e.progressbarOpposite && t.addClass(e.progressbarOppositeClass), e.clickable && t.on("click", "." + e.bulletClass, function (e) {
            e.preventDefault();var t = L(this).index() * a.params.slidesPerGroup;a.params.loop && (t += a.loopedSlides), a.slideTo(t);
          }), ee.extend(a.pagination, { $el: t, el: t[0] }));
        }
      }, destroy: function destroy() {
        var e = this,
            t = e.params.pagination;if (t.el && e.pagination.el && e.pagination.$el && 0 !== e.pagination.$el.length) {
          var a = e.pagination.$el;a.removeClass(t.hiddenClass), a.removeClass(t.modifierClass + t.type), e.pagination.bullets && e.pagination.bullets.removeClass(t.bulletActiveClass), t.clickable && a.off("click", "." + t.bulletClass);
        }
      } },
        X = { setTranslate: function setTranslate() {
        var e = this;if (e.params.scrollbar.el && e.scrollbar.el) {
          var t = e.scrollbar,
              a = e.rtlTranslate,
              i = e.progress,
              s = t.dragSize,
              r = t.trackSize,
              n = t.$dragEl,
              o = t.$el,
              l = e.params.scrollbar,
              d = s,
              p = (r - s) * i;a ? 0 < (p = -p) ? (d = s - p, p = 0) : r < -p + s && (d = r + p) : p < 0 ? (d = s + p, p = 0) : r < p + s && (d = r - p), e.isHorizontal() ? (te.transforms3d ? n.transform("translate3d(" + p + "px, 0, 0)") : n.transform("translateX(" + p + "px)"), n[0].style.width = d + "px") : (te.transforms3d ? n.transform("translate3d(0px, " + p + "px, 0)") : n.transform("translateY(" + p + "px)"), n[0].style.height = d + "px"), l.hide && (clearTimeout(e.scrollbar.timeout), o[0].style.opacity = 1, e.scrollbar.timeout = setTimeout(function () {
            o[0].style.opacity = 0, o.transition(400);
          }, 1e3));
        }
      }, setTransition: function setTransition(e) {
        this.params.scrollbar.el && this.scrollbar.el && this.scrollbar.$dragEl.transition(e);
      }, updateSize: function updateSize() {
        var e = this;if (e.params.scrollbar.el && e.scrollbar.el) {
          var t = e.scrollbar,
              a = t.$dragEl,
              i = t.$el;a[0].style.width = "", a[0].style.height = "";var s,
              r = e.isHorizontal() ? i[0].offsetWidth : i[0].offsetHeight,
              n = e.size / e.virtualSize,
              o = n * (r / e.size);s = "auto" === e.params.scrollbar.dragSize ? r * n : parseInt(e.params.scrollbar.dragSize, 10), e.isHorizontal() ? a[0].style.width = s + "px" : a[0].style.height = s + "px", i[0].style.display = 1 <= n ? "none" : "", e.params.scrollbarHide && (i[0].style.opacity = 0), ee.extend(t, { trackSize: r, divider: n, moveDivider: o, dragSize: s }), t.$el[e.params.watchOverflow && e.isLocked ? "addClass" : "removeClass"](e.params.scrollbar.lockClass);
        }
      }, setDragPosition: function setDragPosition(e) {
        var t,
            a = this,
            i = a.scrollbar,
            s = a.rtlTranslate,
            r = i.$el,
            n = i.dragSize,
            o = i.trackSize;t = ((a.isHorizontal() ? "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX || e.clientX : "touchstart" === e.type || "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY || e.clientY) - r.offset()[a.isHorizontal() ? "left" : "top"] - n / 2) / (o - n), t = Math.max(Math.min(t, 1), 0), s && (t = 1 - t);var l = a.minTranslate() + (a.maxTranslate() - a.minTranslate()) * t;a.updateProgress(l), a.setTranslate(l), a.updateActiveIndex(), a.updateSlidesClasses();
      }, onDragStart: function onDragStart(e) {
        var t = this,
            a = t.params.scrollbar,
            i = t.scrollbar,
            s = t.$wrapperEl,
            r = i.$el,
            n = i.$dragEl;t.scrollbar.isTouched = !0, e.preventDefault(), e.stopPropagation(), s.transition(100), n.transition(100), i.setDragPosition(e), clearTimeout(t.scrollbar.dragTimeout), r.transition(0), a.hide && r.css("opacity", 1), t.emit("scrollbarDragStart", e);
      }, onDragMove: function onDragMove(e) {
        var t = this.scrollbar,
            a = this.$wrapperEl,
            i = t.$el,
            s = t.$dragEl;this.scrollbar.isTouched && (e.preventDefault ? e.preventDefault() : e.returnValue = !1, t.setDragPosition(e), a.transition(0), i.transition(0), s.transition(0), this.emit("scrollbarDragMove", e));
      }, onDragEnd: function onDragEnd(e) {
        var t = this,
            a = t.params.scrollbar,
            i = t.scrollbar.$el;t.scrollbar.isTouched && (t.scrollbar.isTouched = !1, a.hide && (clearTimeout(t.scrollbar.dragTimeout), t.scrollbar.dragTimeout = ee.nextTick(function () {
          i.css("opacity", 0), i.transition(400);
        }, 1e3)), t.emit("scrollbarDragEnd", e), a.snapOnRelease && t.slideToClosest());
      }, enableDraggable: function enableDraggable() {
        var e = this;if (e.params.scrollbar.el) {
          var t = e.scrollbar,
              a = e.touchEventsTouch,
              i = e.touchEventsDesktop,
              s = e.params,
              r = t.$el[0],
              n = !(!te.passiveListener || !s.passiveListeners) && { passive: !1, capture: !1 },
              o = !(!te.passiveListener || !s.passiveListeners) && { passive: !0, capture: !1 };te.touch ? (r.addEventListener(a.start, e.scrollbar.onDragStart, n), r.addEventListener(a.move, e.scrollbar.onDragMove, n), r.addEventListener(a.end, e.scrollbar.onDragEnd, o)) : (r.addEventListener(i.start, e.scrollbar.onDragStart, n), f.addEventListener(i.move, e.scrollbar.onDragMove, n), f.addEventListener(i.end, e.scrollbar.onDragEnd, o));
        }
      }, disableDraggable: function disableDraggable() {
        var e = this;if (e.params.scrollbar.el) {
          var t = e.scrollbar,
              a = e.touchEventsTouch,
              i = e.touchEventsDesktop,
              s = e.params,
              r = t.$el[0],
              n = !(!te.passiveListener || !s.passiveListeners) && { passive: !1, capture: !1 },
              o = !(!te.passiveListener || !s.passiveListeners) && { passive: !0, capture: !1 };te.touch ? (r.removeEventListener(a.start, e.scrollbar.onDragStart, n), r.removeEventListener(a.move, e.scrollbar.onDragMove, n), r.removeEventListener(a.end, e.scrollbar.onDragEnd, o)) : (r.removeEventListener(i.start, e.scrollbar.onDragStart, n), f.removeEventListener(i.move, e.scrollbar.onDragMove, n), f.removeEventListener(i.end, e.scrollbar.onDragEnd, o));
        }
      }, init: function init() {
        var e = this;if (e.params.scrollbar.el) {
          var t = e.scrollbar,
              a = e.$el,
              i = e.params.scrollbar,
              s = L(i.el);e.params.uniqueNavElements && "string" == typeof i.el && 1 < s.length && 1 === a.find(i.el).length && (s = a.find(i.el));var r = s.find("." + e.params.scrollbar.dragClass);0 === r.length && (r = L('<div class="' + e.params.scrollbar.dragClass + '"></div>'), s.append(r)), ee.extend(t, { $el: s, el: s[0], $dragEl: r, dragEl: r[0] }), i.draggable && t.enableDraggable();
        }
      }, destroy: function destroy() {
        this.scrollbar.disableDraggable();
      } },
        Y = { setTransform: function setTransform(e, t) {
        var a = this.rtl,
            i = L(e),
            s = a ? -1 : 1,
            r = i.attr("data-swiper-parallax") || "0",
            n = i.attr("data-swiper-parallax-x"),
            o = i.attr("data-swiper-parallax-y"),
            l = i.attr("data-swiper-parallax-scale"),
            d = i.attr("data-swiper-parallax-opacity");if (n || o ? (n = n || "0", o = o || "0") : this.isHorizontal() ? (n = r, o = "0") : (o = r, n = "0"), n = 0 <= n.indexOf("%") ? parseInt(n, 10) * t * s + "%" : n * t * s + "px", o = 0 <= o.indexOf("%") ? parseInt(o, 10) * t + "%" : o * t + "px", null != d) {
          var p = d - (d - 1) * (1 - Math.abs(t));i[0].style.opacity = p;
        }if (null == l) i.transform("translate3d(" + n + ", " + o + ", 0px)");else {
          var c = l - (l - 1) * (1 - Math.abs(t));i.transform("translate3d(" + n + ", " + o + ", 0px) scale(" + c + ")");
        }
      }, setTranslate: function setTranslate() {
        var i = this,
            e = i.$el,
            t = i.slides,
            s = i.progress,
            r = i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
          i.parallax.setTransform(t, s);
        }), t.each(function (e, t) {
          var a = t.progress;1 < i.params.slidesPerGroup && "auto" !== i.params.slidesPerView && (a += Math.ceil(e / 2) - s * (r.length - 1)), a = Math.min(Math.max(a, -1), 1), L(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
            i.parallax.setTransform(t, a);
          });
        });
      }, setTransition: function setTransition(s) {
        void 0 === s && (s = this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each(function (e, t) {
          var a = L(t),
              i = parseInt(a.attr("data-swiper-parallax-duration"), 10) || s;0 === s && (i = 0), a.transition(i);
        });
      } },
        V = { getDistanceBetweenTouches: function getDistanceBetweenTouches(e) {
        if (e.targetTouches.length < 2) return 1;var t = e.targetTouches[0].pageX,
            a = e.targetTouches[0].pageY,
            i = e.targetTouches[1].pageX,
            s = e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i - t, 2) + Math.pow(s - a, 2));
      }, onGestureStart: function onGestureStart(e) {
        var t = this,
            a = t.params.zoom,
            i = t.zoom,
            s = i.gesture;if (i.fakeGestureTouched = !1, i.fakeGestureMoved = !1, !te.gestures) {
          if ("touchstart" !== e.type || "touchstart" === e.type && e.targetTouches.length < 2) return;i.fakeGestureTouched = !0, s.scaleStart = V.getDistanceBetweenTouches(e);
        }s.$slideEl && s.$slideEl.length || (s.$slideEl = L(e.target).closest(".swiper-slide"), 0 === s.$slideEl.length && (s.$slideEl = t.slides.eq(t.activeIndex)), s.$imageEl = s.$slideEl.find("img, svg, canvas"), s.$imageWrapEl = s.$imageEl.parent("." + a.containerClass), s.maxRatio = s.$imageWrapEl.attr("data-swiper-zoom") || a.maxRatio, 0 !== s.$imageWrapEl.length) ? (s.$imageEl.transition(0), t.zoom.isScaling = !0) : s.$imageEl = void 0;
      }, onGestureChange: function onGestureChange(e) {
        var t = this.params.zoom,
            a = this.zoom,
            i = a.gesture;if (!te.gestures) {
          if ("touchmove" !== e.type || "touchmove" === e.type && e.targetTouches.length < 2) return;a.fakeGestureMoved = !0, i.scaleMove = V.getDistanceBetweenTouches(e);
        }i.$imageEl && 0 !== i.$imageEl.length && (a.scale = te.gestures ? e.scale * a.currentScale : i.scaleMove / i.scaleStart * a.currentScale, a.scale > i.maxRatio && (a.scale = i.maxRatio - 1 + Math.pow(a.scale - i.maxRatio + 1, .5)), a.scale < t.minRatio && (a.scale = t.minRatio + 1 - Math.pow(t.minRatio - a.scale + 1, .5)), i.$imageEl.transform("translate3d(0,0,0) scale(" + a.scale + ")"));
      }, onGestureEnd: function onGestureEnd(e) {
        var t = this.params.zoom,
            a = this.zoom,
            i = a.gesture;if (!te.gestures) {
          if (!a.fakeGestureTouched || !a.fakeGestureMoved) return;if ("touchend" !== e.type || "touchend" === e.type && e.changedTouches.length < 2 && !m.android) return;a.fakeGestureTouched = !1, a.fakeGestureMoved = !1;
        }i.$imageEl && 0 !== i.$imageEl.length && (a.scale = Math.max(Math.min(a.scale, i.maxRatio), t.minRatio), i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale(" + a.scale + ")"), a.currentScale = a.scale, a.isScaling = !1, 1 === a.scale && (i.$slideEl = void 0));
      }, onTouchStart: function onTouchStart(e) {
        var t = this.zoom,
            a = t.gesture,
            i = t.image;a.$imageEl && 0 !== a.$imageEl.length && (i.isTouched || (m.android && e.preventDefault(), i.isTouched = !0, i.touchesStart.x = "touchstart" === e.type ? e.targetTouches[0].pageX : e.pageX, i.touchesStart.y = "touchstart" === e.type ? e.targetTouches[0].pageY : e.pageY));
      }, onTouchMove: function onTouchMove(e) {
        var t = this,
            a = t.zoom,
            i = a.gesture,
            s = a.image,
            r = a.velocity;if (i.$imageEl && 0 !== i.$imageEl.length && (t.allowClick = !1, s.isTouched && i.$slideEl)) {
          s.isMoved || (s.width = i.$imageEl[0].offsetWidth, s.height = i.$imageEl[0].offsetHeight, s.startX = ee.getTranslate(i.$imageWrapEl[0], "x") || 0, s.startY = ee.getTranslate(i.$imageWrapEl[0], "y") || 0, i.slideWidth = i.$slideEl[0].offsetWidth, i.slideHeight = i.$slideEl[0].offsetHeight, i.$imageWrapEl.transition(0), t.rtl && (s.startX = -s.startX, s.startY = -s.startY));var n = s.width * a.scale,
              o = s.height * a.scale;if (!(n < i.slideWidth && o < i.slideHeight)) {
            if (s.minX = Math.min(i.slideWidth / 2 - n / 2, 0), s.maxX = -s.minX, s.minY = Math.min(i.slideHeight / 2 - o / 2, 0), s.maxY = -s.minY, s.touchesCurrent.x = "touchmove" === e.type ? e.targetTouches[0].pageX : e.pageX, s.touchesCurrent.y = "touchmove" === e.type ? e.targetTouches[0].pageY : e.pageY, !s.isMoved && !a.isScaling) {
              if (t.isHorizontal() && (Math.floor(s.minX) === Math.floor(s.startX) && s.touchesCurrent.x < s.touchesStart.x || Math.floor(s.maxX) === Math.floor(s.startX) && s.touchesCurrent.x > s.touchesStart.x)) return void (s.isTouched = !1);if (!t.isHorizontal() && (Math.floor(s.minY) === Math.floor(s.startY) && s.touchesCurrent.y < s.touchesStart.y || Math.floor(s.maxY) === Math.floor(s.startY) && s.touchesCurrent.y > s.touchesStart.y)) return void (s.isTouched = !1);
            }e.preventDefault(), e.stopPropagation(), s.isMoved = !0, s.currentX = s.touchesCurrent.x - s.touchesStart.x + s.startX, s.currentY = s.touchesCurrent.y - s.touchesStart.y + s.startY, s.currentX < s.minX && (s.currentX = s.minX + 1 - Math.pow(s.minX - s.currentX + 1, .8)), s.currentX > s.maxX && (s.currentX = s.maxX - 1 + Math.pow(s.currentX - s.maxX + 1, .8)), s.currentY < s.minY && (s.currentY = s.minY + 1 - Math.pow(s.minY - s.currentY + 1, .8)), s.currentY > s.maxY && (s.currentY = s.maxY - 1 + Math.pow(s.currentY - s.maxY + 1, .8)), r.prevPositionX || (r.prevPositionX = s.touchesCurrent.x), r.prevPositionY || (r.prevPositionY = s.touchesCurrent.y), r.prevTime || (r.prevTime = Date.now()), r.x = (s.touchesCurrent.x - r.prevPositionX) / (Date.now() - r.prevTime) / 2, r.y = (s.touchesCurrent.y - r.prevPositionY) / (Date.now() - r.prevTime) / 2, Math.abs(s.touchesCurrent.x - r.prevPositionX) < 2 && (r.x = 0), Math.abs(s.touchesCurrent.y - r.prevPositionY) < 2 && (r.y = 0), r.prevPositionX = s.touchesCurrent.x, r.prevPositionY = s.touchesCurrent.y, r.prevTime = Date.now(), i.$imageWrapEl.transform("translate3d(" + s.currentX + "px, " + s.currentY + "px,0)");
          }
        }
      }, onTouchEnd: function onTouchEnd() {
        var e = this.zoom,
            t = e.gesture,
            a = e.image,
            i = e.velocity;if (t.$imageEl && 0 !== t.$imageEl.length) {
          if (!a.isTouched || !a.isMoved) return a.isTouched = !1, void (a.isMoved = !1);a.isTouched = !1, a.isMoved = !1;var s = 300,
              r = 300,
              n = i.x * s,
              o = a.currentX + n,
              l = i.y * r,
              d = a.currentY + l;0 !== i.x && (s = Math.abs((o - a.currentX) / i.x)), 0 !== i.y && (r = Math.abs((d - a.currentY) / i.y));var p = Math.max(s, r);a.currentX = o, a.currentY = d;var c = a.width * e.scale,
              u = a.height * e.scale;a.minX = Math.min(t.slideWidth / 2 - c / 2, 0), a.maxX = -a.minX, a.minY = Math.min(t.slideHeight / 2 - u / 2, 0), a.maxY = -a.minY, a.currentX = Math.max(Math.min(a.currentX, a.maxX), a.minX), a.currentY = Math.max(Math.min(a.currentY, a.maxY), a.minY), t.$imageWrapEl.transition(p).transform("translate3d(" + a.currentX + "px, " + a.currentY + "px,0)");
        }
      }, onTransitionEnd: function onTransitionEnd() {
        var e = this.zoom,
            t = e.gesture;t.$slideEl && this.previousIndex !== this.activeIndex && (t.$imageEl.transform("translate3d(0,0,0) scale(1)"), t.$imageWrapEl.transform("translate3d(0,0,0)"), e.scale = 1, e.currentScale = 1, t.$slideEl = void 0, t.$imageEl = void 0, t.$imageWrapEl = void 0);
      }, toggle: function toggle(e) {
        var t = this.zoom;t.scale && 1 !== t.scale ? t.out() : t.in(e);
      }, in: function _in(e) {
        var t,
            a,
            i,
            s,
            r,
            n,
            o,
            l,
            d,
            p,
            c,
            u,
            h,
            v,
            f,
            m,
            g = this,
            b = g.zoom,
            w = g.params.zoom,
            y = b.gesture,
            x = b.image;(y.$slideEl || (y.$slideEl = g.clickedSlide ? L(g.clickedSlide) : g.slides.eq(g.activeIndex), y.$imageEl = y.$slideEl.find("img, svg, canvas"), y.$imageWrapEl = y.$imageEl.parent("." + w.containerClass)), y.$imageEl && 0 !== y.$imageEl.length) && (y.$slideEl.addClass("" + w.zoomedSlideClass), void 0 === x.touchesStart.x && e ? (t = "touchend" === e.type ? e.changedTouches[0].pageX : e.pageX, a = "touchend" === e.type ? e.changedTouches[0].pageY : e.pageY) : (t = x.touchesStart.x, a = x.touchesStart.y), b.scale = y.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, b.currentScale = y.$imageWrapEl.attr("data-swiper-zoom") || w.maxRatio, e ? (f = y.$slideEl[0].offsetWidth, m = y.$slideEl[0].offsetHeight, i = y.$slideEl.offset().left + f / 2 - t, s = y.$slideEl.offset().top + m / 2 - a, o = y.$imageEl[0].offsetWidth, l = y.$imageEl[0].offsetHeight, d = o * b.scale, p = l * b.scale, h = -(c = Math.min(f / 2 - d / 2, 0)), v = -(u = Math.min(m / 2 - p / 2, 0)), (r = i * b.scale) < c && (r = c), h < r && (r = h), (n = s * b.scale) < u && (n = u), v < n && (n = v)) : n = r = 0, y.$imageWrapEl.transition(300).transform("translate3d(" + r + "px, " + n + "px,0)"), y.$imageEl.transition(300).transform("translate3d(0,0,0) scale(" + b.scale + ")"));
      }, out: function out() {
        var e = this,
            t = e.zoom,
            a = e.params.zoom,
            i = t.gesture;i.$slideEl || (i.$slideEl = e.clickedSlide ? L(e.clickedSlide) : e.slides.eq(e.activeIndex), i.$imageEl = i.$slideEl.find("img, svg, canvas"), i.$imageWrapEl = i.$imageEl.parent("." + a.containerClass)), i.$imageEl && 0 !== i.$imageEl.length && (t.scale = 1, t.currentScale = 1, i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"), i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"), i.$slideEl.removeClass("" + a.zoomedSlideClass), i.$slideEl = void 0);
      }, enable: function enable() {
        var e = this,
            t = e.zoom;if (!t.enabled) {
          t.enabled = !0;var a = !("touchstart" !== e.touchEvents.start || !te.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 };te.gestures ? (e.$wrapperEl.on("gesturestart", ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.on("gesturechange", ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.on("gestureend", ".swiper-slide", t.onGestureEnd, a)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.on(e.touchEvents.start, ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.on(e.touchEvents.move, ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.on(e.touchEvents.end, ".swiper-slide", t.onGestureEnd, a)), e.$wrapperEl.on(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove);
        }
      }, disable: function disable() {
        var e = this,
            t = e.zoom;if (t.enabled) {
          e.zoom.enabled = !1;var a = !("touchstart" !== e.touchEvents.start || !te.passiveListener || !e.params.passiveListeners) && { passive: !0, capture: !1 };te.gestures ? (e.$wrapperEl.off("gesturestart", ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.off("gesturechange", ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.off("gestureend", ".swiper-slide", t.onGestureEnd, a)) : "touchstart" === e.touchEvents.start && (e.$wrapperEl.off(e.touchEvents.start, ".swiper-slide", t.onGestureStart, a), e.$wrapperEl.off(e.touchEvents.move, ".swiper-slide", t.onGestureChange, a), e.$wrapperEl.off(e.touchEvents.end, ".swiper-slide", t.onGestureEnd, a)), e.$wrapperEl.off(e.touchEvents.move, "." + e.params.zoom.containerClass, t.onTouchMove);
        }
      } },
        F = { loadInSlide: function loadInSlide(e, l) {
        void 0 === l && (l = !0);var d = this,
            p = d.params.lazy;if (void 0 !== e && 0 !== d.slides.length) {
          var c = d.virtual && d.params.virtual.enabled ? d.$wrapperEl.children("." + d.params.slideClass + '[data-swiper-slide-index="' + e + '"]') : d.slides.eq(e),
              t = c.find("." + p.elementClass + ":not(." + p.loadedClass + "):not(." + p.loadingClass + ")");!c.hasClass(p.elementClass) || c.hasClass(p.loadedClass) || c.hasClass(p.loadingClass) || (t = t.add(c[0])), 0 !== t.length && t.each(function (e, t) {
            var i = L(t);i.addClass(p.loadingClass);var s = i.attr("data-background"),
                r = i.attr("data-src"),
                n = i.attr("data-srcset"),
                o = i.attr("data-sizes");d.loadImage(i[0], r || s, n, o, !1, function () {
              if (null != d && d && (!d || d.params) && !d.destroyed) {
                if (s ? (i.css("background-image", 'url("' + s + '")'), i.removeAttr("data-background")) : (n && (i.attr("srcset", n), i.removeAttr("data-srcset")), o && (i.attr("sizes", o), i.removeAttr("data-sizes")), r && (i.attr("src", r), i.removeAttr("data-src"))), i.addClass(p.loadedClass).removeClass(p.loadingClass), c.find("." + p.preloaderClass).remove(), d.params.loop && l) {
                  var e = c.attr("data-swiper-slide-index");if (c.hasClass(d.params.slideDuplicateClass)) {
                    var t = d.$wrapperEl.children('[data-swiper-slide-index="' + e + '"]:not(.' + d.params.slideDuplicateClass + ")");d.lazy.loadInSlide(t.index(), !1);
                  } else {
                    var a = d.$wrapperEl.children("." + d.params.slideDuplicateClass + '[data-swiper-slide-index="' + e + '"]');d.lazy.loadInSlide(a.index(), !1);
                  }
                }d.emit("lazyImageReady", c[0], i[0]);
              }
            }), d.emit("lazyImageLoad", c[0], i[0]);
          });
        }
      }, load: function load() {
        var i = this,
            t = i.$wrapperEl,
            a = i.params,
            s = i.slides,
            e = i.activeIndex,
            r = i.virtual && a.virtual.enabled,
            n = a.lazy,
            o = a.slidesPerView;function l(e) {
          if (r) {
            if (t.children("." + a.slideClass + '[data-swiper-slide-index="' + e + '"]').length) return !0;
          } else if (s[e]) return !0;return !1;
        }function d(e) {
          return r ? L(e).attr("data-swiper-slide-index") : L(e).index();
        }if ("auto" === o && (o = 0), i.lazy.initialImageLoaded || (i.lazy.initialImageLoaded = !0), i.params.watchSlidesVisibility) t.children("." + a.slideVisibleClass).each(function (e, t) {
          var a = r ? L(t).attr("data-swiper-slide-index") : L(t).index();i.lazy.loadInSlide(a);
        });else if (1 < o) for (var p = e; p < e + o; p += 1) {
          l(p) && i.lazy.loadInSlide(p);
        } else i.lazy.loadInSlide(e);if (n.loadPrevNext) if (1 < o || n.loadPrevNextAmount && 1 < n.loadPrevNextAmount) {
          for (var c = n.loadPrevNextAmount, u = o, h = Math.min(e + u + Math.max(c, u), s.length), v = Math.max(e - Math.max(u, c), 0), f = e + o; f < h; f += 1) {
            l(f) && i.lazy.loadInSlide(f);
          }for (var m = v; m < e; m += 1) {
            l(m) && i.lazy.loadInSlide(m);
          }
        } else {
          var g = t.children("." + a.slideNextClass);0 < g.length && i.lazy.loadInSlide(d(g));var b = t.children("." + a.slidePrevClass);0 < b.length && i.lazy.loadInSlide(d(b));
        }
      } },
        R = { LinearSpline: function LinearSpline(e, t) {
        var a,
            i,
            s,
            r,
            n,
            o = function o(e, t) {
          for (i = -1, a = e.length; 1 < a - i;) {
            e[s = a + i >> 1] <= t ? i = s : a = s;
          }return a;
        };return this.x = e, this.y = t, this.lastIndex = e.length - 1, this.interpolate = function (e) {
          return e ? (n = o(this.x, e), r = n - 1, (e - this.x[r]) * (this.y[n] - this.y[r]) / (this.x[n] - this.x[r]) + this.y[r]) : 0;
        }, this;
      }, getInterpolateFunction: function getInterpolateFunction(e) {
        var t = this;t.controller.spline || (t.controller.spline = t.params.loop ? new R.LinearSpline(t.slidesGrid, e.slidesGrid) : new R.LinearSpline(t.snapGrid, e.snapGrid));
      }, setTranslate: function setTranslate(e, t) {
        var a,
            i,
            s = this,
            r = s.controller.control;function n(e) {
          var t = s.rtlTranslate ? -s.translate : s.translate;"slide" === s.params.controller.by && (s.controller.getInterpolateFunction(e), i = -s.controller.spline.interpolate(-t)), i && "container" !== s.params.controller.by || (a = (e.maxTranslate() - e.minTranslate()) / (s.maxTranslate() - s.minTranslate()), i = (t - s.minTranslate()) * a + e.minTranslate()), s.params.controller.inverse && (i = e.maxTranslate() - i), e.updateProgress(i), e.setTranslate(i, s), e.updateActiveIndex(), e.updateSlidesClasses();
        }if (Array.isArray(r)) for (var o = 0; o < r.length; o += 1) {
          r[o] !== t && r[o] instanceof S && n(r[o]);
        } else r instanceof S && t !== r && n(r);
      }, setTransition: function setTransition(t, e) {
        var a,
            i = this,
            s = i.controller.control;function r(e) {
          e.setTransition(t, i), 0 !== t && (e.transitionStart(), e.params.autoHeight && ee.nextTick(function () {
            e.updateAutoHeight();
          }), e.$wrapperEl.transitionEnd(function () {
            s && (e.params.loop && "slide" === i.params.controller.by && e.loopFix(), e.transitionEnd());
          }));
        }if (Array.isArray(s)) for (a = 0; a < s.length; a += 1) {
          s[a] !== e && s[a] instanceof S && r(s[a]);
        } else s instanceof S && e !== s && r(s);
      } },
        q = { makeElFocusable: function makeElFocusable(e) {
        return e.attr("tabIndex", "0"), e;
      }, addElRole: function addElRole(e, t) {
        return e.attr("role", t), e;
      }, addElLabel: function addElLabel(e, t) {
        return e.attr("aria-label", t), e;
      }, disableEl: function disableEl(e) {
        return e.attr("aria-disabled", !0), e;
      }, enableEl: function enableEl(e) {
        return e.attr("aria-disabled", !1), e;
      }, onEnterKey: function onEnterKey(e) {
        var t = this,
            a = t.params.a11y;if (13 === e.keyCode) {
          var i = L(e.target);t.navigation && t.navigation.$nextEl && i.is(t.navigation.$nextEl) && (t.isEnd && !t.params.loop || t.slideNext(), t.isEnd ? t.a11y.notify(a.lastSlideMessage) : t.a11y.notify(a.nextSlideMessage)), t.navigation && t.navigation.$prevEl && i.is(t.navigation.$prevEl) && (t.isBeginning && !t.params.loop || t.slidePrev(), t.isBeginning ? t.a11y.notify(a.firstSlideMessage) : t.a11y.notify(a.prevSlideMessage)), t.pagination && i.is("." + t.params.pagination.bulletClass) && i[0].click();
        }
      }, notify: function notify(e) {
        var t = this.a11y.liveRegion;0 !== t.length && (t.html(""), t.html(e));
      }, updateNavigation: function updateNavigation() {
        var e = this;if (!e.params.loop) {
          var t = e.navigation,
              a = t.$nextEl,
              i = t.$prevEl;i && 0 < i.length && (e.isBeginning ? e.a11y.disableEl(i) : e.a11y.enableEl(i)), a && 0 < a.length && (e.isEnd ? e.a11y.disableEl(a) : e.a11y.enableEl(a));
        }
      }, updatePagination: function updatePagination() {
        var i = this,
            s = i.params.a11y;i.pagination && i.params.pagination.clickable && i.pagination.bullets && i.pagination.bullets.length && i.pagination.bullets.each(function (e, t) {
          var a = L(t);i.a11y.makeElFocusable(a), i.a11y.addElRole(a, "button"), i.a11y.addElLabel(a, s.paginationBulletMessage.replace(/{{index}}/, a.index() + 1));
        });
      }, init: function init() {
        var e = this;e.$el.append(e.a11y.liveRegion);var t,
            a,
            i = e.params.a11y;e.navigation && e.navigation.$nextEl && (t = e.navigation.$nextEl), e.navigation && e.navigation.$prevEl && (a = e.navigation.$prevEl), t && (e.a11y.makeElFocusable(t), e.a11y.addElRole(t, "button"), e.a11y.addElLabel(t, i.nextSlideMessage), t.on("keydown", e.a11y.onEnterKey)), a && (e.a11y.makeElFocusable(a), e.a11y.addElRole(a, "button"), e.a11y.addElLabel(a, i.prevSlideMessage), a.on("keydown", e.a11y.onEnterKey)), e.pagination && e.params.pagination.clickable && e.pagination.bullets && e.pagination.bullets.length && e.pagination.$el.on("keydown", "." + e.params.pagination.bulletClass, e.a11y.onEnterKey);
      }, destroy: function destroy() {
        var e,
            t,
            a = this;a.a11y.liveRegion && 0 < a.a11y.liveRegion.length && a.a11y.liveRegion.remove(), a.navigation && a.navigation.$nextEl && (e = a.navigation.$nextEl), a.navigation && a.navigation.$prevEl && (t = a.navigation.$prevEl), e && e.off("keydown", a.a11y.onEnterKey), t && t.off("keydown", a.a11y.onEnterKey), a.pagination && a.params.pagination.clickable && a.pagination.bullets && a.pagination.bullets.length && a.pagination.$el.off("keydown", "." + a.params.pagination.bulletClass, a.a11y.onEnterKey);
      } },
        W = { init: function init() {
        var e = this;if (e.params.history) {
          if (!J.history || !J.history.pushState) return e.params.history.enabled = !1, void (e.params.hashNavigation.enabled = !0);var t = e.history;t.initialized = !0, t.paths = W.getPathValues(), (t.paths.key || t.paths.value) && (t.scrollToSlide(0, t.paths.value, e.params.runCallbacksOnInit), e.params.history.replaceState || J.addEventListener("popstate", e.history.setHistoryPopState));
        }
      }, destroy: function destroy() {
        this.params.history.replaceState || J.removeEventListener("popstate", this.history.setHistoryPopState);
      }, setHistoryPopState: function setHistoryPopState() {
        this.history.paths = W.getPathValues(), this.history.scrollToSlide(this.params.speed, this.history.paths.value, !1);
      }, getPathValues: function getPathValues() {
        var e = J.location.pathname.slice(1).split("/").filter(function (e) {
          return "" !== e;
        }),
            t = e.length;return { key: e[t - 2], value: e[t - 1] };
      }, setHistory: function setHistory(e, t) {
        if (this.history.initialized && this.params.history.enabled) {
          var a = this.slides.eq(t),
              i = W.slugify(a.attr("data-history"));J.location.pathname.includes(e) || (i = e + "/" + i);var s = J.history.state;s && s.value === i || (this.params.history.replaceState ? J.history.replaceState({ value: i }, null, i) : J.history.pushState({ value: i }, null, i));
        }
      }, slugify: function slugify(e) {
        return e.toString().toLowerCase().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
      }, scrollToSlide: function scrollToSlide(e, t, a) {
        var i = this;if (t) for (var s = 0, r = i.slides.length; s < r; s += 1) {
          var n = i.slides.eq(s);if (W.slugify(n.attr("data-history")) === t && !n.hasClass(i.params.slideDuplicateClass)) {
            var o = n.index();i.slideTo(o, e, a);
          }
        } else i.slideTo(0, e, a);
      } },
        j = { onHashCange: function onHashCange() {
        var e = this,
            t = f.location.hash.replace("#", "");if (t !== e.slides.eq(e.activeIndex).attr("data-hash")) {
          var a = e.$wrapperEl.children("." + e.params.slideClass + '[data-hash="' + t + '"]').index();if (void 0 === a) return;e.slideTo(a);
        }
      }, setHash: function setHash() {
        var e = this;if (e.hashNavigation.initialized && e.params.hashNavigation.enabled) if (e.params.hashNavigation.replaceState && J.history && J.history.replaceState) J.history.replaceState(null, null, "#" + e.slides.eq(e.activeIndex).attr("data-hash") || "");else {
          var t = e.slides.eq(e.activeIndex),
              a = t.attr("data-hash") || t.attr("data-history");f.location.hash = a || "";
        }
      }, init: function init() {
        var e = this;if (!(!e.params.hashNavigation.enabled || e.params.history && e.params.history.enabled)) {
          e.hashNavigation.initialized = !0;var t = f.location.hash.replace("#", "");if (t) for (var a = 0, i = e.slides.length; a < i; a += 1) {
            var s = e.slides.eq(a);if ((s.attr("data-hash") || s.attr("data-history")) === t && !s.hasClass(e.params.slideDuplicateClass)) {
              var r = s.index();e.slideTo(r, 0, e.params.runCallbacksOnInit, !0);
            }
          }e.params.hashNavigation.watchState && L(J).on("hashchange", e.hashNavigation.onHashCange);
        }
      }, destroy: function destroy() {
        this.params.hashNavigation.watchState && L(J).off("hashchange", this.hashNavigation.onHashCange);
      } },
        U = { run: function run() {
        var e = this,
            t = e.slides.eq(e.activeIndex),
            a = e.params.autoplay.delay;t.attr("data-swiper-autoplay") && (a = t.attr("data-swiper-autoplay") || e.params.autoplay.delay), e.autoplay.timeout = ee.nextTick(function () {
          e.params.autoplay.reverseDirection ? e.params.loop ? (e.loopFix(), e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.isBeginning ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(e.slides.length - 1, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slidePrev(e.params.speed, !0, !0), e.emit("autoplay")) : e.params.loop ? (e.loopFix(), e.slideNext(e.params.speed, !0, !0), e.emit("autoplay")) : e.isEnd ? e.params.autoplay.stopOnLastSlide ? e.autoplay.stop() : (e.slideTo(0, e.params.speed, !0, !0), e.emit("autoplay")) : (e.slideNext(e.params.speed, !0, !0), e.emit("autoplay"));
        }, a);
      }, start: function start() {
        var e = this;return void 0 === e.autoplay.timeout && !e.autoplay.running && (e.autoplay.running = !0, e.emit("autoplayStart"), e.autoplay.run(), !0);
      }, stop: function stop() {
        var e = this;return !!e.autoplay.running && void 0 !== e.autoplay.timeout && (e.autoplay.timeout && (clearTimeout(e.autoplay.timeout), e.autoplay.timeout = void 0), e.autoplay.running = !1, e.emit("autoplayStop"), !0);
      }, pause: function pause(e) {
        var t = this;t.autoplay.running && (t.autoplay.paused || (t.autoplay.timeout && clearTimeout(t.autoplay.timeout), t.autoplay.paused = !0, 0 !== e && t.params.autoplay.waitForTransition ? (t.$wrapperEl[0].addEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].addEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd)) : (t.autoplay.paused = !1, t.autoplay.run())));
      } },
        K = { setTranslate: function setTranslate() {
        for (var e = this, t = e.slides, a = 0; a < t.length; a += 1) {
          var i = e.slides.eq(a),
              s = -i[0].swiperSlideOffset;e.params.virtualTranslate || (s -= e.translate);var r = 0;e.isHorizontal() || (r = s, s = 0);var n = e.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(i[0].progress), 0) : 1 + Math.min(Math.max(i[0].progress, -1), 0);i.css({ opacity: n }).transform("translate3d(" + s + "px, " + r + "px, 0px)");
        }
      }, setTransition: function setTransition(e) {
        var a = this,
            t = a.slides,
            i = a.$wrapperEl;if (t.transition(e), a.params.virtualTranslate && 0 !== e) {
          var s = !1;t.transitionEnd(function () {
            if (!s && a && !a.destroyed) {
              s = !0, a.animating = !1;for (var e = ["webkitTransitionEnd", "transitionend"], t = 0; t < e.length; t += 1) {
                i.trigger(e[t]);
              }
            }
          });
        }
      } },
        _ = { setTranslate: function setTranslate() {
        var e,
            t = this,
            a = t.$el,
            i = t.$wrapperEl,
            s = t.slides,
            r = t.width,
            n = t.height,
            o = t.rtlTranslate,
            l = t.size,
            d = t.params.cubeEffect,
            p = t.isHorizontal(),
            c = t.virtual && t.params.virtual.enabled,
            u = 0;d.shadow && (p ? (0 === (e = i.find(".swiper-cube-shadow")).length && (e = L('<div class="swiper-cube-shadow"></div>'), i.append(e)), e.css({ height: r + "px" })) : 0 === (e = a.find(".swiper-cube-shadow")).length && (e = L('<div class="swiper-cube-shadow"></div>'), a.append(e)));for (var h = 0; h < s.length; h += 1) {
          var v = s.eq(h),
              f = h;c && (f = parseInt(v.attr("data-swiper-slide-index"), 10));var m = 90 * f,
              g = Math.floor(m / 360);o && (m = -m, g = Math.floor(-m / 360));var b = Math.max(Math.min(v[0].progress, 1), -1),
              w = 0,
              y = 0,
              x = 0;f % 4 == 0 ? (w = 4 * -g * l, x = 0) : (f - 1) % 4 == 0 ? (w = 0, x = 4 * -g * l) : (f - 2) % 4 == 0 ? (w = l + 4 * g * l, x = l) : (f - 3) % 4 == 0 && (w = -l, x = 3 * l + 4 * l * g), o && (w = -w), p || (y = w, w = 0);var T = "rotateX(" + (p ? 0 : -m) + "deg) rotateY(" + (p ? m : 0) + "deg) translate3d(" + w + "px, " + y + "px, " + x + "px)";if (b <= 1 && -1 < b && (u = 90 * f + 90 * b, o && (u = 90 * -f - 90 * b)), v.transform(T), d.slideShadows) {
            var E = p ? v.find(".swiper-slide-shadow-left") : v.find(".swiper-slide-shadow-top"),
                S = p ? v.find(".swiper-slide-shadow-right") : v.find(".swiper-slide-shadow-bottom");0 === E.length && (E = L('<div class="swiper-slide-shadow-' + (p ? "left" : "top") + '"></div>'), v.append(E)), 0 === S.length && (S = L('<div class="swiper-slide-shadow-' + (p ? "right" : "bottom") + '"></div>'), v.append(S)), E.length && (E[0].style.opacity = Math.max(-b, 0)), S.length && (S[0].style.opacity = Math.max(b, 0));
          }
        }if (i.css({ "-webkit-transform-origin": "50% 50% -" + l / 2 + "px", "-moz-transform-origin": "50% 50% -" + l / 2 + "px", "-ms-transform-origin": "50% 50% -" + l / 2 + "px", "transform-origin": "50% 50% -" + l / 2 + "px" }), d.shadow) if (p) e.transform("translate3d(0px, " + (r / 2 + d.shadowOffset) + "px, " + -r / 2 + "px) rotateX(90deg) rotateZ(0deg) scale(" + d.shadowScale + ")");else {
          var C = Math.abs(u) - 90 * Math.floor(Math.abs(u) / 90),
              M = 1.5 - (Math.sin(2 * C * Math.PI / 360) / 2 + Math.cos(2 * C * Math.PI / 360) / 2),
              k = d.shadowScale,
              P = d.shadowScale / M,
              z = d.shadowOffset;e.transform("scale3d(" + k + ", 1, " + P + ") translate3d(0px, " + (n / 2 + z) + "px, " + -n / 2 / P + "px) rotateX(-90deg)");
        }var $ = I.isSafari || I.isUiWebView ? -l / 2 : 0;i.transform("translate3d(0px,0," + $ + "px) rotateX(" + (t.isHorizontal() ? 0 : u) + "deg) rotateY(" + (t.isHorizontal() ? -u : 0) + "deg)");
      }, setTransition: function setTransition(e) {
        var t = this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), this.params.cubeEffect.shadow && !this.isHorizontal() && t.find(".swiper-cube-shadow").transition(e);
      } },
        Z = { setTranslate: function setTranslate() {
        for (var e = this, t = e.slides, a = e.rtlTranslate, i = 0; i < t.length; i += 1) {
          var s = t.eq(i),
              r = s[0].progress;e.params.flipEffect.limitRotation && (r = Math.max(Math.min(s[0].progress, 1), -1));var n = -180 * r,
              o = 0,
              l = -s[0].swiperSlideOffset,
              d = 0;if (e.isHorizontal() ? a && (n = -n) : (d = l, o = -n, n = l = 0), s[0].style.zIndex = -Math.abs(Math.round(r)) + t.length, e.params.flipEffect.slideShadows) {
            var p = e.isHorizontal() ? s.find(".swiper-slide-shadow-left") : s.find(".swiper-slide-shadow-top"),
                c = e.isHorizontal() ? s.find(".swiper-slide-shadow-right") : s.find(".swiper-slide-shadow-bottom");0 === p.length && (p = L('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "left" : "top") + '"></div>'), s.append(p)), 0 === c.length && (c = L('<div class="swiper-slide-shadow-' + (e.isHorizontal() ? "right" : "bottom") + '"></div>'), s.append(c)), p.length && (p[0].style.opacity = Math.max(-r, 0)), c.length && (c[0].style.opacity = Math.max(r, 0));
          }s.transform("translate3d(" + l + "px, " + d + "px, 0px) rotateX(" + o + "deg) rotateY(" + n + "deg)");
        }
      }, setTransition: function setTransition(e) {
        var a = this,
            t = a.slides,
            i = a.activeIndex,
            s = a.$wrapperEl;if (t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e), a.params.virtualTranslate && 0 !== e) {
          var r = !1;t.eq(i).transitionEnd(function () {
            if (!r && a && !a.destroyed) {
              r = !0, a.animating = !1;for (var e = ["webkitTransitionEnd", "transitionend"], t = 0; t < e.length; t += 1) {
                s.trigger(e[t]);
              }
            }
          });
        }
      } },
        Q = { setTranslate: function setTranslate() {
        for (var e = this, t = e.width, a = e.height, i = e.slides, s = e.$wrapperEl, r = e.slidesSizesGrid, n = e.params.coverflowEffect, o = e.isHorizontal(), l = e.translate, d = o ? t / 2 - l : a / 2 - l, p = o ? n.rotate : -n.rotate, c = n.depth, u = 0, h = i.length; u < h; u += 1) {
          var v = i.eq(u),
              f = r[u],
              m = (d - v[0].swiperSlideOffset - f / 2) / f * n.modifier,
              g = o ? p * m : 0,
              b = o ? 0 : p * m,
              w = -c * Math.abs(m),
              y = o ? 0 : n.stretch * m,
              x = o ? n.stretch * m : 0;Math.abs(x) < .001 && (x = 0), Math.abs(y) < .001 && (y = 0), Math.abs(w) < .001 && (w = 0), Math.abs(g) < .001 && (g = 0), Math.abs(b) < .001 && (b = 0);var T = "translate3d(" + x + "px," + y + "px," + w + "px)  rotateX(" + b + "deg) rotateY(" + g + "deg)";if (v.transform(T), v[0].style.zIndex = 1 - Math.abs(Math.round(m)), n.slideShadows) {
            var E = o ? v.find(".swiper-slide-shadow-left") : v.find(".swiper-slide-shadow-top"),
                S = o ? v.find(".swiper-slide-shadow-right") : v.find(".swiper-slide-shadow-bottom");0 === E.length && (E = L('<div class="swiper-slide-shadow-' + (o ? "left" : "top") + '"></div>'), v.append(E)), 0 === S.length && (S = L('<div class="swiper-slide-shadow-' + (o ? "right" : "bottom") + '"></div>'), v.append(S)), E.length && (E[0].style.opacity = 0 < m ? m : 0), S.length && (S[0].style.opacity = 0 < -m ? -m : 0);
          }
        }(te.pointerEvents || te.prefixedPointerEvents) && (s[0].style.perspectiveOrigin = d + "px 50%");
      }, setTransition: function setTransition(e) {
        this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e);
      } },
        ae = { init: function init() {
        var e = this,
            t = e.params.thumbs,
            a = e.constructor;t.swiper instanceof a ? (e.thumbs.swiper = t.swiper, ee.extend(e.thumbs.swiper.originalParams, { watchSlidesProgress: !0, slideToClickedSlide: !1 }), ee.extend(e.thumbs.swiper.params, { watchSlidesProgress: !0, slideToClickedSlide: !1 })) : ee.isObject(t.swiper) && (e.thumbs.swiper = new a(ee.extend({}, t.swiper, { watchSlidesVisibility: !0, watchSlidesProgress: !0, slideToClickedSlide: !1 })), e.thumbs.swiperCreated = !0), e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass), e.thumbs.swiper.on("tap", e.thumbs.onThumbClick);
      }, onThumbClick: function onThumbClick() {
        var e = this,
            t = e.thumbs.swiper;if (t) {
          var a = t.clickedIndex,
              i = t.clickedSlide;if (!(i && L(i).hasClass(e.params.thumbs.slideThumbActiveClass) || null == a)) {
            var s;if (s = t.params.loop ? parseInt(L(t.clickedSlide).attr("data-swiper-slide-index"), 10) : a, e.params.loop) {
              var r = e.activeIndex;e.slides.eq(r).hasClass(e.params.slideDuplicateClass) && (e.loopFix(), e._clientLeft = e.$wrapperEl[0].clientLeft, r = e.activeIndex);var n = e.slides.eq(r).prevAll('[data-swiper-slide-index="' + s + '"]').eq(0).index(),
                  o = e.slides.eq(r).nextAll('[data-swiper-slide-index="' + s + '"]').eq(0).index();s = void 0 === n ? o : void 0 === o ? n : o - r < r - n ? o : n;
            }e.slideTo(s);
          }
        }
      }, update: function update(e) {
        var t = this,
            a = t.thumbs.swiper;if (a) {
          var i = "auto" === a.params.slidesPerView ? a.slidesPerViewDynamic() : a.params.slidesPerView;if (t.realIndex !== a.realIndex) {
            var s,
                r = a.activeIndex;if (a.params.loop) {
              a.slides.eq(r).hasClass(a.params.slideDuplicateClass) && (a.loopFix(), a._clientLeft = a.$wrapperEl[0].clientLeft, r = a.activeIndex);var n = a.slides.eq(r).prevAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index(),
                  o = a.slides.eq(r).nextAll('[data-swiper-slide-index="' + t.realIndex + '"]').eq(0).index();s = void 0 === n ? o : void 0 === o ? n : o - r == r - n ? r : o - r < r - n ? o : n;
            } else s = t.realIndex;a.visibleSlidesIndexes.indexOf(s) < 0 && (a.params.centeredSlides ? s = r < s ? s - Math.floor(i / 2) + 1 : s + Math.floor(i / 2) - 1 : r < s && (s = s - i + 1), a.slideTo(s, e ? 0 : void 0));
          }var l = 1,
              d = t.params.thumbs.slideThumbActiveClass;if (1 < t.params.slidesPerView && !t.params.centeredSlides && (l = t.params.slidesPerView), a.slides.removeClass(d), a.params.loop) for (var p = 0; p < l; p += 1) {
            a.$wrapperEl.children('[data-swiper-slide-index="' + (t.realIndex + p) + '"]').addClass(d);
          } else for (var c = 0; c < l; c += 1) {
            a.slides.eq(t.realIndex + c).addClass(d);
          }
        }
      } },
        ie = [C, M, k, P, $, O, N, { name: "mousewheel", params: { mousewheel: { enabled: !1, releaseOnEdges: !1, invert: !1, forceToAxis: !1, sensitivity: 1, eventsTarged: "container" } }, create: function create() {
        var e = this;ee.extend(e, { mousewheel: { enabled: !1, enable: H.enable.bind(e), disable: H.disable.bind(e), handle: H.handle.bind(e), handleMouseEnter: H.handleMouseEnter.bind(e), handleMouseLeave: H.handleMouseLeave.bind(e), lastScrollTime: ee.now() } });
      }, on: { init: function init() {
          this.params.mousewheel.enabled && this.mousewheel.enable();
        }, destroy: function destroy() {
          this.mousewheel.enabled && this.mousewheel.disable();
        } } }, { name: "navigation", params: { navigation: { nextEl: null, prevEl: null, hideOnClick: !1, disabledClass: "swiper-button-disabled", hiddenClass: "swiper-button-hidden", lockClass: "swiper-button-lock" } }, create: function create() {
        var e = this;ee.extend(e, { navigation: { init: G.init.bind(e), update: G.update.bind(e), destroy: G.destroy.bind(e), onNextClick: G.onNextClick.bind(e), onPrevClick: G.onPrevClick.bind(e) } });
      }, on: { init: function init() {
          this.navigation.init(), this.navigation.update();
        }, toEdge: function toEdge() {
          this.navigation.update();
        }, fromEdge: function fromEdge() {
          this.navigation.update();
        }, destroy: function destroy() {
          this.navigation.destroy();
        }, click: function click(e) {
          var t = this.navigation,
              a = t.$nextEl,
              i = t.$prevEl;!this.params.navigation.hideOnClick || L(e.target).is(i) || L(e.target).is(a) || (a && a.toggleClass(this.params.navigation.hiddenClass), i && i.toggleClass(this.params.navigation.hiddenClass));
        } } }, { name: "pagination", params: { pagination: { el: null, bulletElement: "span", clickable: !1, hideOnClick: !1, renderBullet: null, renderProgressbar: null, renderFraction: null, renderCustom: null, progressbarOpposite: !1, type: "bullets", dynamicBullets: !1, dynamicMainBullets: 1, formatFractionCurrent: function formatFractionCurrent(e) {
            return e;
          }, formatFractionTotal: function formatFractionTotal(e) {
            return e;
          }, bulletClass: "swiper-pagination-bullet", bulletActiveClass: "swiper-pagination-bullet-active", modifierClass: "swiper-pagination-", currentClass: "swiper-pagination-current", totalClass: "swiper-pagination-total", hiddenClass: "swiper-pagination-hidden", progressbarFillClass: "swiper-pagination-progressbar-fill", progressbarOppositeClass: "swiper-pagination-progressbar-opposite", clickableClass: "swiper-pagination-clickable", lockClass: "swiper-pagination-lock" } }, create: function create() {
        var e = this;ee.extend(e, { pagination: { init: B.init.bind(e), render: B.render.bind(e), update: B.update.bind(e), destroy: B.destroy.bind(e), dynamicBulletIndex: 0 } });
      }, on: { init: function init() {
          this.pagination.init(), this.pagination.render(), this.pagination.update();
        }, activeIndexChange: function activeIndexChange() {
          this.params.loop ? this.pagination.update() : void 0 === this.snapIndex && this.pagination.update();
        }, snapIndexChange: function snapIndexChange() {
          this.params.loop || this.pagination.update();
        }, slidesLengthChange: function slidesLengthChange() {
          this.params.loop && (this.pagination.render(), this.pagination.update());
        }, snapGridLengthChange: function snapGridLengthChange() {
          this.params.loop || (this.pagination.render(), this.pagination.update());
        }, destroy: function destroy() {
          this.pagination.destroy();
        }, click: function click(e) {
          var t = this;t.params.pagination.el && t.params.pagination.hideOnClick && 0 < t.pagination.$el.length && !L(e.target).hasClass(t.params.pagination.bulletClass) && t.pagination.$el.toggleClass(t.params.pagination.hiddenClass);
        } } }, { name: "scrollbar", params: { scrollbar: { el: null, dragSize: "auto", hide: !1, draggable: !1, snapOnRelease: !0, lockClass: "swiper-scrollbar-lock", dragClass: "swiper-scrollbar-drag" } }, create: function create() {
        var e = this;ee.extend(e, { scrollbar: { init: X.init.bind(e), destroy: X.destroy.bind(e), updateSize: X.updateSize.bind(e), setTranslate: X.setTranslate.bind(e), setTransition: X.setTransition.bind(e), enableDraggable: X.enableDraggable.bind(e), disableDraggable: X.disableDraggable.bind(e), setDragPosition: X.setDragPosition.bind(e), onDragStart: X.onDragStart.bind(e), onDragMove: X.onDragMove.bind(e), onDragEnd: X.onDragEnd.bind(e), isTouched: !1, timeout: null, dragTimeout: null } });
      }, on: { init: function init() {
          this.scrollbar.init(), this.scrollbar.updateSize(), this.scrollbar.setTranslate();
        }, update: function update() {
          this.scrollbar.updateSize();
        }, resize: function resize() {
          this.scrollbar.updateSize();
        }, observerUpdate: function observerUpdate() {
          this.scrollbar.updateSize();
        }, setTranslate: function setTranslate() {
          this.scrollbar.setTranslate();
        }, setTransition: function setTransition(e) {
          this.scrollbar.setTransition(e);
        }, destroy: function destroy() {
          this.scrollbar.destroy();
        } } }, { name: "parallax", params: { parallax: { enabled: !1 } }, create: function create() {
        ee.extend(this, { parallax: { setTransform: Y.setTransform.bind(this), setTranslate: Y.setTranslate.bind(this), setTransition: Y.setTransition.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          this.params.parallax.enabled && (this.params.watchSlidesProgress = !0, this.originalParams.watchSlidesProgress = !0);
        }, init: function init() {
          this.params.parallax && this.parallax.setTranslate();
        }, setTranslate: function setTranslate() {
          this.params.parallax && this.parallax.setTranslate();
        }, setTransition: function setTransition(e) {
          this.params.parallax && this.parallax.setTransition(e);
        } } }, { name: "zoom", params: { zoom: { enabled: !1, maxRatio: 3, minRatio: 1, toggle: !0, containerClass: "swiper-zoom-container", zoomedSlideClass: "swiper-slide-zoomed" } }, create: function create() {
        var i = this,
            t = { enabled: !1, scale: 1, currentScale: 1, isScaling: !1, gesture: { $slideEl: void 0, slideWidth: void 0, slideHeight: void 0, $imageEl: void 0, $imageWrapEl: void 0, maxRatio: 3 }, image: { isTouched: void 0, isMoved: void 0, currentX: void 0, currentY: void 0, minX: void 0, minY: void 0, maxX: void 0, maxY: void 0, width: void 0, height: void 0, startX: void 0, startY: void 0, touchesStart: {}, touchesCurrent: {} }, velocity: { x: void 0, y: void 0, prevPositionX: void 0, prevPositionY: void 0, prevTime: void 0 } };"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function (e) {
          t[e] = V[e].bind(i);
        }), ee.extend(i, { zoom: t });var s = 1;Object.defineProperty(i.zoom, "scale", { get: function get() {
            return s;
          }, set: function set(e) {
            if (s !== e) {
              var t = i.zoom.gesture.$imageEl ? i.zoom.gesture.$imageEl[0] : void 0,
                  a = i.zoom.gesture.$slideEl ? i.zoom.gesture.$slideEl[0] : void 0;i.emit("zoomChange", e, t, a);
            }s = e;
          } });
      }, on: { init: function init() {
          this.params.zoom.enabled && this.zoom.enable();
        }, destroy: function destroy() {
          this.zoom.disable();
        }, touchStart: function touchStart(e) {
          this.zoom.enabled && this.zoom.onTouchStart(e);
        }, touchEnd: function touchEnd(e) {
          this.zoom.enabled && this.zoom.onTouchEnd(e);
        }, doubleTap: function doubleTap(e) {
          this.params.zoom.enabled && this.zoom.enabled && this.params.zoom.toggle && this.zoom.toggle(e);
        }, transitionEnd: function transitionEnd() {
          this.zoom.enabled && this.params.zoom.enabled && this.zoom.onTransitionEnd();
        } } }, { name: "lazy", params: { lazy: { enabled: !1, loadPrevNext: !1, loadPrevNextAmount: 1, loadOnTransitionStart: !1, elementClass: "swiper-lazy", loadingClass: "swiper-lazy-loading", loadedClass: "swiper-lazy-loaded", preloaderClass: "swiper-lazy-preloader" } }, create: function create() {
        ee.extend(this, { lazy: { initialImageLoaded: !1, load: F.load.bind(this), loadInSlide: F.loadInSlide.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          this.params.lazy.enabled && this.params.preloadImages && (this.params.preloadImages = !1);
        }, init: function init() {
          this.params.lazy.enabled && !this.params.loop && 0 === this.params.initialSlide && this.lazy.load();
        }, scroll: function scroll() {
          this.params.freeMode && !this.params.freeModeSticky && this.lazy.load();
        }, resize: function resize() {
          this.params.lazy.enabled && this.lazy.load();
        }, scrollbarDragMove: function scrollbarDragMove() {
          this.params.lazy.enabled && this.lazy.load();
        }, transitionStart: function transitionStart() {
          var e = this;e.params.lazy.enabled && (e.params.lazy.loadOnTransitionStart || !e.params.lazy.loadOnTransitionStart && !e.lazy.initialImageLoaded) && e.lazy.load();
        }, transitionEnd: function transitionEnd() {
          this.params.lazy.enabled && !this.params.lazy.loadOnTransitionStart && this.lazy.load();
        } } }, { name: "controller", params: { controller: { control: void 0, inverse: !1, by: "slide" } }, create: function create() {
        var e = this;ee.extend(e, { controller: { control: e.params.controller.control, getInterpolateFunction: R.getInterpolateFunction.bind(e), setTranslate: R.setTranslate.bind(e), setTransition: R.setTransition.bind(e) } });
      }, on: { update: function update() {
          this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
        }, resize: function resize() {
          this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
        }, observerUpdate: function observerUpdate() {
          this.controller.control && this.controller.spline && (this.controller.spline = void 0, delete this.controller.spline);
        }, setTranslate: function setTranslate(e, t) {
          this.controller.control && this.controller.setTranslate(e, t);
        }, setTransition: function setTransition(e, t) {
          this.controller.control && this.controller.setTransition(e, t);
        } } }, { name: "a11y", params: { a11y: { enabled: !0, notificationClass: "swiper-notification", prevSlideMessage: "Previous slide", nextSlideMessage: "Next slide", firstSlideMessage: "This is the first slide", lastSlideMessage: "This is the last slide", paginationBulletMessage: "Go to slide {{index}}" } }, create: function create() {
        var t = this;ee.extend(t, { a11y: { liveRegion: L('<span class="' + t.params.a11y.notificationClass + '" aria-live="assertive" aria-atomic="true"></span>') } }), Object.keys(q).forEach(function (e) {
          t.a11y[e] = q[e].bind(t);
        });
      }, on: { init: function init() {
          this.params.a11y.enabled && (this.a11y.init(), this.a11y.updateNavigation());
        }, toEdge: function toEdge() {
          this.params.a11y.enabled && this.a11y.updateNavigation();
        }, fromEdge: function fromEdge() {
          this.params.a11y.enabled && this.a11y.updateNavigation();
        }, paginationUpdate: function paginationUpdate() {
          this.params.a11y.enabled && this.a11y.updatePagination();
        }, destroy: function destroy() {
          this.params.a11y.enabled && this.a11y.destroy();
        } } }, { name: "history", params: { history: { enabled: !1, replaceState: !1, key: "slides" } }, create: function create() {
        var e = this;ee.extend(e, { history: { init: W.init.bind(e), setHistory: W.setHistory.bind(e), setHistoryPopState: W.setHistoryPopState.bind(e), scrollToSlide: W.scrollToSlide.bind(e), destroy: W.destroy.bind(e) } });
      }, on: { init: function init() {
          this.params.history.enabled && this.history.init();
        }, destroy: function destroy() {
          this.params.history.enabled && this.history.destroy();
        }, transitionEnd: function transitionEnd() {
          this.history.initialized && this.history.setHistory(this.params.history.key, this.activeIndex);
        } } }, { name: "hash-navigation", params: { hashNavigation: { enabled: !1, replaceState: !1, watchState: !1 } }, create: function create() {
        var e = this;ee.extend(e, { hashNavigation: { initialized: !1, init: j.init.bind(e), destroy: j.destroy.bind(e), setHash: j.setHash.bind(e), onHashCange: j.onHashCange.bind(e) } });
      }, on: { init: function init() {
          this.params.hashNavigation.enabled && this.hashNavigation.init();
        }, destroy: function destroy() {
          this.params.hashNavigation.enabled && this.hashNavigation.destroy();
        }, transitionEnd: function transitionEnd() {
          this.hashNavigation.initialized && this.hashNavigation.setHash();
        } } }, { name: "autoplay", params: { autoplay: { enabled: !1, delay: 3e3, waitForTransition: !0, disableOnInteraction: !0, stopOnLastSlide: !1, reverseDirection: !1 } }, create: function create() {
        var t = this;ee.extend(t, { autoplay: { running: !1, paused: !1, run: U.run.bind(t), start: U.start.bind(t), stop: U.stop.bind(t), pause: U.pause.bind(t), onTransitionEnd: function onTransitionEnd(e) {
              t && !t.destroyed && t.$wrapperEl && e.target === this && (t.$wrapperEl[0].removeEventListener("transitionend", t.autoplay.onTransitionEnd), t.$wrapperEl[0].removeEventListener("webkitTransitionEnd", t.autoplay.onTransitionEnd), t.autoplay.paused = !1, t.autoplay.running ? t.autoplay.run() : t.autoplay.stop());
            } } });
      }, on: { init: function init() {
          this.params.autoplay.enabled && this.autoplay.start();
        }, beforeTransitionStart: function beforeTransitionStart(e, t) {
          this.autoplay.running && (t || !this.params.autoplay.disableOnInteraction ? this.autoplay.pause(e) : this.autoplay.stop());
        }, sliderFirstMove: function sliderFirstMove() {
          this.autoplay.running && (this.params.autoplay.disableOnInteraction ? this.autoplay.stop() : this.autoplay.pause());
        }, destroy: function destroy() {
          this.autoplay.running && this.autoplay.stop();
        } } }, { name: "effect-fade", params: { fadeEffect: { crossFade: !1 } }, create: function create() {
        ee.extend(this, { fadeEffect: { setTranslate: K.setTranslate.bind(this), setTransition: K.setTransition.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          var e = this;if ("fade" === e.params.effect) {
            e.classNames.push(e.params.containerModifierClass + "fade");var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };ee.extend(e.params, t), ee.extend(e.originalParams, t);
          }
        }, setTranslate: function setTranslate() {
          "fade" === this.params.effect && this.fadeEffect.setTranslate();
        }, setTransition: function setTransition(e) {
          "fade" === this.params.effect && this.fadeEffect.setTransition(e);
        } } }, { name: "effect-cube", params: { cubeEffect: { slideShadows: !0, shadow: !0, shadowOffset: 20, shadowScale: .94 } }, create: function create() {
        ee.extend(this, { cubeEffect: { setTranslate: _.setTranslate.bind(this), setTransition: _.setTransition.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          var e = this;if ("cube" === e.params.effect) {
            e.classNames.push(e.params.containerModifierClass + "cube"), e.classNames.push(e.params.containerModifierClass + "3d");var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, resistanceRatio: 0, spaceBetween: 0, centeredSlides: !1, virtualTranslate: !0 };ee.extend(e.params, t), ee.extend(e.originalParams, t);
          }
        }, setTranslate: function setTranslate() {
          "cube" === this.params.effect && this.cubeEffect.setTranslate();
        }, setTransition: function setTransition(e) {
          "cube" === this.params.effect && this.cubeEffect.setTransition(e);
        } } }, { name: "effect-flip", params: { flipEffect: { slideShadows: !0, limitRotation: !0 } }, create: function create() {
        ee.extend(this, { flipEffect: { setTranslate: Z.setTranslate.bind(this), setTransition: Z.setTransition.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          var e = this;if ("flip" === e.params.effect) {
            e.classNames.push(e.params.containerModifierClass + "flip"), e.classNames.push(e.params.containerModifierClass + "3d");var t = { slidesPerView: 1, slidesPerColumn: 1, slidesPerGroup: 1, watchSlidesProgress: !0, spaceBetween: 0, virtualTranslate: !0 };ee.extend(e.params, t), ee.extend(e.originalParams, t);
          }
        }, setTranslate: function setTranslate() {
          "flip" === this.params.effect && this.flipEffect.setTranslate();
        }, setTransition: function setTransition(e) {
          "flip" === this.params.effect && this.flipEffect.setTransition(e);
        } } }, { name: "effect-coverflow", params: { coverflowEffect: { rotate: 50, stretch: 0, depth: 100, modifier: 1, slideShadows: !0 } }, create: function create() {
        ee.extend(this, { coverflowEffect: { setTranslate: Q.setTranslate.bind(this), setTransition: Q.setTransition.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          var e = this;"coverflow" === e.params.effect && (e.classNames.push(e.params.containerModifierClass + "coverflow"), e.classNames.push(e.params.containerModifierClass + "3d"), e.params.watchSlidesProgress = !0, e.originalParams.watchSlidesProgress = !0);
        }, setTranslate: function setTranslate() {
          "coverflow" === this.params.effect && this.coverflowEffect.setTranslate();
        }, setTransition: function setTransition(e) {
          "coverflow" === this.params.effect && this.coverflowEffect.setTransition(e);
        } } }, { name: "thumbs", params: { thumbs: { swiper: null, slideThumbActiveClass: "swiper-slide-thumb-active", thumbsContainerClass: "swiper-container-thumbs" } }, create: function create() {
        ee.extend(this, { thumbs: { swiper: null, init: ae.init.bind(this), update: ae.update.bind(this), onThumbClick: ae.onThumbClick.bind(this) } });
      }, on: { beforeInit: function beforeInit() {
          var e = this.params.thumbs;e && e.swiper && (this.thumbs.init(), this.thumbs.update(!0));
        }, slideChange: function slideChange() {
          this.thumbs.swiper && this.thumbs.update();
        }, update: function update() {
          this.thumbs.swiper && this.thumbs.update();
        }, resize: function resize() {
          this.thumbs.swiper && this.thumbs.update();
        }, observerUpdate: function observerUpdate() {
          this.thumbs.swiper && this.thumbs.update();
        }, setTransition: function setTransition(e) {
          var t = this.thumbs.swiper;t && t.setTransition(e);
        }, beforeDestroy: function beforeDestroy() {
          var e = this.thumbs.swiper;e && this.thumbs.swiperCreated && e && e.destroy();
        } } }];return void 0 === S.use && (S.use = S.Class.use, S.installModule = S.Class.installModule), S.use(ie), S;
  });
  
});

},{}],12:[function(require,module,exports){
"use strict";

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.a = mod.exports;
  }
})(undefined, function (module, exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var a = function a() {};

  exports.default = a;
  module.exports = exports["default"];
});

},{}],13:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports);
		global.closeNav = mod.exports;
	}
})(undefined, function (module, exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var closeNav = function closeNav() {
		var pressClose = $('.pressClose');
		var html = $('html');
		var nav = $('.b-nav');
		nav.removeClass('b-nav--active');
		pressClose.removeClass('pressClose--active');
		setTimeout(function () {
			html.removeClass('y-hidden');
		}, 300);
	};

	exports.default = closeNav;
	module.exports = exports['default'];
});

},{}],14:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports', './closeNav'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports, require('./closeNav'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports, global.closeNav);
		global.documentListener = mod.exports;
	}
})(undefined, function (module, exports, _closeNav) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _closeNav2 = _interopRequireDefault(_closeNav);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var documentListener = function documentListener() {
		var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

		$(document).on('click touchstart', function (e) {
			var _this = $(e.target);

			// if not self clicked
			if (!_this.closest('.hamburger').length && !_this.closest('.b-nav').length) {
				(0, _closeNav2.default)();
			}
			if (!_this.closest('.shopping-card').length && !_this.closest('.inputs-wrapper--shopping').length) {
				$('.shopping-card').removeClass('shopping-card--active');
				$('.inputs-wrapper--shopping').hide();
			}
		});
	};

	exports.default = documentListener;
	module.exports = exports['default'];
});

},{"./closeNav":13}],15:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['../compiled_js/jquery-3.3.1.min', './a', './nav', './windowScrollListener', './documentListener', './slider', './shoppingCard', './openPopup', './repeatItem', '../compiled_js/jquery.mask', '../compiled_js/popper.min', '../compiled_js/datepicker.min', '../compiled_js/swiper.min', '../compiled_js/bootstrap.bundle.min', '../compiled_js/bootstrap-select.min', '../compiled_js/sweetalert.min', '../compiled_js/jquery.form.min', '../compiled_js/form.variables'], factory);
	} else if (typeof exports !== "undefined") {
		factory(require('../compiled_js/jquery-3.3.1.min'), require('./a'), require('./nav'), require('./windowScrollListener'), require('./documentListener'), require('./slider'), require('./shoppingCard'), require('./openPopup'), require('./repeatItem'), require('../compiled_js/jquery.mask'), require('../compiled_js/popper.min'), require('../compiled_js/datepicker.min'), require('../compiled_js/swiper.min'), require('../compiled_js/bootstrap.bundle.min'), require('../compiled_js/bootstrap-select.min'), require('../compiled_js/sweetalert.min'), require('../compiled_js/jquery.form.min'), require('../compiled_js/form.variables'));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.jquery331, global.a, global.nav, global.windowScrollListener, global.documentListener, global.slider, global.shoppingCard, global.openPopup, global.repeatItem, global.jquery, global.popper, global.datepicker, global.swiper, global.bootstrapBundle, global.bootstrapSelect, global.sweetalert, global.jqueryForm, global.form);
		global.main = mod.exports;
	}
})(undefined, function (_jquery, _a, _nav, _windowScrollListener, _documentListener, _slider, _shoppingCard, _openPopup, _repeatItem) {
	'use strict';
	////// POPUP
	// import $ from 'jquery'
	// import mask from 'jquery-mask-plugin'
	// import Clipboard from 'clipboard'

	var _jquery2 = _interopRequireDefault(_jquery);

	var _a2 = _interopRequireDefault(_a);

	var _nav2 = _interopRequireDefault(_nav);

	var _windowScrollListener2 = _interopRequireDefault(_windowScrollListener);

	var _documentListener2 = _interopRequireDefault(_documentListener);

	var _slider2 = _interopRequireDefault(_slider);

	var _shoppingCard2 = _interopRequireDefault(_shoppingCard);

	var _openPopup2 = _interopRequireDefault(_openPopup);

	var _repeatItem2 = _interopRequireDefault(_repeatItem);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	// import 'bootstrap'
	// import 'bootstrap/js/dist/collapse'
	// require("@chenfengyuan/datepicker")


	// import Tooltip from 'tooltip'

	function ready(fn) {
		if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
			fn();
		} else {
			document.addEventListener('DOMContentLoaded', fn);
		}
	}

	ready(function () {

		(0, _nav2.default)();
		(0, _windowScrollListener2.default)();
		(0, _documentListener2.default)();
		(0, _slider2.default)(Swiper);
		(0, _shoppingCard2.default)();
		(0, _openPopup2.default)();
		(0, _repeatItem2.default)();

		(0, _jquery2.default)('[data-toggle="datepicker"]').datepicker({ format: "dd/mm/yyyy" });

		(0, _jquery2.default)('.jqueryMask').each(function () {
			var t = (0, _jquery2.default)(this);
			t.mask(t.attr('data-mask'), {
				translation: { A: { pattern: /A/, optional: false }, Z: { pattern: /[AZ]/, optional: false }, E: { pattern: /E/, optional: true } }
			});
		});

		(0, _jquery2.default)('#Declarations_link_id').change(function () {
			(0, _jquery2.default)('#Declarations_name').trigger('focus');
		});

		// $.mask.definitions['9'] = '';
		// $.mask.definitions['d'] = '[0-9]';
		// $('.jqueryMask').mask('2231');


		// Clipboard
		// new Clipboard('.btn-clipboard');
		var timeout;
		// const timeout
		var copyToClipboard = function copyToClipboard(text) {
			var aux = document.createElement("input");
			aux.setAttribute("value", text);
			document.body.appendChild(aux);
			aux.select();
			document.execCommand("copy");
			document.body.removeChild(aux);
		};

		var tooltip = (0, _jquery2.default)('.tooltiptext');
		tooltip.text(tooltip.data('copy'));

		(0, _jquery2.default)('.btn-clipboard').bind('click onpressstart', function (e) {
			var target = (0, _jquery2.default)(e.target).parent('button');
			var tooltip = target.find('.tooltiptext');
			// const copyText = $( target.data('clipboard-target') )
			// COPY
			var copyText = target.closest('.copy').find('.copy__value').text().trim();

			copyToClipboard(copyText);
			// $(target.data('clipboard-target')).text()

			tooltip.text(tooltip.data('copied'));
			clearTimeout(timeout);
			// copyToClipboard(copyText)
		});
		(0, _jquery2.default)('.btn-clipboard').mouseout(function (e) {
			var target = (0, _jquery2.default)(e.target);
			var tooltip = target.find('.tooltiptext');
			// const copyText = $( target.data('clipboard-target') )

			timeout = setTimeout(function () {
				tooltip.text(tooltip.data('copy'));
			}, 200);
		});
		(0, _jquery2.default)('.selectpicker').selectpicker();

		// we add the modal to the end of body 
		var modal = (0, _jquery2.default)('.add-to-the-end-of-body');
		(0, _jquery2.default)('body').append(modal.clone());
		modal.remove();

		// scroll to order
		(0, _jquery2.default)(".scroll-to-order").click(function (e) {
			e.preventDefault();
			(0, _jquery2.default)('html, body').animate({
				scrollTop: (0, _jquery2.default)(".orders-holder").offset().top - 10
			}, 1000);
		});

		//scroll to top
		(0, _jquery2.default)(".scroll-to-top").click(function (e) {
			e.preventDefault();
			(0, _jquery2.default)('html, body').animate({
				scrollTop: 0
			}, 1000);
		});
	});
});

},{"../compiled_js/bootstrap-select.min":2,"../compiled_js/bootstrap.bundle.min":3,"../compiled_js/datepicker.min":4,"../compiled_js/form.variables":5,"../compiled_js/jquery-3.3.1.min":6,"../compiled_js/jquery.form.min":7,"../compiled_js/jquery.mask":8,"../compiled_js/popper.min":9,"../compiled_js/sweetalert.min":10,"../compiled_js/swiper.min":11,"./a":12,"./documentListener":14,"./nav":16,"./openPopup":17,"./repeatItem":18,"./shoppingCard":19,"./slider":20,"./windowScrollListener":21}],16:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports', './closeNav'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports, require('./closeNav'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports, global.closeNav);
		global.nav = mod.exports;
	}
})(undefined, function (module, exports, _closeNav) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _closeNav2 = _interopRequireDefault(_closeNav);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	var nav = function nav() {
		$('.hamburger').click(function () {
			var nav = $('.b-nav');
			var pressClose = $('.pressClose');
			var html = $('html');

			nav.addClass('b-nav--active');
			pressClose.addClass('pressClose--active');
			html.addClass('y-hidden');
		});

		$('.nav-tab-button').click(function (e) {
			e.preventDefault();
			var target = $(e.target);
			var href = target.attr('href');
			$('.b-nav__tab').removeClass('b-nav__tab--active');
			target.parent('.b-nav__tab').addClass('b-nav__tab--active');
			$('.b-nav__tab-content').removeClass('b-nav__tab-content--active');
			$('.b-nav__tab-content' + href).addClass('b-nav__tab-content--active');
		});

		$('.pressClose').bind('click, touchstart', function (e) {
			(0, _closeNav2.default)();
		});
	};

	exports.default = nav;
	module.exports = exports['default'];
});

},{"./closeNav":13}],17:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports);
		global.openPopup = mod.exports;
	}
})(undefined, function (module, exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var openPopup = function openPopup() {
		var blurryBg = $('.blurry-background');
		var popup = $('.b-popup');
		var bNav = $('.b-nav'); // responsive issues
		$('.openPopup').click(function (e) {
			e.preventDefault();
			var target = $(e.target).closest('a');
			var href = target.attr('href');
			// const offset = $(e.target).offset()
			// const top = offset.top
			// const left = offset.left
			bNav.css('display', 'none');
			blurryBg.addClass('blurry-background--active');
			// $('body').css('background-color', 'rgba(0, 0, 0, .2)')
			if ($(href).length > 0) {
				$(href).addClass('b-popup--active');
			} else {
				popup.addClass('b-popup--active');
			}

			// popup.css('display', 'flex')
		});
		$(document).on('click touchstart', '.b-popup, .close-b-popup', function (e) {
			e.preventDefault();
			var target = $(e.target);
			if (target.closest('.b-popup__inner').length <= 0 || target.closest('.close-b-popup').length > 0) {
				blurryBg.removeClass('blurry-background--active');
				$('.b-popup--active').removeClass('b-popup--active');
				setTimeout(function () {
					bNav.css('display', 'flex');
				}, 300);
				// $('body').css('background-color', 'white')
			}
		});
	};

	exports.default = openPopup;
	module.exports = exports['default'];
});

},{}],18:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports);
		global.repeatItem = mod.exports;
	}
})(undefined, function (module, exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var repeatItem = function repeatItem() {
		var repeatItem = $('[data-repeat-id="item"]').eq(0);
		var repeatItemParent = $('[data-repeat-id="item"]').eq(0).parent();
		var repeatItemClone = repeatItem.clone();
		var repeatItemButton = $('[data-repeat-target="item"]').eq(0);
		if (repeatItem && repeatItemButton) {
			// const closeItemButton = $('.close-additional-item')
			repeatItemButton.click(function (e) {
				e.preventDefault();
				repeatItemParent.append(repeatItemClone.clone());
			});

			$(document).on('click', '.close-additional-item', function (e) {
				e.preventDefault();
				if ($('[data-repeat-id="item"]').length > 1) {
					var target = $(e.target);
					target.closest('[data-repeat-id="item"]').remove();
				}
			});
		}
	};

	exports.default = repeatItem;
	module.exports = exports['default'];
});

},{}],19:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports);
		global.shoppingCard = mod.exports;
	}
})(undefined, function (module, exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var _this2 = undefined;

	var shoppingCard = function shoppingCard() {
		$('.shopping-card').click(function (e) {
			e.preventDefault();
			var _this = $(_this2);
			$('.shopping-card').toggleClass('shopping-card--active');
			$('.inputs-wrapper--shopping').toggle();

			$('.b-nav__wrapper').addClass('b-nav__wrapper--active');

			$('html, body').animate({
				scrollTop: 0
			}, 1000);

			// console.log($(this))
		});
	};

	exports.default = shoppingCard;
	module.exports = exports['default'];
});

},{}],20:[function(require,module,exports){
'use strict';

(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.slider = mod.exports;
  }
})(undefined, function (module, exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var mySwiper = function mySwiper(Swiper) {
    return new Swiper('.swiper-container', {
      // Optional parameters
      direction: 'horizontal',
      loop: true,
      autoplay: false,
      speed: 400,
      spaceBetween: 100,
      slideShadows: true,
      calculateHeight: true,
      shadow: true,

      // If we need pagination
      pagination: {
        el: '.swiper-pagination'
      },

      // Navigation arrows
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev'
      },

      // And if we need scrollbar
      scrollbar: {
        el: '.swiper-scrollbar'
      }
    });
  };

  exports.default = mySwiper;
  module.exports = exports['default'];
});

},{}],21:[function(require,module,exports){
'use strict';

(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['module', 'exports'], factory);
	} else if (typeof exports !== "undefined") {
		factory(module, exports);
	} else {
		var mod = {
			exports: {}
		};
		factory(mod, mod.exports);
		global.windowScrollListener = mod.exports;
	}
})(undefined, function (module, exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var windowScrollListener = function windowScrollListener() {
		// scroll listener
		var lastScrollTop = 0;
		$(window).scroll(function () {

			var scrollTop = $(window).scrollTop();
			var navWrapper = $('.b-nav__wrapper');
			var navMain = $('.b-nav__main');
			var topNav = $('.b-nav__top');
			var scrollToTopButton = $('.scroll-to-top');

			// if(scrollTop>70) {
			// 	topNav.addClass('b-nav__top--hidden')
			// 	navMain.removeClass('py-3')
			// 	if(scrollTop>lastScrollTop){
			// 		navWrapper.removeClass('b-nav__wrapper--active')


			// 	} else {
			// 		navWrapper.addClass('b-nav__wrapper--active')
			// 	}
			// } else {
			// 	topNav.removeClass('b-nav__top--hidden')
			// 	navMain.addClass('py-3')

			// }

			if (scrollTop > 100) {
				scrollToTopButton.addClass('scroll-to-top--active');
			} else {
				scrollToTopButton.removeClass('scroll-to-top--active');
			}

			lastScrollTop = scrollTop;
		});
	};

	exports.default = windowScrollListener;
	module.exports = exports['default'];
});

},{}]},{},[15])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
